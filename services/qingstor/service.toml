name = "qingstor"

[namespace.service.new]
required = ["credential"]
optional = ["endpoint", "http_client_options"]

[namespace.service.op.create]
required = ["location"]

[namespace.service.op.delete]
optional = ["location"]

[namespace.service.op.get]
optional = ["location"]

[namespace.service.op.list]
optional = ["location"]

[namespace.storage]
features = ["virtual_dir", "virtual_link"]
implement = ["appender", "copier", "direr", "fetcher", "linker", "mover", "multiparter", "storage_http_signer"]

[namespace.storage.new]
required = ["name"]
optional = ["disable_uri_cleaning", "http_client_options", "location", "work_dir"]

[namespace.storage.op.create]
optional = ["multipart_id", "object_mode"]

[namespace.storage.op.create_dir]
optional = ["storage_class"]

[namespace.storage.op.delete]
optional = ["multipart_id", "object_mode"]

[namespace.storage.op.stat]
optional = ["multipart_id", "object_mode"]

[namespace.storage.op.list]
optional = ["list_mode"]

[namespace.storage.op.read]
optional = ["offset", "io_callback", "size", "encryption_customer_algorithm", "encryption_customer_key"]

[namespace.storage.op.write]
optional = ["content_md5", "content_type", "io_callback", "storage_class", "encryption_customer_algorithm", "encryption_customer_key"]

[namespace.storage.op.create_append]
optional = ["content_type", "storage_class"]

[namespace.storage.op.write_append]
optional = ["content_md5"]

[namespace.storage.op.copy]
optional = ["encryption_customer_algorithm", "encryption_customer_key", "copy_source_encryption_customer_algorithm", "copy_source_encryption_customer_key"]

[namespace.storage.op.create_multipart]
optional = ["encryption_customer_algorithm", "encryption_customer_key"]

[namespace.storage.op.write_multipart]
optional = ["encryption_customer_algorithm", "encryption_customer_key", "io_callback"]

[namespace.storage.op.query_sign_http_read]
optional = ["offset", "encryption_customer_algorithm", "encryption_customer_key", "size"]

[namespace.storage.op.query_sign_http_write]
optional = ["content_md5", "content_type", "encryption_customer_algorithm", "encryption_customer_key", "storage_class"]

[pairs.encryption_customer_algorithm]
type = "string"
description = "specifies the encryption algorithm. Only AES256 is supported now."

[pairs.encryption_customer_key]
type = "[]byte"
description = "is the customer-provided encryption key. For AES256 keys, the plaintext must be 32 bytes long."

[pairs.copy_source_encryption_customer_algorithm]
type = "string"
description = "is the encryption algorithm for the source object. Only AES256 is supported now."

[pairs.copy_source_encryption_customer_key]
type = "[]byte"
description = "is the customer-provided encryption key for the source object. For AES256 keys, the plaintext must be 32 bytes long."

[pairs.disable_uri_cleaning]
type = "bool"

[pairs.storage_class]
type = "string"

[infos.object.meta.storage-class]
type = "string"

[infos.object.meta.encryption_customer_algorithm]
type = "string"
