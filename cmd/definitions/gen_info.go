//go:build tools
// +build tools

package main

import (
	"fmt"

	"github.com/Xuanwo/gg"
	"github.com/Xuanwo/templateutils"
	log "github.com/sirupsen/logrus"
)

func generateInfo(data *Data, path string) {
	f := gg.Group()
	f.LineComment("Code generated by go generate cmd/definitions; DO NOT EDIT.")
	f.Package("types")
	f.Imports().Path("fmt")

	for serviceName, infos := range data.InfosMap {
		serviceNameC := templateutils.ToCamel(serviceName)
		serviceNameP := templateutils.ToPascal(serviceName)
		serviceNameK := templateutils.ToKebab(serviceName)

		// Generate field bits
		f.LineComment("Field index in %s bit", serviceNameC)
		consts := f.Const()
		for k, v := range infos {
			consts.Field(
				fmt.Sprintf("%sIndex%s",
					serviceNameC, templateutils.ToPascal(v.Name)),
				fmt.Sprintf("1<<%d", k),
			)
		}

		// Generate struct
		st := f.Struct(serviceNameP)
		for _, v := range infos {
			st.Field(v.TypeName(), v.Type())
		}
		st.Line()
		st.LineComment("bit used as a bitmap for object value, 0 means not set, 1 means set")
		st.Field("bit", "uint64")
		st.Field("m", "map[string]interface{}")

		// Generate Get/Set functions.
		for _, v := range infos {
			// If the value is export, we don't need to generate MustGetXxxx
			if v.Export {
				f.Function("Get"+v.DisplayName()).
					Receiver("m", "*"+serviceNameP).
					Result("", v.Type()).
					Body(gg.Return().Id("m." + v.TypeName()))
				f.Function("Set"+v.DisplayName()).
					Receiver("m", "*"+serviceNameP).
					Parameter("v", v.Type()).
					Result("", "*"+serviceNameP).
					Body(
						gg.String("m.%s = v", v.TypeName()),
						gg.Return().Id("m"),
					)
				continue
			}
			f.Function("Get"+v.DisplayName()).
				Receiver("m", "*"+serviceNameP).
				Result("", v.Type()).
				Result("", "bool").
				Body(
					gg.If(gg.String("m.bit & %sIndex%s != 0",
						serviceNameC, templateutils.ToPascal(v.Name))).
						Body(
							gg.Return().Id("m."+v.TypeName()).Lit(true)),
					gg.Return().Id(templateutils.ZeroValue(v.Type())).Lit(false),
				)
			f.Function("MustGet"+v.DisplayName()).
				Receiver("m", "*"+serviceNameP).
				Result("", v.Type()).
				Body(
					gg.If(gg.String("m.bit & %sIndex%s == 0",
						serviceNameC, templateutils.ToPascal(v.Name))).
						Body(gg.String(
							`panic(fmt.Sprintf("%s %s is not set"))`,
							serviceNameK, v.Name)),
					gg.Return().Id("m."+v.TypeName()),
				)
			f.Function("Set"+v.DisplayName()).
				Receiver("m", "*"+serviceNameP).
				Parameter("v", v.Type()).
				Result("", "*"+serviceNameP).
				Body(
					gg.String("m.%s = v", v.TypeName()),
					gg.String("m.bit |= %sIndex%s",
						serviceNameC, templateutils.ToPascal(v.Name)),
					gg.Return().Id("m"),
				)
		}
	}

	err := f.WriteFile(path)
	if err != nil {
		log.Fatalf("generate to %s: %v", path, err)
	}
}
