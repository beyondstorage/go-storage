// Code generated by go-bindata. DO NOT EDIT.
// sources:
// definitions/features.toml (1.578kB)
// definitions/fields.toml (714B)
// definitions/info_object_meta.toml (932B)
// definitions/info_storage_meta.toml (1.139kB)
// definitions/operations.toml (8.975kB)
// definitions/pairs.toml (1.426kB)
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (2.388kB)
// cmd/definitions/tmpl/operation.tmpl (2.113kB)
// cmd/definitions/tmpl/pair.tmpl (513B)
// cmd/definitions/tmpl/service.tmpl (12.553kB)

// +build tools

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _definitionsFeaturesToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8b\x13\x41\x10\x85\xef\xf3\x2b\x1e\x7b\x51\x21\x09\x7a\x11\x15\x3c\x8b\x37\x41\x6f\x8b\x84\xca\x74\xc5\x29\xd3\xd3\x35\x54\xd7\x4c\xd8\x7f\x2f\x3d\x93\xd9\x0d\x21\x13\xc4\xdd\x83\xb7\x24\xdd\xf5\xea\xbd\xf7\x35\xb9\x8f\xaa\x99\xb7\x1d\x89\xfd\xac\x02\xe7\xda\xa4\x73\xd1\x84\xcf\xb8\xbb\xbb\xab\x9e\x4e\xb1\x67\xf2\xde\x18\x92\x11\x38\xcb\xaf\xc4\x01\x7b\x35\xf4\x99\x2d\xe3\xd8\x28\x82\xa6\x57\x8e\x23\x25\x47\x76\x93\xda\x31\x0e\xd6\x0d\xd7\x87\xbc\xa9\xaa\xaf\x7b\x78\x23\xf9\x5c\x89\x13\xed\x22\x87\x15\xbc\x61\x64\xb6\x41\x6a\xc6\x51\x62\x44\x52\x87\xb1\xf7\x96\x40\x09\x6c\xa6\x36\xae\x2b\xbf\xe7\xbe\xeb\xd4\x26\xf9\x22\xfc\xe3\x5c\xf5\x48\x19\x92\xdc\x34\xf4\x35\x07\x48\xc2\x97\xef\xdf\xd6\xef\xde\x7e\xdc\x54\x25\x51\x75\x3f\x88\x79\x4f\x71\x1b\xae\x47\x3e\x3b\x5e\xcc\x4c\x8f\x5e\xbd\x21\x47\x50\xce\x25\x7a\x43\x03\x23\x91\xcb\xc0\x28\xe3\xb3\xcf\x5d\x3f\xd5\x92\xe1\x8a\xce\x74\x90\xc0\xc8\xd2\xf6\x91\x9c\x03\xb4\x63\xa3\xe2\xa0\x64\x59\xe3\x4a\x4d\x41\xf2\xd8\x13\x5e\x97\x9e\x02\xef\xa9\x8f\x8e\x1d\x37\x34\x88\xda\x9b\x2b\xf5\x8d\x67\x8c\x28\x07\x86\x5c\x38\xa4\xf4\x70\x6e\x6f\x73\x7d\xe7\x32\x9a\x39\xd6\x53\x82\xa2\x36\xbb\x29\x8d\xd7\xc6\xe4\x5c\x2a\x5c\x9d\x3e\xaf\x10\x25\xfb\x0a\x81\x23\x97\x6f\x94\x02\xb2\x42\xd3\x3f\xe3\xd3\xdd\x6f\xae\x7d\xdb\xb2\x53\x20\xa7\x5b\x28\x2f\xae\x3e\x07\xeb\x24\x85\x47\xa9\xff\x18\xf1\x82\xd5\x17\xc0\x7d\xa9\x7c\x8e\xbe\x8c\x4f\xa8\xb3\x93\xbf\x04\xe8\x28\xe9\x70\x8b\x6e\x39\x7f\x0e\xd2\x39\x5f\xb9\x5e\xb4\x96\x08\x2d\x37\x64\x7d\x42\xad\x6d\x47\x2e\xbb\xc8\x68\x35\xf0\xa7\xd3\xbb\x1f\x15\x31\x08\xcd\xdb\x5a\xf6\x46\x43\x5e\x8d\x2f\x86\x62\xd4\x23\x8c\x29\x4c\xf7\xf6\xa6\x2d\x34\x86\x75\xf6\x87\x78\x9a\x9d\xca\x5e\xa0\x56\xfe\x0d\x6f\xfb\x92\x34\x6f\xa6\x0c\xf5\x86\x6d\xbe\xf3\x77\x40\x3e\xbc\x3f\xf1\xf8\x13\x00\x00\xff\xff\x02\x8a\xc0\x31\x2a\x06\x00\x00")

func definitionsFeaturesTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFeaturesToml,
		"definitions/features.toml",
	)
}

func definitionsFeaturesToml() (*asset, error) {
	bytes, err := definitionsFeaturesTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/features.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0xde, 0x64, 0x57, 0x6f, 0xe4, 0xa1, 0x28, 0x9a, 0xdf, 0xf5, 0xa, 0x78, 0xe3, 0xe7, 0xe5, 0x4c, 0x35, 0xce, 0xe9, 0xb8, 0x4b, 0x32, 0xb7, 0xb2, 0xdc, 0x74, 0xc5, 0x98, 0xd5, 0x9f, 0x28}}
	return a, nil
}

var _definitionsFieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xb1\x4e\xc3\x30\x14\xdc\xf3\x15\x55\xc7\x0e\x9e\x10\x1b\x0b\x62\x61\x40\x54\x65\x60\x88\x3a\xbc\x24\xd7\xf4\x41\x13\xbb\xcf\x2f\xa2\xf0\xf5\x28\x09\x95\x5f\xa8\xd7\xbb\xf3\xdd\xe9\x9e\xcb\x8a\xf7\x85\x7e\x07\xac\x1e\x56\xeb\xcd\xe3\xc9\xd7\x9f\xcf\x0a\x21\xf5\xb2\x2e\x8a\xb2\xe2\x26\xd1\x51\x85\xfb\xf6\x0f\x8e\x09\x2f\xf7\x89\x69\xa2\xe6\x1e\x40\x24\xc1\x10\x99\xdd\x71\x09\x2c\x48\x84\x72\x07\xf7\x34\x08\x29\xfb\x7e\x14\x70\xdf\xe0\x92\x78\xee\x75\x44\x3b\x28\x99\xd2\x6f\xea\x85\x5a\xbc\x40\x69\x64\xfb\x85\xfe\xfe\x6e\xc2\xa8\x43\xae\x96\x37\x36\xaf\xd5\x07\xea\xc9\xdf\x1f\x0e\x11\x9a\xb1\xf1\x7c\xa3\xb7\x63\xf9\x90\xcb\x08\xc4\x62\xc6\x72\xce\x6d\x89\x65\x66\xc4\xa4\x6c\xb6\x24\x7a\x85\x17\xeb\x1a\x46\x8f\xd9\x08\xfe\x67\x63\x5b\x99\xe1\xd9\xbb\x1d\xa8\xc1\x8c\xe3\x6c\x5e\x1d\x55\x83\xdb\xe1\x3c\x20\x4e\x51\x91\x7f\x90\x59\x20\x4a\x9d\x2b\x10\x95\x6f\x0f\x22\xb6\x45\x54\x6f\x2f\x7d\x95\x8c\xd4\x20\xa7\x9c\xe7\xd7\xa2\xf7\xbb\xb0\xce\x72\x25\x69\x91\xf9\x64\xbf\x01\x00\x00\xff\xff\x5c\xa2\x94\x99\xca\x02\x00\x00")

func definitionsFieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFieldsToml,
		"definitions/fields.toml",
	)
}

func definitionsFieldsToml() (*asset, error) {
	bytes, err := definitionsFieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfe, 0xa5, 0x29, 0x70, 0xa5, 0x18, 0x85, 0x7b, 0xfe, 0x73, 0xbf, 0x8c, 0xef, 0x61, 0xf6, 0xa1, 0xa2, 0x5, 0x4c, 0xf, 0xe9, 0x27, 0xee, 0x26, 0x1b, 0x41, 0xe8, 0x33, 0x87, 0xaa, 0x98, 0x7f}}
	return a, nil
}

var _definitionsInfo_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xb1\x8e\xd4\x40\x0c\xed\xf3\x15\xd6\x36\x57\xe5\x2a\xa0\xbb\x02\xe9\x1a\x24\x56\x87\xc4\x21\x8a\xd5\x15\x73\x3b\x4e\x62\x36\x33\x1e\x6c\x07\x58\x21\xfe\x1d\xcd\xcc\x45\x1b\xb2\x41\xba\x6e\xc6\x7e\x7e\xcf\x7e\xf6\xc1\xa5\x84\xd1\xb7\xdc\x75\x8a\xf6\xd4\xd8\x39\x21\xdc\xc1\x8e\xa2\xbd\x7b\xb3\x6b\x3c\xea\x51\x28\x19\x71\xcc\xd1\xf7\x05\xfc\x50\xb0\x40\x0a\x36\x20\xd4\x4a\xe0\xae\xfc\x2a\x1d\xf0\xf3\x37\x3c\xda\xed\xae\x69\x0e\x47\x8e\x86\xd1\xda\x11\x63\x6f\xc3\x95\xc2\x05\x10\xfc\xdb\x4b\x56\x4d\x28\xf6\xcb\x74\xce\x6c\xe5\xd1\x5c\xbf\x15\x27\x7f\x1d\xc5\x5f\x89\xc5\xe0\x0e\x4c\x26\x5c\x0f\xf7\xe1\x7e\x1e\x69\x8a\xf4\x7d\x42\x38\xe1\x19\x28\x82\x1a\x8b\xeb\xb1\x0c\x33\x3a\xb5\x36\xb0\xa7\x8e\x70\xc1\x6f\x14\xf0\xf6\x91\x02\x16\x0c\xc5\x53\x6b\x4e\xfa\xa5\x9f\x73\x07\x2b\xcd\x8f\x14\x4f\x8f\x05\x3a\x6b\xeb\x39\x64\x02\xa8\x04\xd0\xb1\x40\xf9\x2f\x1c\x0d\xec\x17\x4e\x3c\x94\xc4\x9e\x3d\xae\xe7\x6b\x0e\x61\x1a\x8d\x92\x13\x6b\xb7\xdc\x58\xf5\xb2\x9f\xc1\x17\x23\xf2\x0f\xc8\xe7\xe5\x96\xe7\xa2\x89\xe4\x96\xcb\x7c\x95\xc1\x9f\x9c\x0d\x99\x19\xc9\x06\x94\x7a\x2e\xcf\xca\xe3\x64\x59\xc9\x06\xe0\x1a\x14\x1c\x9d\xd1\x8f\x97\xa0\xf1\x4f\x27\x5e\xe7\x35\xdc\x28\x7c\x65\x39\xdd\x93\x80\xc7\x7c\x6b\x0a\x1c\x61\x52\x94\x1b\x05\x8a\x69\xaa\xed\xe9\x59\x0d\x43\x1b\xd0\x9c\x77\xe6\xfe\x39\x3b\x94\xce\x1d\xf1\xf7\x9f\x2b\x07\x3e\x97\xa2\xfd\x4b\x4d\x51\x44\x85\x4a\x05\x1e\x3b\x8a\xe8\x61\xa6\x2c\x32\x59\x77\x43\x24\xb8\x74\xa8\x96\x3c\xfd\xc7\xec\x2f\x8a\xb2\x16\xca\x64\x5b\x32\x7f\x03\x00\x00\xff\xff\x6b\x55\xfd\x86\xa4\x03\x00\x00")

func definitionsInfo_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_object_metaToml,
		"definitions/info_object_meta.toml",
	)
}

func definitionsInfo_object_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0xc7, 0x12, 0x2e, 0xc1, 0x1f, 0x6, 0x2a, 0xc2, 0xf5, 0x95, 0x4b, 0x90, 0x32, 0x59, 0x47, 0x96, 0xc7, 0x79, 0xa4, 0x2e, 0x79, 0x2f, 0x9b, 0xb9, 0xb8, 0xbf, 0x8, 0xb1, 0xc3, 0x8c, 0x18}}
	return a, nil
}

var _definitionsInfo_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd2\xbd\x72\xab\x30\x10\x05\xe0\x5e\x4f\xa1\xa1\xe7\x56\x77\xd2\xf9\x11\x5c\xa5\xf4\xa4\x58\xa3\xc5\xd9\x09\xfa\x99\xd5\x12\x43\x32\x79\xf7\x8c\x84\x21\x63\x4c\x1c\xdb\x94\x08\x9d\xef\x2c\x48\x3b\x08\x01\x9d\x29\x5d\x6b\xf7\xc8\xa5\x85\x8e\x6c\x6b\x5f\x94\xf4\x01\xf5\x46\x17\xe4\xa4\x50\x06\x63\xc5\x14\x84\xbc\x4b\x6b\x5b\xe8\xf4\x10\xd3\x43\x2c\x6a\x72\xe3\x8a\x0f\xc8\x90\x76\xfe\x2b\x94\x1a\xf5\x48\x1f\xb8\x68\x3f\xfd\xbf\xa6\xa7\x58\xa2\x03\xf2\x55\x5e\xbc\x40\xf3\x68\x49\x0e\x4f\x55\x8b\x35\x95\x0f\xfd\xbd\x7c\xda\x36\xa8\xb5\x67\x9d\x84\x19\x5a\xa3\x54\xaf\xeb\xd4\x4c\xcc\xd8\xc6\x57\xf9\xe1\x07\x8b\xc2\xe4\x0e\xe9\x9d\xf5\xef\xb8\xae\x31\x09\xb3\x42\xdb\x36\x42\x01\x58\xee\xbd\x43\x59\x4e\xc1\xd3\x2d\x4a\xbf\x7f\xc2\x7e\x2d\x79\x64\xfc\x0c\xe6\x6f\x30\x58\x93\x43\xa3\xf7\xbd\x8e\xe2\x19\x0e\xc8\x8b\x3e\xb9\x9b\xfc\x61\xdb\x0d\xbe\x03\x8b\x97\x27\x82\x5d\xf0\x2c\x7a\xa3\x85\x5b\x54\x6a\x17\xfb\x28\x68\x4b\x8b\x02\x06\x04\xce\xea\x91\x6b\xa8\xf0\xf3\xeb\x62\x88\xe7\x1c\xda\x9e\x32\xb9\x16\xa3\x1e\xa8\x69\x9e\x91\xcc\xc3\x1c\x3d\xbf\x95\x86\xf8\xef\x81\x8e\x4c\xb2\xf2\xc6\x64\xe2\xec\x34\xbf\x03\x00\x00\xff\xff\x41\xde\xf8\x57\x73\x04\x00\x00")

func definitionsInfo_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_storage_metaToml,
		"definitions/info_storage_meta.toml",
	)
}

func definitionsInfo_storage_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xdc, 0x18, 0x27, 0xc0, 0x7d, 0xb9, 0x57, 0x8b, 0xe9, 0x90, 0xfd, 0xf8, 0xb3, 0x2, 0x40, 0x16, 0xce, 0x94, 0xf9, 0x18, 0x51, 0x52, 0x7a, 0xff, 0x6b, 0x10, 0x2d, 0x50, 0x8, 0x2e, 0xb0}}
	return a, nil
}

var _definitionsOperationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x8f\xdc\xb8\x11\xbe\xf7\xaf\x28\xf4\x1e\x0c\x04\x33\x8d\x3d\x07\xd8\x83\x77\xc6\x41\x0c\xf8\xb1\xb0\xd7\xd9\x83\x31\x98\x66\x4b\xa5\x16\x63\x8a\x94\x49\xaa\xc7\x9d\x5f\x1f\x14\x8b\x92\xa8\x57\xb7\x3c\xeb\xe4\x92\x5c\x8c\x1e\x89\xf5\x55\xb1\xf8\xd5\x8b\xf2\x67\x51\xd7\xa8\x73\xb4\x0f\x9b\x1c\x5d\x66\x65\xed\xa5\xd1\xf0\x0b\x6c\xa5\x03\x5f\x22\x48\xed\xd1\x16\x22\x43\x28\x8c\x85\x97\x61\x35\x58\x54\xc2\x63\x0e\xa6\x46\x2b\x48\xc0\xed\xb6\x9b\x4d\x87\xb5\x33\xf5\x2e\xb3\x28\x3c\x3e\xf2\xa3\x87\x4d\x2d\xac\xa8\x1c\xfc\x02\x9f\xb7\xb5\xf0\xe5\xf6\x61\x63\xd1\x35\xca\xf3\x23\xb3\x9d\xa8\xdf\x6e\x37\x4f\x52\x29\x60\x1c\x10\x1a\x18\x0a\xcc\xe1\x9f\x98\xf9\xdd\x66\xf3\xd3\x4f\xf0\x2b\x96\xe2\x24\x8d\xdd\x6c\x6e\xe1\x2e\x2c\x8c\x06\x7e\xfc\xfb\xfb\x4f\x6f\xee\x27\xc2\xe2\xa0\x30\x02\xc0\x93\xf4\x25\xd4\xc6\xc9\xa0\xf1\x67\x10\x3a\x07\x27\xff\x85\xf0\xf3\x6e\x01\xed\xdd\xfb\xdf\xc1\xa2\x6f\xac\x26\x44\xb4\xd6\x58\x10\xec\xa5\x88\x89\xdf\xa4\xf3\xbb\x0d\xc0\x2d\x7c\x44\x7b\x92\x19\x76\x96\x94\x98\x7d\x09\x3a\x72\x54\xe8\x31\x95\x92\x05\x0b\xba\xdd\x86\xb6\x3d\xf4\xe3\x93\x95\x89\x1b\x47\x4e\x0a\x1e\x8a\x7e\xc9\x8c\xf6\xa8\x3d\x78\x33\x75\xd6\x36\xf5\xbf\xd9\xde\xc0\xd6\xd2\x3f\xb4\xdd\xd1\x49\xe8\xed\xc3\x86\x85\x1e\x2b\x93\x23\x29\x61\xa8\xc9\xf9\x9a\xaa\x92\xfe\xa2\x61\xbc\x24\x6c\xba\x90\x5a\xba\x32\x31\xac\xb6\x26\x43\xe7\xc6\x96\x5d\x50\x7e\x50\x26\xfb\xb2\x96\xa7\xbf\xd2\xe2\x25\x9a\x46\xa4\x84\xa5\xe1\xc9\x0f\x20\x29\x68\x7c\x82\x00\x36\x4f\xd3\x96\x57\x6c\xde\x9f\xa1\x95\x2f\x85\x87\x52\x38\xd0\xc2\xcb\x13\x82\x6b\xea\xda\x58\x1f\x36\xbf\x37\x27\xb4\x81\x37\x7b\xc8\x0d\x3a\xfd\xc2\xc3\xbb\x57\xaf\xee\x89\x1a\xcc\xc3\x31\xb6\x03\x63\x41\x9b\x39\x1d\x2d\x40\x29\x4e\x78\x4d\xd9\x73\xb8\x9e\x1c\x06\x53\x3d\x9e\xc5\x1c\xa1\xc2\x82\x01\xd1\xd9\xd9\x17\xf9\x7d\x03\xdb\x83\xcc\xaf\xd3\x3c\x20\x8d\xe9\x61\xaa\x83\xd4\x17\x6d\x8a\x4b\xd8\x10\x47\x34\x0c\xf1\xb7\x18\x78\x07\x99\xbb\x75\xca\x95\x74\xfe\x92\x66\x7a\xdf\xaa\x3d\xa0\x32\xfa\x48\x2e\xf1\xa5\x74\x0b\xda\x87\x2e\x38\xc8\x0b\x66\x64\xa6\x96\x6b\x63\xed\xce\xd4\xe7\x5d\x2f\xc4\x7e\xab\xcf\x83\x70\x72\x36\xa3\xcd\xe7\xce\x5f\x08\x22\x53\x9f\xc9\x75\xef\x99\x29\xc6\x42\xd5\x28\x2f\xeb\x3e\x65\x4b\x1d\xd4\x3b\xe6\xe7\x4c\x09\x20\x04\xa3\xd5\x99\xb1\x8c\xc6\xc0\xc2\xf0\x84\xfe\x68\x63\x32\x25\xf9\xfd\xfb\x77\x2f\x7e\xef\xc2\xa3\x65\x36\xdb\x02\xda\xe8\x5b\xac\x6a\x7f\x86\x5c\x5a\xcc\xbc\xb1\x67\xb2\x2b\xbc\x2d\xa4\x42\x07\x16\xb3\xc6\x3a\x79\x42\x75\x66\xdc\x4f\x0e\x6d\x07\x27\xab\x5a\x61\x45\x64\xbd\x00\x28\x42\xf2\xae\xcf\x29\x16\x1c\xce\xb4\xd5\xca\xa1\x2a\x18\xf7\x8e\x01\x48\x2b\x33\xbf\x07\x88\x61\x17\x73\xc8\xfe\x95\xb5\xec\xc2\xb7\x26\xc7\xd7\xfa\x24\x94\xcc\xf7\xbb\xd6\x3d\x97\x93\x4e\xee\xfc\x30\x31\xfc\xe8\xac\x33\x51\xf0\x9f\xcf\x3c\x89\xca\x24\xfb\xdc\xc2\x4b\x70\x4d\x46\x45\xa8\x68\x22\xf9\x4c\xcd\x65\x02\x5c\x69\x1a\x95\xc3\x81\x92\x0d\x1d\xa1\xc7\x1b\x78\x2a\x65\x56\x42\x85\x42\xbb\x11\xec\x0b\xd7\xe5\x24\x52\x5d\xa1\x17\xb9\xf0\x22\x41\x09\xac\x15\x15\x92\x8b\x9d\xcd\x3a\x22\x72\x0a\xa4\x93\x5c\x19\x6b\xf7\xed\xa1\xef\x3a\xc1\xa4\x8c\xe5\x72\x0a\x33\xad\x4f\xb9\xb4\xb3\x09\x62\xa1\xe4\x6d\x3e\x17\xe8\xb3\x72\xad\x85\x7f\xa3\xc5\xc1\xba\x28\x46\xf6\x85\x9f\xd3\xfa\x7a\x03\xdb\xc6\xaa\xe5\x8c\x10\xc4\xa0\xb0\xa6\x02\x01\x47\x79\x42\x0d\x8d\x55\x44\x28\x12\x9f\xc6\x7f\xd0\xfd\x9d\x65\x75\x4a\x05\xd6\xda\xf5\x0c\xab\xc8\xf0\x1c\x22\x58\xfc\xda\x48\x2b\xf5\x91\x77\x48\xaf\x1a\xab\x5a\x52\x94\xde\xd7\x8f\x4e\x1e\xf5\x5a\xc7\x7f\x0c\x6b\x77\x23\x59\xf2\xfe\xd7\x06\xed\x39\xfc\xfd\x48\x6f\xe6\x29\xd2\x66\x8f\xbf\xd0\x92\xdd\x07\xfc\xda\xa0\xf3\x7b\xee\x92\x03\x00\x38\x1f\x8c\x0d\x87\x88\x1e\x2d\x6f\x56\x48\x4d\x4f\x09\x5d\xf8\xc6\x92\x55\xb0\xff\xf4\xe1\xcd\x9e\x8e\xc9\x62\x6d\xd1\x85\x62\x5d\x22\x64\x4a\xa2\x26\x27\x59\x46\x1f\xd5\xa7\x9a\xf8\xd0\xf2\x02\xbf\xd5\xd2\x8e\x9b\x53\x8b\x5f\x03\x21\x2b\x8a\xfc\x75\x5e\x79\x6b\x4e\x18\x7c\x12\x64\xc8\x1b\xf4\xe3\xbb\x6b\x13\x09\xf5\x65\xfd\x6a\x21\x22\xad\x5c\x76\x2a\xfe\xf5\xec\x42\xc4\x8a\xe7\xea\xc6\xc5\x72\xb3\x2c\x36\xad\x2c\x6f\x79\xed\x9f\xa9\x2c\x01\xe2\xff\x95\x65\x36\x9d\x30\x03\xba\x6c\x12\xf1\xfe\x4b\xa5\x85\x3b\x28\x61\xfd\xea\x78\x69\x05\x96\x86\xa7\x04\x31\xa9\x3c\xdd\xd3\x1f\x35\x44\x75\x80\x4b\x83\x7e\x6f\xe8\x77\xe7\xfb\x89\x6b\xfa\xe1\x23\xd9\xc7\xca\x01\xa4\x37\xf4\xca\x10\x22\x75\x8e\xdf\x26\x63\x48\x48\x79\xd6\x4f\x5b\xf1\xf0\x74\xc6\xdf\x91\x34\xd7\x2c\x6d\xd7\xa5\x16\x42\x53\x2b\x23\xf2\xd8\x70\x6a\xe7\x6d\x93\xf9\xbe\xe3\x9e\xd9\x00\x49\xcd\x4c\x2b\x0b\xb6\x85\x81\xe5\x8a\x5d\x61\x68\x09\xb0\xe3\x99\x65\xd1\x91\x43\x97\xd5\x33\x63\x4b\x6b\x4f\x2d\x8e\x6b\x79\xfe\x9b\x38\xe2\x0c\xc5\x63\x28\xb6\xc9\xc0\x0a\x9d\x9b\x8a\x8f\x7d\xd7\x69\x48\x78\x4f\x7f\xff\x28\xca\x13\xd6\x95\xdb\xad\x60\xf5\x33\xf9\xde\x99\xce\x4c\x67\xcb\x57\x91\xdc\xd5\x98\xc9\x42\x66\x60\x8a\xc2\xe1\x55\xa2\xf3\xaa\xeb\x03\x37\x59\x40\x86\x59\x14\xeb\xdb\xcb\x0f\xb4\x78\x97\x88\xd1\x8e\xc2\xcf\xf9\xcd\xd4\xd6\x9c\x64\x4e\x2e\x7e\x12\xe7\x36\xd3\x66\x42\x43\x90\x49\xbc\x75\xb5\x17\xe6\x4e\x75\xf3\x39\x16\xfd\xa9\xbd\x84\x5a\x09\x19\x5a\xa2\x24\xe8\x9c\x37\x96\x8e\x2d\xca\x71\x16\x6d\x41\x7a\x2a\xad\x68\xdc\x23\x92\x05\xa9\x9d\x17\x3a\xc3\xa1\xcd\x5a\x54\xe3\x86\x89\x24\x70\x60\x35\x29\xe4\x0a\x36\xaf\x30\x56\x37\xb1\x52\xd9\x10\xf8\x88\x0b\x51\x7f\x44\x0f\x02\x42\xbf\x30\x05\x0e\xe7\xda\xb6\x52\xcf\xdb\x11\x65\x95\x0b\xf9\x46\x28\x35\x55\xeb\xa0\xd1\x39\x5a\x4e\x3e\xbd\xfa\xa1\x32\xc9\xaa\xa2\xec\x3a\x8a\x8e\x0e\x9c\xcf\x3b\x22\xa4\xee\x9f\xd2\xad\x16\xd2\xc6\xa8\xea\x43\x65\x39\x7b\xb4\x67\xd5\xb5\xa5\x61\x8e\x58\x6c\x4a\xef\x79\x79\x68\x42\xf3\xf6\xf7\xb3\x1b\x53\x8b\xdc\x63\x2a\x75\xb1\x11\xe5\x65\x8f\x74\x02\x83\xc6\xb3\x33\x47\x3a\x90\x39\x56\xb5\xa1\x6c\x13\x15\xf7\xcd\x53\xbb\x45\xf5\x24\xce\xae\x4d\x77\x5a\x2a\xce\x77\xbc\x3c\x02\xc5\xb4\xa8\xf1\x84\xb6\xeb\x58\xb9\xb2\xbd\x33\xfe\x15\xe5\xc2\x7d\xba\x7e\xb8\xad\xf9\x7b\xd1\xae\x85\xe4\x14\x9a\x9e\x62\xdb\x8a\x5d\x9c\xa6\xb2\xc6\x5a\xf2\x42\x47\xbe\x56\x6a\x44\x34\x7a\xbc\x7d\xd8\x28\x93\x09\x05\xbf\x80\xb7\x0d\x8e\xd4\x31\xc3\x2f\x51\x86\xab\x2f\x13\x66\x50\x7e\xe4\x32\x83\xa2\x99\x1c\x24\x7d\x9e\x9f\x9f\xae\x47\x5f\x34\x5a\x22\xe4\x58\x88\x46\x79\xd8\xbf\x91\x2e\x0c\x06\x61\x22\x18\x2d\xee\x09\xd1\x2d\xbb\x97\x96\xc7\x4b\xd3\xc4\xf1\x30\x1c\x41\xe8\xbf\xff\x21\xad\x6f\x84\xa2\x25\x29\xd8\xf0\xc8\xf6\x1f\xbd\xa0\x09\xb5\xa4\xc1\x85\xa6\x4e\x42\xde\xcf\x9d\x95\x45\xb1\xf0\x89\x82\xde\x04\xe5\x34\xfd\xbc\x70\x10\xcf\x66\xe6\xa2\xe2\x69\xe0\xec\x51\xad\xa3\xf6\xce\x3c\x66\x42\xa9\x83\xc8\xbe\xcc\x94\xbe\xa1\x3d\x6d\xc6\xbf\xde\x37\x2c\x65\x84\x01\x53\xd6\x34\x17\xc9\x47\x2f\xf2\xb7\xd0\x67\x10\xb5\x84\x2c\xc4\xef\x7c\xb3\x91\x36\x1a\x0e\x75\x1e\x84\x5e\xfe\xf6\x3a\x0a\x8d\x97\x89\x2c\xc3\xda\x43\x3f\x20\x02\x19\x4f\x2d\x49\xd4\x4d\xa6\xcf\x9d\x8e\xf3\xe2\x0a\xb5\x87\x7b\x5f\xd9\x5b\x11\x2c\x88\xc0\x65\x62\x0b\x95\x20\xa9\x0b\x03\xa6\x48\xee\xe7\xa7\x24\x27\xa9\xab\x3b\x2a\xa5\x1e\x0f\xb0\x77\x41\x24\x4c\x94\xb9\x2c\x0a\x0c\x71\xdf\xd1\x3e\x76\x97\x44\xee\xfe\xed\xc0\x2f\x8b\xdf\x0c\x65\x11\xc3\x54\xea\x63\x6a\x0b\xb5\xcc\xc2\x67\xe5\x8c\x47\x43\x07\x37\x7b\xdd\x96\x7e\xf6\xeb\xfd\x7b\x99\xbb\x0b\xfe\xe5\x36\x31\x4c\xa3\xfc\xd1\x23\xc4\xd0\xd4\xa3\x7f\x84\x75\xff\xe3\xdf\xba\x46\x77\x02\xec\xbb\xef\xbb\x14\x78\xd6\x85\x00\x67\x74\xcc\x29\x3f\xb2\xd2\xf6\xee\x2d\xd2\x46\x49\xbd\xfa\xa3\x2a\xad\xed\x65\x92\x29\x88\x1e\xcc\xd2\xcd\x0b\x7b\x9c\x8c\x02\xf3\x31\xfb\xc7\x20\x65\x11\x62\x12\xa3\x03\x42\xed\x09\x7d\x1f\xb6\xbf\x67\x05\xfb\x18\x7d\x87\x38\xd2\xd1\xb9\x11\xb1\x0e\xce\xa8\xc6\x63\xac\x67\xb7\xf0\xba\xe8\x25\xb4\x69\xf9\x70\x13\x13\xd9\x1b\xd2\x19\x53\xc7\x92\x31\xfd\xdd\x33\xa3\xb1\x29\x8c\xf3\xd7\x40\xa8\xfe\xa9\x74\x54\x53\xcf\x55\x22\x3e\x55\x15\xdb\xa8\x70\x68\x83\xa5\x3c\xa5\xa7\x29\x7c\xd6\x8c\x89\x4a\xda\xd7\x1a\xb5\x6d\x0c\xce\xdd\xe9\xc5\xc0\x7c\x2a\x71\x70\xcf\x19\xe2\x23\x28\x68\x83\xa2\x8b\x07\x66\x78\x6a\x61\x72\x22\xa4\x8a\x29\x18\x4b\x36\x85\x52\x2c\xd6\xb7\xa9\x69\x77\xa3\x5e\xe1\xc4\x6d\x40\xe0\x17\x14\xc8\xf7\xcb\xc1\xaa\xd6\xa2\xb6\x9e\x0d\x83\xb5\xef\x48\x5d\x1b\x5a\xa8\xc3\xff\xfd\x08\xcd\x7e\x8b\xd4\x37\xa4\x27\x8c\x63\xf2\xbf\x03\x00\x00\xff\xff\x6b\xbe\x46\x60\x0f\x23\x00\x00")

func definitionsOperationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsToml,
		"definitions/operations.toml",
	)
}

func definitionsOperationsToml() (*asset, error) {
	bytes, err := definitionsOperationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0xeb, 0x6c, 0x4c, 0x21, 0xb6, 0x30, 0x31, 0x27, 0xcf, 0xa4, 0x38, 0xd3, 0x10, 0x8e, 0x5, 0xc5, 0xa1, 0x65, 0x45, 0x39, 0x69, 0x3, 0x87, 0x30, 0xa3, 0x79, 0x6c, 0x29, 0x70, 0x80, 0xe9}}
	return a, nil
}

var _definitionsPairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x8e\xd3\x40\x0c\xbe\xe7\x29\xac\x9e\x40\x5a\x75\x2f\xc0\x8d\x1b\x42\x42\x62\xc5\x01\x38\xad\x56\xd1\x64\xc6\xb3\x31\x9d\x8c\x83\xc7\x69\x08\x4f\x8f\x66\xd2\x36\x51\xd9\x76\x17\x6e\xd5\xd8\xdf\x9f\xed\xf4\xde\x72\x54\x8c\x5a\x77\xee\xed\x43\xa5\x53\x8f\xf0\x1e\x36\x49\x85\xe2\xe3\xa6\xaa\x4e\xe5\x5c\xb9\x54\xa7\x38\x18\x25\x8e\xb5\xf2\x0e\xe3\xdf\x5d\x0e\x93\x15\xea\x73\x4b\x79\xee\xd1\x92\x9f\x40\x5b\x84\x35\x1c\x0a\x1c\x3c\x0b\x04\x4a\x5a\xd8\x05\x1d\x46\x25\x13\x5e\xcc\xda\xf2\x08\xca\xd0\x0b\xef\xc9\x21\x2c\x0c\x85\x38\xa1\xec\xc9\x22\xe4\x9f\xca\x62\x1e\x31\xcb\x60\x74\x3d\x53\xd4\xff\x15\x39\xe2\xaf\x49\xfc\xea\x49\x56\x13\x54\xea\x70\xfb\x61\x90\x92\xfc\xa2\xce\xd8\x62\x2c\x73\x1a\x24\x80\xa0\x0e\x12\xd1\x41\x33\x81\xa0\xb1\x2d\x8c\x14\x02\xcc\xcc\x59\x83\xa2\xa2\x58\xec\x95\x65\x11\xfa\xb4\x3c\xe6\x9e\x3c\xd9\xba\x63\xb7\xb2\xf2\x99\x92\xde\xb1\x2b\x14\x81\x6d\x71\xf4\x4f\x4b\x3c\x82\xae\xc4\x8f\xa6\x7b\xe2\x7c\xae\x70\x1e\xb0\x90\x81\x99\x80\x9b\x1f\x68\xcf\x9d\x7f\x29\x8f\xb3\xf7\x33\xae\xa5\x04\x2d\xc5\x72\x4c\xec\x7d\xc2\xd5\x8e\x29\xea\xbb\x37\x17\x4d\xcc\xdd\x25\x92\xb6\x94\x40\xf0\xe7\x80\x49\x6f\x4e\xce\xca\xf0\x13\xe2\x2e\x5f\x42\x69\x39\x40\x1a\xf4\x2c\x98\x57\xe4\xb2\x6c\x37\x04\xa5\xde\x88\xd6\xe4\x9e\xfa\x82\x88\x6b\x6b\x42\x68\x8c\xdd\x2d\x65\x3f\x44\xfb\xea\xfe\xa1\x99\x14\x5f\x5f\xb9\x0e\xa3\xa0\xec\x18\x70\x8f\x32\x41\xbe\x29\x18\x67\x65\x70\x46\x0d\x78\xe1\x0e\x12\x0f\x62\xcb\x10\x13\xfd\xc6\x97\xe6\xcf\xbd\xcf\xa5\xe7\x18\xa6\x59\x2d\x50\x47\x8a\x0e\x0e\x7f\x17\x45\x3d\x2b\x8e\x2c\xbb\xda\x91\x3c\xbb\xfb\xcd\xa6\x5a\xaf\x3f\xe3\xc0\x91\x5c\x38\xa9\x9b\x43\x62\xee\x71\xfe\x82\x66\x3f\x4d\xce\x1e\x8c\xd2\x1e\x4f\x4b\x71\x24\xdb\xea\x68\x03\xee\xbe\x7f\xfd\x06\x49\x8d\x28\x8c\xa4\x2d\xdc\x16\x81\x99\xec\x18\xed\x20\x97\x56\xb0\x23\xbb\x43\x6f\x86\x90\x87\x0e\xb7\x40\x1e\x22\x2b\x24\xd4\x6d\xf5\x91\x05\x7c\x3a\xa7\x80\x62\x2c\x3a\x1e\x13\xf4\xc1\xa8\x67\xe9\x6e\x4a\xbe\x06\x5b\xb3\x27\x16\xa0\x04\x43\x74\xe8\x29\xa2\xdb\x56\x79\x0c\x7f\x02\x00\x00\xff\xff\x18\xb1\x37\x3d\x92\x05\x00\x00")

func definitionsPairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsToml,
		"definitions/pairs.toml",
	)
}

func definitionsPairsToml() (*asset, error) {
	bytes, err := definitionsPairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x0, 0x28, 0x68, 0x7d, 0x4b, 0x29, 0xb9, 0x56, 0x9b, 0x8c, 0x71, 0x7a, 0xb4, 0x5c, 0x96, 0x6f, 0x82, 0x16, 0x0, 0xaf, 0x8e, 0xa7, 0x2f, 0x32, 0x36, 0x13, 0x78, 0xa, 0x6e, 0x2f, 0x90}}
	return a, nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4f\x6f\xe3\xb6\x13\x3d\x87\x9f\xe2\xfd\x82\xe0\x57\xbb\xb0\xa5\xdd\xb6\xe8\x21\x5d\x1f\x8a\x75\xda\x06\x68\xe2\x05\x9c\xf6\x1c\x9a\x1a\xd9\x6c\x28\x52\x25\x47\x5e\x7b\x1d\x7d\xf7\x82\x92\x9c\xd8\x89\xbd\xf5\xa2\x68\x4f\xe6\x9f\x99\xc7\x99\x37\x6f\xc6\x4a\x53\xbc\x77\x19\x61\x4e\x96\xbc\x64\xca\x30\x5b\x63\xee\x9e\xf6\x50\x45\x96\x66\x94\x6b\xab\x59\x3b\x1b\x7e\xc0\x78\x82\xdb\xc9\x1d\xae\xc6\xd7\x77\x89\x28\xa5\x7a\x90\x73\x02\xaf\x4b\x0a\x42\xe8\xa2\x74\x9e\xd1\x13\x00\x70\x9e\x17\x7c\xde\xae\x58\x17\xd4\x2d\xc3\xda\xaa\x73\xd1\x17\x22\x4d\xf1\x93\x26\x93\x41\xdb\x8c\x56\xd0\x16\x6e\xf6\x07\x29\xc6\x4c\xb3\x50\xce\x86\x88\xb3\xd9\x0c\xe1\xa5\x9d\x13\x2e\x1e\x06\xb8\x58\xe2\x72\x84\x64\xd2\xd8\xdd\x10\x4b\xd4\x75\x83\xda\x7a\x5e\x47\xa0\xcd\x06\x17\xcb\xe4\x56\x16\x84\x47\xb0\xfb\x20\x83\x92\x06\x75\x8d\x4a\x5b\xfe\xfe\x3b\x8c\xf0\xf6\xdd\xbb\x68\xf4\x10\x9d\x23\x3e\xd9\x2c\x2e\xdb\x90\x5a\x6c\xe8\x00\x5e\x10\x42\x21\x8d\xa1\xc0\xa8\xac\xe6\x18\xe2\xdc\x0d\x03\x3b\x2f\xe7\x94\x88\x34\x8d\x0e\xb7\x93\xbb\xab\xe9\x65\x5c\x01\xc3\xce\xfd\xab\x80\x3c\xa6\x16\x30\xfd\x65\xf2\xdb\xaf\x63\x58\xc7\x98\x11\xd4\x22\xa6\x92\xc1\x55\x1c\x74\x46\x08\xe4\x97\x5a\x51\x48\xf6\xdd\xf1\xfe\xc7\xdb\x48\x71\xf4\x70\xa5\xa6\xec\xc5\xb5\x0e\x50\xce\xaa\xca\x7b\xb2\x8c\x20\x73\x7a\x06\xb0\x66\x8d\xfb\xeb\xf1\xfd\x00\xf7\x1f\x24\x2f\xe2\xef\x8d\xcb\xe8\x1e\xd2\x13\x3c\xfd\x59\x69\x4f\x19\xb2\xca\x6b\x3b\x87\xd1\x81\xe1\xca\x58\xe8\x58\xdb\x01\x1c\x2f\xc8\x77\xb1\xb7\x90\x80\x72\x95\xc9\x62\x2c\x39\xb1\x5a\x50\x86\xa5\x96\x30\xf2\xd3\x1a\x81\x25\xc3\xb8\xb9\x56\x97\x58\x30\x97\xe1\x32\x4d\x67\xb4\x76\x36\xdb\x72\xa4\x5d\x9a\x39\x15\xd2\x67\xda\x52\x6d\x99\xbc\x95\x26\x6d\x6b\x36\x8c\x48\xc3\x88\x24\xa2\x86\xb6\x29\x06\xf6\x95\x62\x6c\x4e\x15\x40\x34\xd3\x79\xac\xfc\x98\x82\xf2\xba\x8c\x09\x3d\x5f\x1e\xbd\x78\xaa\xfe\xb3\xdd\xdd\xba\xa4\x46\x3e\x75\xbd\x73\xf2\x42\x2c\xe2\x2c\x4d\xa1\x8c\x8e\x05\xe8\xb4\xb2\xdd\x59\x7c\x5c\x68\xb5\xd8\x29\x96\x34\x7a\x49\x89\x38\xeb\x2c\xa6\x2d\x13\x5e\x34\x8f\xa6\x69\x14\x3c\xaa\x40\x19\x64\x80\x8c\xbb\x42\x96\xc8\x9d\xdf\x36\xc4\x52\x9a\x8a\x06\x78\x83\x82\xa4\x0d\x8d\x98\x02\xf1\x00\x6f\xbb\x83\x40\xdc\x40\x35\x38\x8d\xca\xc5\x59\xe6\x2c\x35\x9b\x6f\xbf\x11\x67\x45\xbc\x8d\x8d\x97\xdc\x54\x4c\x2b\x51\x0b\x71\x0a\xb1\x9b\x4d\xc7\xe9\xd5\xaa\x69\xeb\xba\x16\x79\x65\x15\x7a\x0e\x5f\xb7\x96\x7d\xfc\x4c\xdc\xd1\xab\x43\x69\xe4\xba\x63\xae\xd7\xdf\xe7\x0e\x9b\x26\x42\x4f\x5c\x79\x0b\x97\xbc\xa2\x3a\xc6\xf4\x0a\x7c\x7a\x04\x7c\xb9\x0f\xde\xdf\x7a\x74\xaf\x1c\x80\xc7\x08\xcb\xbd\x08\x44\x57\x4e\x13\x9a\xd7\xa3\xd8\x8f\xa4\x82\x8f\xda\x18\xcc\x89\x71\xf0\x36\xf7\xae\xe8\x6a\xdd\x8c\x84\x83\x62\xfb\x02\xda\x7a\x7b\xa9\x0d\x30\x73\xce\xf4\x9f\x12\x8b\x8d\xd2\xeb\xb7\xca\xd1\x39\x5c\x12\x6b\xfe\xff\x93\xe6\xdf\xff\x46\x78\xd3\xe1\x7c\xbe\x14\x03\xb0\xaf\xa8\x31\xac\xc5\x2e\x69\x3b\x91\x3d\xe2\x13\x79\xf7\x7b\x14\x66\xe3\x91\x4b\x13\x48\xb4\x3c\xde\x54\x81\xff\x4b\x2e\x3f\xf3\xde\x11\x19\xfe\x23\x1e\x47\xfb\x3c\x96\xd2\x6a\xd5\xcb\x0b\x4e\xa6\xa5\xd7\x96\xf3\xde\x79\xd7\xb6\x3b\x08\x75\x1d\xe7\x40\xd7\xb8\xe7\xfd\x7e\x47\xee\xdf\xb7\x44\x9a\x1e\x6b\x82\x96\xca\x70\x8c\x4a\x6d\xd9\x7d\x39\x95\xff\x42\xc3\xb5\xd4\x3e\x8e\x4e\xe1\xf6\x60\x87\xb6\x03\x77\x77\xf6\xbe\x0a\x5b\x19\x67\xa9\xb7\xda\x39\xd9\x3c\xcd\xf7\x53\xbe\x1e\x0e\x86\xbf\x3a\x54\x92\x17\xff\x1a\x3b\x19\x36\x0e\xf1\xd3\xa5\x16\x7f\x05\x00\x00\xff\xff\xa7\xaa\x95\x75\x54\x09\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x61, 0x7d, 0x5b, 0xc0, 0xc8, 0xe7, 0x81, 0xf1, 0x98, 0xf, 0xb1, 0xee, 0x37, 0x9f, 0xa2, 0xc0, 0x15, 0x45, 0xcd, 0xb, 0x28, 0xe8, 0x1b, 0xcb, 0xb2, 0x9f, 0x24, 0x62, 0x3b, 0xf4, 0x3a}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4f\x8b\xdb\x3e\x10\xbd\xeb\x53\x0c\x26\x07\x1b\xf6\xe7\xdc\x7f\x90\x53\xbb\x85\x85\x92\x0d\x2d\xa5\xc7\x45\xb1\x27\x89\x68\xf4\xa7\xa3\x49\x76\x17\xd7\xdf\xbd\x48\x51\xbc\xb1\x71\x9b\x75\x5b\x4a\x6f\x1a\xc9\xf3\x66\xde\x93\xde\xd8\xc9\xea\x8b\xdc\x22\xf0\xb3\x43\x2f\x84\xd2\xce\x12\x43\x2e\x00\x00\xb2\xca\x1a\xc6\x27\xce\x4e\x91\xb2\x69\x61\x90\xe7\x3b\x66\x97\x42\x56\x1a\x33\x51\x08\xd1\x34\xff\x01\x49\xb3\x45\x98\x3d\xdc\xc0\x4c\xc1\xff\x0b\x28\xef\x0c\x23\x6d\x64\x85\x1e\xda\x56\xcc\xe7\x70\xef\x90\x24\x2b\x6b\xc0\x48\x8d\x1e\x94\x81\xa6\x81\x99\x2a\xdf\x2a\xef\xf6\xf2\x79\x29\x35\x42\xdb\x96\xa2\xb2\xc6\x87\x56\x06\xb0\xd6\x05\xdc\x99\x2a\xef\x5d\x84\x0c\x3d\x44\xd8\x31\x94\xb0\x67\x5d\x19\xa3\x6f\xc0\x76\x25\x7d\x25\xf7\xd0\xb6\xa0\x3c\xf0\x0e\xc1\xf6\xba\x81\x8d\x25\xb8\xcc\x09\x1f\x9e\xfb\xeb\x1a\x0b\x15\xa7\x96\x5b\x40\xd6\xc7\xcd\x22\x2f\x34\x75\xe0\x50\x08\x71\x94\xf4\x3a\xae\x0f\xb0\x98\x5a\x7d\x50\x2a\xe5\xa2\xaf\x48\xb9\xc8\xbd\x6d\x45\x78\x00\xa3\x17\x01\xea\x7c\x83\xd0\xc4\x06\x02\x98\xda\x80\x25\xc8\xf1\x6b\x27\x4c\xe6\x91\x8e\xaa\x42\xca\x8a\xc1\x3e\x5b\x92\xdb\xb0\x9f\x08\x7c\x64\x52\x66\x9b\x17\xe0\xe3\xa2\xc3\x4c\x0d\xa6\xf8\x15\x57\xfe\x63\xb5\xd3\xc9\x80\x62\x02\x1e\xcf\xc9\xd3\xc9\x3b\x4b\x5a\xf2\x4a\x92\xd4\xa1\x56\x01\xfd\x83\x0f\xe8\x0f\x7b\xf6\x9f\x15\xef\x56\x27\xeb\xf4\x58\x66\x21\xe5\x52\x25\x63\x39\x66\xbf\xb7\xe9\x2a\xae\xf5\x1e\x90\xdf\x9c\x7c\xf7\x2b\x34\x2e\xd2\xf3\x8a\x9f\x20\x59\xb8\x4c\x7b\x37\x7f\x9c\xe5\xf9\xda\xfa\x51\x0c\xf5\xc1\xf3\xad\x5e\x63\xfd\xc9\x28\xed\xf6\xa8\xd1\x30\xd6\x63\x6f\x2c\x2f\x44\x2b\xc2\x70\xb8\xfa\x65\x04\x85\x35\x02\x06\xe0\x1a\x6b\x60\x0b\x3b\x79\x8c\xd6\x7d\x94\x54\x43\x65\xb5\x93\xac\xd6\x7b\x84\x0e\x2b\x3a\xdc\x97\xa7\x47\x7e\xbd\x86\x67\x3a\x54\x0c\x4d\x2b\xc4\xe6\x60\x2a\xc8\xfd\xf5\xa4\x62\x12\xdd\xa9\xd8\x03\xcf\x24\x27\x12\xf2\x81\x0c\x64\x57\x01\xb2\x20\xef\xcf\x3d\x35\xa1\x99\xbf\x62\xa2\xfe\xb0\x19\xb5\x11\x12\xc1\x02\x96\xf8\xd8\xfd\x52\x96\x96\xef\x5e\xba\xbf\x25\xb2\x94\x0f\xe7\x6e\x31\x1c\x38\x2f\x4a\x8a\xd3\xa4\x1c\xab\x37\x41\x9e\x7f\xc0\x9b\x49\xbc\xdf\x11\xe8\x42\x91\xb3\x50\x97\xab\x4e\xbd\xef\x01\x00\x00\xff\xff\x90\x85\xb0\xf4\x41\x08\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0x96, 0x53, 0xae, 0xa1, 0x71, 0xc3, 0x6a, 0xbb, 0x44, 0x86, 0x22, 0x32, 0x2f, 0x89, 0x1c, 0x7e, 0x7c, 0xce, 0xaa, 0x5d, 0x4f, 0x5a, 0x85, 0x74, 0xb5, 0xa6, 0x3a, 0xa1, 0xda, 0xaf, 0x3a}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\xf3\xe6\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xe6\x8e\x6d\x4d\x99\x98\x6b\x63\xf9\xd2\x9e\x0a\xed\x6b\x79\xa2\xde\xbb\xb2\x61\x1f\x95\x21\x69\xfc\xfa\x5e\x76\xbf\x64\xb8\x1a\x79\x61\x0e\xba\xb2\xe4\x6e\x3e\xc5\x8f\xb7\xb9\x0f\xd4\x64\x42\x2c\x85\x18\x86\x35\xa2\x72\x86\x90\xbf\xae\x90\x77\xd8\xfc\x41\x71\x48\x99\x31\x8e\xd3\x34\x0f\x4e\xd5\x94\x78\xde\x15\xbb\x54\x7e\x80\xfd\x41\x35\x5a\x55\x49\x23\x25\x5e\x2c\x5f\x86\xe1\xae\x1c\x47\xbc\xd9\xaa\x82\x0a\xa1\xea\x91\xf8\x6d\x6f\x1c\xd1\xa9\xaa\x25\xb0\xc7\x3e\x4c\x9f\x56\x08\x29\xc5\x2c\xd9\x52\xa3\xa3\x9d\x70\xb2\x3d\xb7\x4e\x7f\x33\x5e\x74\x37\xbf\x63\x1f\x52\xbf\x44\x8a\x8a\x61\xba\x3f\x12\xb7\xd1\x4d\x64\x06\xe9\x3d\x51\xbf\x41\xf6\x25\x44\xb6\x7a\x4c\x9f\x53\x9c\x0d\xba\x99\x8c\x62\xbe\x98\x5c\x99\x12\x7c\x06\x00\x00\xff\xff\x4a\xa4\x90\x14\x01\x02\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x39, 0x9e, 0xc1, 0x58, 0xb2, 0xe1, 0x28, 0x83, 0x3f, 0x14, 0x45, 0x7, 0x96, 0x7c, 0xf8, 0xb7, 0x32, 0x8d, 0xde, 0xd, 0x5e, 0xeb, 0x65, 0x68, 0x64, 0x58, 0xd9, 0xad, 0x94, 0xe5, 0x38}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x93\xdb\xb8\x11\xbe\xeb\x57\xf4\xb2\xa6\x52\x92\x4b\xa6\x76\x93\x5c\x32\x29\x1d\x92\xb1\xe3\x4c\xed\xda\x9e\xf2\x78\xb3\x07\xef\xd6\x14\x44\x36\x25\x44\x24\x40\x03\x90\xc6\x2a\x45\xff\x3d\x85\x07\xdf\x20\x45\x8d\xbd\x8f\x83\xe7\x32\x14\xd0\xe8\x6e\xf4\xe3\x43\x37\x89\xc5\x02\x6e\x78\x8c\xb0\x46\x86\x82\x28\x8c\x61\x75\x80\x35\x2f\x7f\xc3\x9e\x12\x88\xb2\x78\x11\x63\x42\x19\x55\x94\x33\xf9\x77\x78\xf1\x16\xde\xbc\x7d\x0f\x2f\x5f\xdc\xbe\x0f\x27\x39\x89\xb6\x64\x8d\x70\x3c\x42\xf8\x86\x64\x08\xa7\xd3\x64\x42\xb3\x9c\x0b\x05\xd3\x09\x00\x40\x10\x71\xa6\xf0\x93\x0a\xec\x2f\xca\xdd\x03\x43\xb5\xd8\x28\x95\xbb\x9f\x8a\x66\x18\x4c\xec\xf3\x9a\xaa\xcd\x6e\x15\x46\x3c\x5b\xac\xf0\xc0\x59\x2c\x15\x17\x64\x8d\x8b\x35\x7f\x5e\x3c\xee\xff\xba\xc8\xb7\x6b\xc3\x21\x4a\x29\xb2\x82\xff\xc8\xb5\x12\xc5\x9e\x46\x28\xed\xaa\x70\xf4\x3a\x75\xc8\xf5\xa2\xd9\x64\xb2\x27\x02\x1e\xe0\xde\x4e\x09\xf7\xb3\x60\x1b\xde\xdb\x87\x97\x42\xf0\x62\xae\x52\x35\x7c\x9b\x1b\x5b\xba\x09\xbd\xf5\xf0\xc5\x4e\x10\x3d\x58\x23\x0e\xdf\xe1\xc7\x1d\x4a\x35\x99\x2c\x16\xf0\xfe\x90\x23\x50\x09\x6a\x83\xa0\x95\x80\x84\x8b\x86\xd5\x23\xce\xa4\xb2\x64\x4b\x08\x6a\x33\x81\x59\xff\x76\xf5\x5f\x8c\xd4\xfd\x41\x2a\xcc\x5e\xa3\x22\x31\x51\x04\xf4\xc6\x50\x82\x34\xa3\x90\x15\xc3\x9a\x35\x37\xf4\xe1\xc4\xc8\xea\x59\x2c\x76\x91\x82\xe3\xe4\x78\x7c\x0e\x82\xb0\x35\xc2\xd5\xc3\x1c\xae\xf6\x70\xbd\x84\xf0\x96\x25\x5c\x6a\xbd\xb4\x7d\x35\x05\x4d\x00\x3f\xc2\xd5\x3e\xbc\x8f\x78\x8e\x10\x58\x01\x41\x8b\x84\x71\xa5\x69\x5e\xa5\x7c\x45\xd2\xfa\xdc\x55\xce\xf4\x76\xae\x97\x7a\xda\xec\xec\x7f\xa0\xf8\x1d\x91\x51\x93\x8e\x26\x9a\xe0\x05\x95\x79\x4a\x0e\x85\x6d\xc0\xfd\xd5\x18\x2d\x7b\xc8\x34\x09\xb2\xb8\xfa\x69\xe8\x50\x46\x82\x1a\xa7\xd5\x27\x2c\xa7\xd3\xc9\x51\x19\xdb\xf7\xb1\x29\x7f\xd6\x1e\x4f\xc6\x33\xaf\x50\x79\xed\xfb\x48\xd3\x14\xd6\xa8\xfc\xd6\x4f\x04\xcf\xdc\x4c\x38\x59\x2c\x34\xa3\xe7\xf0\x7e\x43\x25\x24\x3b\x16\x19\x4d\xe5\x86\xef\xd2\xd8\x98\x74\x85\x10\x91\x34\xb5\x19\xee\x82\x14\x68\x96\xa7\x98\x21\x53\x28\xc2\x62\x3d\x82\x40\xb5\x13\x8c\xb2\x75\x21\xd7\x52\x97\x82\xa9\x04\x81\x24\x06\xce\xd2\x03\x10\x16\xb7\xc4\x64\x3c\xa6\x09\xc5\x38\x9c\x68\x3d\xfa\x36\x37\xe5\xf0\xcc\x8e\xcf\xfc\xdb\x3b\x1a\xb3\xc9\x6c\x0e\x7c\xab\x9d\xce\xc3\x57\xd8\xe6\x31\x33\x34\x34\xd1\x24\xc7\xd2\xc7\x56\x7f\x90\x59\x38\xf5\x71\xb6\x8b\xac\x57\x1c\xa9\x8f\xec\x58\x78\x47\x0e\x79\x47\xf6\x79\x87\x32\xc5\xc7\x79\xc7\x98\xb1\x72\x0f\x67\x11\xce\x21\x4f\x91\x48\x84\x8c\x6c\x11\xe4\x4e\x20\x90\x34\x05\xc3\x78\x43\x24\xac\x10\x19\x3c\x0a\xaa\x14\x32\x58\x61\xc2\x05\x6a\x4d\x9c\xc5\x7b\x14\xae\x2c\x3e\x07\x99\x79\xb5\x9e\x39\x2b\xf2\xf0\xbe\x63\x6b\x99\xcd\x9c\x41\x1c\xe2\x8d\x47\x12\x87\x9e\x66\xd0\xe1\x49\x1f\x8f\xcf\x02\x14\x27\x27\x68\x27\x7c\x1f\xaa\x78\x40\x61\x10\x5d\x5a\x3c\xfb\x51\xe6\x02\xb4\xa9\x93\xd6\xe0\xa2\x1a\xee\x41\x9f\x3a\xc1\x00\x0a\x5d\x8e\x44\x7e\xcf\x94\x50\xe4\x03\x21\xb7\xe4\xb5\x71\x6f\x15\xeb\x75\x24\xf1\x73\xbd\x18\x49\xbc\x6c\xa6\x12\x9e\xd5\x54\x98\xf5\x08\x6b\x03\x8a\x7c\x0a\xa0\x78\x59\x7b\x10\xc5\x4b\x57\x87\x94\x01\x33\xcb\xae\x99\x0d\x9a\xf4\x98\xf9\x37\x82\x94\x31\xa6\x37\xc0\xe2\x37\x51\x61\xfe\x7e\x64\xf1\xe6\xfc\x1d\xa1\x42\x16\xa1\xea\xcb\xe3\x31\xb9\x5b\xe5\xeb\x0d\x67\x49\x4a\x23\xa5\x47\x17\x0b\x78\x81\xb9\xc0\x48\xd7\xbd\xd7\xf0\xa3\x44\xc8\xb5\xb4\xf0\x27\xaa\x36\x8d\xb4\xa2\x4c\x2a\x24\xb1\x31\x7a\x2d\x65\x16\x0b\xe8\x90\x1a\x07\x92\x3c\x4f\x0f\x2e\x19\x5d\xae\xc3\x9e\xa4\x3b\x04\x7d\x26\xd8\xca\xcf\x31\xf3\x64\x77\x03\xd9\x4c\x2e\x07\x2b\xce\x53\x83\x6a\xc6\x19\x6d\xa1\xd3\x19\x68\x33\x75\x03\x56\x8f\x56\x83\xdf\xe3\xe1\xda\x94\x85\x95\x56\xc1\xbc\x9c\xfd\x8f\xd6\xef\x1a\x94\xd8\xe1\xdc\x85\xb3\xc3\x87\x54\x62\xbf\xe8\x7d\x13\x73\xbe\xa0\x26\xfb\x96\x1a\x1d\xc4\xaa\x3d\x9a\x92\x59\x3b\xef\x35\xc9\x61\x09\x19\xc9\x3f\x48\x25\x28\x5b\xff\x62\xff\x39\x85\x86\x23\xec\x92\x93\xa0\xa5\x7c\xb9\x1b\x67\x06\xb7\x9b\x26\xbc\x7a\xa5\x6b\x0e\x32\x27\x11\x36\x54\x50\x98\xe5\xa9\x6e\xbf\x02\xaa\x6b\xb3\x44\xcf\x07\x26\x73\xef\x53\x5d\xb7\x15\xa2\xaf\xf6\xe1\x6d\x49\xe0\x67\x90\x20\x51\x3b\xd1\xbb\xfc\x5f\x3b\x16\x49\xf3\xe0\xe8\xfc\x5c\xb4\x6d\x1f\x18\x3e\xd6\xb9\x4c\x7d\xf6\x99\x99\x41\x7c\x6c\xb0\x34\x31\x9e\x90\x5d\xaa\xc8\x2a\xc5\x7e\x09\x2d\x25\x2b\xfd\xfc\x3b\x73\xa0\x37\xbc\xb5\x56\xa0\xe8\x67\xd3\xcb\xb6\x6c\x5b\x21\x89\x76\x0b\x65\x31\x7e\x82\x10\xbe\x2d\xc7\x0d\xad\xac\xcf\x7d\xa7\xe7\x74\xdc\x4d\x7b\x63\xab\x58\xe5\xd4\x7f\xa8\x43\x42\x23\xa6\x60\x09\x7f\xb2\x69\xd5\x1c\x3f\x76\x4e\xec\x59\xef\x6e\x2a\x47\xf7\xed\xa5\x0b\x8a\x57\x09\xeb\xee\xc9\x4e\x34\xc6\xff\x6c\xa4\x99\xc2\xcd\xa9\x79\x3a\x95\xde\x2d\x8b\xb6\x5e\x33\x24\x72\x54\x33\xe5\xb5\x8c\x86\xbe\x6e\x32\xf5\x19\xa1\x8a\xd3\x73\x0e\x4d\x58\xcf\xc6\x93\xce\xc6\xcd\x78\x9c\xd7\xc7\xff\x52\x4a\xbe\x4a\xd8\xd6\x6e\x92\xf9\xc0\x42\x1f\x12\x5a\xa9\xd2\x6c\xfa\x41\x2f\xd1\xc7\x8a\xed\xe5\x73\x22\x24\xc6\xce\x8c\xd6\xc8\xad\x15\x7a\xc1\xe9\xd4\x34\xb4\xc9\x17\xf8\xf0\x8b\x86\x2f\xfb\xd2\x64\xb1\x80\x77\xf8\x71\x47\x05\xc6\x76\xd6\xe7\x10\x3d\x51\xa8\x5b\x52\x3b\x1f\xfc\x9b\x48\x23\x94\x50\xe1\xf3\x04\xd4\x7d\x31\x44\x56\x4d\x0f\xf4\xc3\x8b\x85\x3b\x09\x49\x3a\x4e\xdb\x92\xfa\x4b\x6b\x3b\x5a\xdf\x97\xcc\xc0\x57\x91\x68\xc3\x0a\x27\xc5\xc2\x0d\x91\x76\xe1\x90\x1a\xa5\xae\xe7\x49\x9b\x3b\x6b\xeb\xe8\x70\x76\x84\x49\xe3\xbc\xa6\xe1\x28\xdd\x3e\xd3\xeb\x45\x32\x08\x89\x77\x3d\x19\x61\xaa\x27\x43\x61\xeb\x08\x69\x30\xdd\x14\xbf\xcf\x7a\xb2\xc8\xd6\x25\x43\x5c\xa7\x3c\x57\x45\xa6\xcc\x60\xda\xc3\x67\x0e\x28\x04\x17\x45\x9d\x2a\x50\x6a\x33\x5e\x2f\xfb\xb2\xb7\xaa\x66\x8c\xa9\xaf\x41\x4b\x29\x4a\x16\xf3\x4f\x77\xbe\x0f\x73\x30\x10\x68\x1d\x60\x14\xa9\x16\xca\x47\xaa\xa2\x0d\xec\xc3\xef\xf1\x50\x1b\xf6\xe7\xf1\x85\xb9\xac\xff\x22\x5d\xee\x07\x4d\xaf\xe9\x62\xa5\xd1\x3f\xd2\xc4\xed\x35\x3c\x93\x50\xc7\x4e\x77\x1b\x71\xa6\x28\xdb\x61\x63\xa2\xd9\x9d\x8e\x63\xbd\x34\x65\xa7\x6f\xe1\xf0\xaa\x7d\x68\x6a\xc5\x70\xda\x0e\xbd\x59\x5f\xef\xdb\x8f\x3c\x17\xa2\xcf\x57\xfb\x0e\xd9\xd7\x87\x94\x83\x06\x4e\xba\x76\x45\xc3\xe3\x61\xb4\x79\x47\xe1\xec\xe7\x18\x79\x94\x80\x7e\x53\x5f\xbc\xd6\x6f\xda\x2e\xc0\x0f\x19\xb6\x02\x79\xb8\x3c\x60\xcf\x9c\x0b\x9f\x69\xcb\x3f\x4e\xc0\x9e\xea\xa8\xfd\xe4\x73\xfe\xc9\x91\xd8\xca\xe1\x46\x6d\xdd\x32\x44\xdd\x08\x75\xba\x33\x66\x29\x79\x74\xce\xe4\xe2\x5c\x1f\x79\xaa\xd0\x04\xbe\xb9\x14\xcd\xdc\x1b\x80\xbe\x63\xf4\x34\xaf\x3e\x99\xe9\x13\xba\x10\x69\xbe\x9b\x1d\xe1\x7b\x3c\xc8\xeb\x0f\xae\x8d\x3f\x7a\x82\x17\x4e\xa5\xff\x7c\x7b\x73\xd2\xad\xd2\x73\x60\x34\x3d\xd3\x3d\x8c\xe8\x05\xcd\x3b\xb3\x76\xf3\x50\x2c\xb1\xcd\x40\xde\xdb\x0c\xb8\xfc\xb5\xa6\xd0\x16\xb0\xef\x1f\xa8\xd4\x5a\x54\x99\x6d\xdf\x9b\xe7\x18\xd1\x84\x46\x40\x4c\xa3\x6b\x7b\x83\x1e\x06\x83\xaf\xce\xad\xca\xe7\x5a\x2d\xd7\x4c\x34\x4b\x36\x4f\xf0\x77\x59\x82\xb7\x9d\x6f\xf4\xe5\x39\x83\xab\xfd\xe0\x1b\xe8\x8e\x2b\x9e\xd4\xc4\x8d\xf1\xc3\xc5\x7d\xdb\xf6\xf2\xc6\xad\xb5\xe4\x4c\xef\xf6\x7b\x74\x69\xe3\xfa\x9e\x3f\x66\x47\xe6\xed\x25\xb6\x4f\x69\x26\xb6\x9e\x6e\x62\x2a\xe1\x59\x35\x3b\x1b\x14\xd3\xdb\x5d\x6c\x2f\x6d\x2f\xb6\xbf\x51\x7f\xf1\xb5\x8b\xb8\xb8\x68\xf0\xea\xe9\xa9\x24\xbe\x36\x10\xbf\x9a\x69\xdd\xe9\xd8\xb4\x4d\xf1\x61\x27\x67\x7a\x07\xae\x1a\xfa\x81\x73\x9b\xae\xed\x4f\xa5\x8b\x05\xa4\x7a\xee\xc1\xf8\xc5\x95\x77\x1a\x10\x04\x8f\x77\x11\xc6\x40\x19\xbc\xba\xbf\x7b\xfe\xdd\xb7\x7f\x0b\xdb\x0b\x6f\x13\xd8\x49\x14\x60\xbb\x12\x50\xe6\xab\x9b\xe5\x50\x16\x30\xc5\xd7\x37\xba\x66\x5c\xa0\xf9\x54\x25\x77\xb9\xb9\x08\x65\x24\x1a\x04\x08\xdb\xce\x95\x61\x51\x68\x86\x95\xe6\x4f\xf2\x65\xcf\x27\xe4\x4e\x01\xb6\x1d\xae\xc0\x7e\x64\x4e\xeb\xa2\x08\xd3\x83\xd7\xfb\xfe\x7a\xf9\x66\x83\xd1\x16\x44\xe3\x9d\x45\x78\xe9\xb1\xf6\x45\x4a\xcb\x33\x3b\xfb\x3d\x6b\xcb\xda\xd7\x8a\xe6\xb7\xa6\xa1\x77\xf4\x25\x99\xbf\xe4\xf4\x98\xb8\xbf\x36\xb3\x1f\x40\x7f\xe0\xad\xfb\x0c\xcd\xb2\x2d\xd5\xd3\x0f\x85\xae\xbd\x05\x5c\x69\x0d\xf7\x6d\xd0\xcf\x6c\x3c\x9b\x73\x97\x13\xbc\x96\x7c\x6a\x79\x38\xa6\xf4\xab\x95\x11\xf6\xb1\xfd\xcd\xc2\x7e\x7e\x6f\x7e\x7c\x37\x05\x47\x24\x50\x6f\x9e\x80\xbb\xf4\x08\xab\x43\x81\x5d\x61\xbd\xba\xb8\xca\xd9\xe9\x34\xab\x09\x9a\x9a\xf7\xfc\xe1\x1d\x11\x24\x93\xe1\xbd\x09\x4a\x4d\xe1\xc6\xdf\x99\x28\xab\x4f\xd8\x3c\x88\xd4\x27\xbd\x17\x27\x2d\xfc\x27\x89\xb6\x6b\xc1\x77\x2c\x76\x77\x19\x8a\xbb\x0b\x61\x25\xe9\x27\xaa\x36\x37\x96\x7e\x1a\xa9\x4f\x73\x68\x48\xbe\x21\x69\x8a\x42\x43\x74\xdb\x14\xb5\x75\x3d\x56\x19\xda\x5f\x4b\x6a\xa9\xb1\x1b\x6b\x69\x31\x7a\xff\x31\x26\x28\x8c\x0f\xa6\xb3\x66\x8d\x73\x95\x13\xb5\x29\xfc\xec\xd8\xde\x11\xb5\xb1\x1b\xf4\xa4\x07\x61\x31\x4c\xf1\xa3\x5b\x18\x04\x33\xf7\x8b\x41\xe0\xae\xc0\x05\x33\xef\xf5\x1b\x4d\xbe\x84\x60\xfe\x73\xf0\x73\xd0\xb9\x7c\xd4\x42\x64\x14\x02\x96\x1a\xf4\xb9\xc8\x88\x32\x48\x34\x0d\xec\x16\x75\x2c\x9e\x4e\x81\x29\x15\x2b\xc6\xa7\x13\xb8\xfb\x25\xd3\x59\x95\xf2\x34\x01\x86\xb6\xb0\x30\xf7\xb8\x5e\xf3\x18\x21\x68\x62\x4b\xa6\xc7\x8a\xf2\xa3\xa2\xea\x42\x8c\xc6\x5e\x1e\xea\xc9\xf0\xd6\x40\xaf\x59\x69\x2e\x16\x1c\xdb\x8a\x17\x78\x5a\x31\xbc\x65\x7b\x92\x52\x07\xaa\x2f\x3f\xe5\x18\x99\xfb\x14\x7a\xaa\xc6\x6b\x0e\xff\x88\xd4\x8e\xa4\xd7\x60\x25\x9d\x5a\x28\x3e\x80\xb3\xb6\x5d\x5a\x02\xc9\x73\x64\xb1\x29\xb1\xe5\x1c\x64\xe8\xd2\xca\xf4\xbf\xb5\xf0\x0e\xc3\xd0\x1a\x6c\x4f\x84\x2e\x89\xfb\x5e\x3d\x58\xe6\x3c\x57\xf3\xd2\x29\x83\x9f\x11\x8c\xdc\xf2\x82\x90\x5e\xf2\xcd\x52\x83\x7e\xe7\x40\xaa\x1f\x8f\xad\xf4\xab\xf0\xe6\x86\x64\xa8\x1d\xe0\xc9\xc0\xf7\x82\x66\x3f\x10\xa9\x5c\x2a\xbe\x64\xb1\xae\xe4\x37\x37\x3c\xcb\xc8\xe9\xa4\x35\x9e\x0d\x1c\x34\x6d\x08\x1f\x3a\x6d\xea\x73\x3e\xb0\x2c\x22\xfc\x0c\x60\xba\x3a\xe0\x2c\x68\x5a\xba\x82\xfc\x52\xf0\xd4\xcb\x7e\x05\x00\xfd\x9c\x08\x1b\x1d\x65\x6e\xcb\xb7\xb6\x32\x34\x85\x20\x3c\x6e\x68\x8a\xb0\x21\x2c\x4e\x29\x5b\x83\xf1\x9b\xde\xa0\xbb\x1e\x54\x2c\x33\x01\xfa\x30\x3a\x3c\xdb\xc5\x91\xd1\xbb\x27\xf4\x2e\x8e\x3a\x1b\xd8\xf5\xc8\x33\x0e\xa1\x8c\xaa\x12\x2b\x46\x5e\x73\xd1\x7f\x25\x98\xbc\xc3\x35\x95\x0a\x45\xdf\xab\x29\x31\xd5\x7d\xc3\x1c\xde\xe0\x63\x2f\xc9\xcc\xf7\xf6\xa2\x23\xe1\x3e\xda\x60\x46\x1c\x3b\x77\x63\x48\x67\xd3\xff\x03\x00\x00\xff\xff\x4f\x40\xbb\xd1\x09\x31\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0x95, 0xc9, 0x72, 0x9d, 0x19, 0x73, 0x90, 0x52, 0xa4, 0xc5, 0x79, 0x82, 0xdd, 0xa9, 0x78, 0x70, 0x68, 0xa5, 0xa9, 0xc3, 0x17, 0xcb, 0x8e, 0xa4, 0xa0, 0x2a, 0x1f, 0xf9, 0x69, 0x0, 0x8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"definitions/features.toml":           definitionsFeaturesToml,
	"definitions/fields.toml":             definitionsFieldsToml,
	"definitions/info_object_meta.toml":   definitionsInfo_object_metaToml,
	"definitions/info_storage_meta.toml":  definitionsInfo_storage_metaToml,
	"definitions/operations.toml":         definitionsOperationsToml,
	"definitions/pairs.toml":              definitionsPairsToml,
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": {nil, map[string]*bintree{
		"features.toml":          {definitionsFeaturesToml, map[string]*bintree{}},
		"fields.toml":            {definitionsFieldsToml, map[string]*bintree{}},
		"info_object_meta.toml":  {definitionsInfo_object_metaToml, map[string]*bintree{}},
		"info_storage_meta.toml": {definitionsInfo_storage_metaToml, map[string]*bintree{}},
		"operations.toml":        {definitionsOperationsToml, map[string]*bintree{}},
		"pairs.toml":             {definitionsPairsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
