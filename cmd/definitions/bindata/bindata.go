// Code generated by go-bindata. DO NOT EDIT.
// sources:
// definitions/features.toml (1.578kB)
// definitions/fields.toml (714B)
// definitions/info_object_meta.toml (932B)
// definitions/info_storage_meta.toml (1.139kB)
// definitions/operations.toml (8.973kB)
// definitions/pairs.toml (1.426kB)
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (2.388kB)
// cmd/definitions/tmpl/operation.tmpl (2.034kB)
// cmd/definitions/tmpl/pair.tmpl (513B)
// cmd/definitions/tmpl/service.tmpl (11.059kB)

// +build tools

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _definitionsFeaturesToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8b\x13\x41\x10\x85\xef\xf3\x2b\x1e\x7b\x51\x21\x09\x7a\x11\x15\x3c\x8b\x37\x41\x6f\x8b\x84\xca\x74\xc5\x29\xd3\xd3\x35\x54\xd7\x4c\xd8\x7f\x2f\x3d\x93\xd9\x0d\x21\x13\xc4\xdd\x83\xb7\x24\xdd\xf5\xea\xbd\xf7\x35\xb9\x8f\xaa\x99\xb7\x1d\x89\xfd\xac\x02\xe7\xda\xa4\x73\xd1\x84\xcf\xb8\xbb\xbb\xab\x9e\x4e\xb1\x67\xf2\xde\x18\x92\x11\x38\xcb\xaf\xc4\x01\x7b\x35\xf4\x99\x2d\xe3\xd8\x28\x82\xa6\x57\x8e\x23\x25\x47\x76\x93\xda\x31\x0e\xd6\x0d\xd7\x87\xbc\xa9\xaa\xaf\x7b\x78\x23\xf9\x5c\x89\x13\xed\x22\x87\x15\xbc\x61\x64\xb6\x41\x6a\xc6\x51\x62\x44\x52\x87\xb1\xf7\x96\x40\x09\x6c\xa6\x36\xae\x2b\xbf\xe7\xbe\xeb\xd4\x26\xf9\x22\xfc\xe3\x5c\xf5\x48\x19\x92\xdc\x34\xf4\x35\x07\x48\xc2\x97\xef\xdf\xd6\xef\xde\x7e\xdc\x54\x25\x51\x75\x3f\x88\x79\x4f\x71\x1b\xae\x47\x3e\x3b\x5e\xcc\x4c\x8f\x5e\xbd\x21\x47\x50\xce\x25\x7a\x43\x03\x23\x91\xcb\xc0\x28\xe3\xb3\xcf\x5d\x3f\xd5\x92\xe1\x8a\xce\x74\x90\xc0\xc8\xd2\xf6\x91\x9c\x03\xb4\x63\xa3\xe2\xa0\x64\x59\xe3\x4a\x4d\x41\xf2\xd8\x13\x5e\x97\x9e\x02\xef\xa9\x8f\x8e\x1d\x37\x34\x88\xda\x9b\x2b\xf5\x8d\x67\x8c\x28\x07\x86\x5c\x38\xa4\xf4\x70\x6e\x6f\x73\x7d\xe7\x32\x9a\x39\xd6\x53\x82\xa2\x36\xbb\x29\x8d\xd7\xc6\xe4\x5c\x2a\x5c\x9d\x3e\xaf\x10\x25\xfb\x0a\x81\x23\x97\x6f\x94\x02\xb2\x42\xd3\x3f\xe3\xd3\xdd\x6f\xae\x7d\xdb\xb2\x53\x20\xa7\x5b\x28\x2f\xae\x3e\x07\xeb\x24\x85\x47\xa9\xff\x18\xf1\x82\xd5\x17\xc0\x7d\xa9\x7c\x8e\xbe\x8c\x4f\xa8\xb3\x93\xbf\x04\xe8\x28\xe9\x70\x8b\x6e\x39\x7f\x0e\xd2\x39\x5f\xb9\x5e\xb4\x96\x08\x2d\x37\x64\x7d\x42\xad\x6d\x47\x2e\xbb\xc8\x68\x35\xf0\xa7\xd3\xbb\x1f\x15\x31\x08\xcd\xdb\x5a\xf6\x46\x43\x5e\x8d\x2f\x86\x62\xd4\x23\x8c\x29\x4c\xf7\xf6\xa6\x2d\x34\x86\x75\xf6\x87\x78\x9a\x9d\xca\x5e\xa0\x56\xfe\x0d\x6f\xfb\x92\x34\x6f\xa6\x0c\xf5\x86\x6d\xbe\xf3\x77\x40\x3e\xbc\x3f\xf1\xf8\x13\x00\x00\xff\xff\x02\x8a\xc0\x31\x2a\x06\x00\x00")

func definitionsFeaturesTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFeaturesToml,
		"definitions/features.toml",
	)
}

func definitionsFeaturesToml() (*asset, error) {
	bytes, err := definitionsFeaturesTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/features.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0xde, 0x64, 0x57, 0x6f, 0xe4, 0xa1, 0x28, 0x9a, 0xdf, 0xf5, 0xa, 0x78, 0xe3, 0xe7, 0xe5, 0x4c, 0x35, 0xce, 0xe9, 0xb8, 0x4b, 0x32, 0xb7, 0xb2, 0xdc, 0x74, 0xc5, 0x98, 0xd5, 0x9f, 0x28}}
	return a, nil
}

var _definitionsFieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xb1\x4e\xc3\x30\x14\xdc\xf3\x15\x55\xc7\x0e\x9e\x10\x1b\x0b\x62\x61\x40\x54\x65\x60\x88\x3a\xbc\x24\xd7\xf4\x41\x13\xbb\xcf\x2f\xa2\xf0\xf5\x28\x09\x95\x5f\xa8\xd7\xbb\xf3\xdd\xe9\x9e\xcb\x8a\xf7\x85\x7e\x07\xac\x1e\x56\xeb\xcd\xe3\xc9\xd7\x9f\xcf\x0a\x21\xf5\xb2\x2e\x8a\xb2\xe2\x26\xd1\x51\x85\xfb\xf6\x0f\x8e\x09\x2f\xf7\x89\x69\xa2\xe6\x1e\x40\x24\xc1\x10\x99\xdd\x71\x09\x2c\x48\x84\x72\x07\xf7\x34\x08\x29\xfb\x7e\x14\x70\xdf\xe0\x92\x78\xee\x75\x44\x3b\x28\x99\xd2\x6f\xea\x85\x5a\xbc\x40\x69\x64\xfb\x85\xfe\xfe\x6e\xc2\xa8\x43\xae\x96\x37\x36\xaf\xd5\x07\xea\xc9\xdf\x1f\x0e\x11\x9a\xb1\xf1\x7c\xa3\xb7\x63\xf9\x90\xcb\x08\xc4\x62\xc6\x72\xce\x6d\x89\x65\x66\xc4\xa4\x6c\xb6\x24\x7a\x85\x17\xeb\x1a\x46\x8f\xd9\x08\xfe\x67\x63\x5b\x99\xe1\xd9\xbb\x1d\xa8\xc1\x8c\xe3\x6c\x5e\x1d\x55\x83\xdb\xe1\x3c\x20\x4e\x51\x91\x7f\x90\x59\x20\x4a\x9d\x2b\x10\x95\x6f\x0f\x22\xb6\x45\x54\x6f\x2f\x7d\x95\x8c\xd4\x20\xa7\x9c\xe7\xd7\xa2\xf7\xbb\xb0\xce\x72\x25\x69\x91\xf9\x64\xbf\x01\x00\x00\xff\xff\x5c\xa2\x94\x99\xca\x02\x00\x00")

func definitionsFieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFieldsToml,
		"definitions/fields.toml",
	)
}

func definitionsFieldsToml() (*asset, error) {
	bytes, err := definitionsFieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfe, 0xa5, 0x29, 0x70, 0xa5, 0x18, 0x85, 0x7b, 0xfe, 0x73, 0xbf, 0x8c, 0xef, 0x61, 0xf6, 0xa1, 0xa2, 0x5, 0x4c, 0xf, 0xe9, 0x27, 0xee, 0x26, 0x1b, 0x41, 0xe8, 0x33, 0x87, 0xaa, 0x98, 0x7f}}
	return a, nil
}

var _definitionsInfo_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xb1\x8e\xd4\x40\x0c\xed\xf3\x15\xd6\x36\x57\xe5\x2a\xa0\xbb\x02\xe9\x1a\x24\x56\x87\xc4\x21\x8a\xd5\x15\x73\x3b\x4e\x62\x36\x33\x1e\x6c\x07\x58\x21\xfe\x1d\xcd\xcc\x45\x1b\xb2\x41\xba\x6e\xc6\x7e\x7e\xcf\x7e\xf6\xc1\xa5\x84\xd1\xb7\xdc\x75\x8a\xf6\xd4\xd8\x39\x21\xdc\xc1\x8e\xa2\xbd\x7b\xb3\x6b\x3c\xea\x51\x28\x19\x71\xcc\xd1\xf7\x05\xfc\x50\xb0\x40\x0a\x36\x20\xd4\x4a\xe0\xae\xfc\x2a\x1d\xf0\xf3\x37\x3c\xda\xed\xae\x69\x0e\x47\x8e\x86\xd1\xda\x11\x63\x6f\xc3\x95\xc2\x05\x10\xfc\xdb\x4b\x56\x4d\x28\xf6\xcb\x74\xce\x6c\xe5\xd1\x5c\xbf\x15\x27\x7f\x1d\xc5\x5f\x89\xc5\xe0\x0e\x4c\x26\x5c\x0f\xf7\xe1\x7e\x1e\x69\x8a\xf4\x7d\x42\x38\xe1\x19\x28\x82\x1a\x8b\xeb\xb1\x0c\x33\x3a\xb5\x36\xb0\xa7\x8e\x70\xc1\x6f\x14\xf0\xf6\x91\x02\x16\x0c\xc5\x53\x6b\x4e\xfa\xa5\x9f\x73\x07\x2b\xcd\x8f\x14\x4f\x8f\x05\x3a\x6b\xeb\x39\x64\x02\xa8\x04\xd0\xb1\x40\xf9\x2f\x1c\x0d\xec\x17\x4e\x3c\x94\xc4\x9e\x3d\xae\xe7\x6b\x0e\x61\x1a\x8d\x92\x13\x6b\xb7\xdc\x58\xf5\xb2\x9f\xc1\x17\x23\xf2\x0f\xc8\xe7\xe5\x96\xe7\xa2\x89\xe4\x96\xcb\x7c\x95\xc1\x9f\x9c\x0d\x99\x19\xc9\x06\x94\x7a\x2e\xcf\xca\xe3\x64\x59\xc9\x06\xe0\x1a\x14\x1c\x9d\xd1\x8f\x97\xa0\xf1\x4f\x27\x5e\xe7\x35\xdc\x28\x7c\x65\x39\xdd\x93\x80\xc7\x7c\x6b\x0a\x1c\x61\x52\x94\x1b\x05\x8a\x69\xaa\xed\xe9\x59\x0d\x43\x1b\xd0\x9c\x77\xe6\xfe\x39\x3b\x94\xce\x1d\xf1\xf7\x9f\x2b\x07\x3e\x97\xa2\xfd\x4b\x4d\x51\x44\x85\x4a\x05\x1e\x3b\x8a\xe8\x61\xa6\x2c\x32\x59\x77\x43\x24\xb8\x74\xa8\x96\x3c\xfd\xc7\xec\x2f\x8a\xb2\x16\xca\x64\x5b\x32\x7f\x03\x00\x00\xff\xff\x6b\x55\xfd\x86\xa4\x03\x00\x00")

func definitionsInfo_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_object_metaToml,
		"definitions/info_object_meta.toml",
	)
}

func definitionsInfo_object_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0xc7, 0x12, 0x2e, 0xc1, 0x1f, 0x6, 0x2a, 0xc2, 0xf5, 0x95, 0x4b, 0x90, 0x32, 0x59, 0x47, 0x96, 0xc7, 0x79, 0xa4, 0x2e, 0x79, 0x2f, 0x9b, 0xb9, 0xb8, 0xbf, 0x8, 0xb1, 0xc3, 0x8c, 0x18}}
	return a, nil
}

var _definitionsInfo_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd2\xbd\x72\xab\x30\x10\x05\xe0\x5e\x4f\xa1\xa1\xe7\x56\x77\xd2\xf9\x11\x5c\xa5\xf4\xa4\x58\xa3\xc5\xd9\x09\xfa\x99\xd5\x12\x43\x32\x79\xf7\x8c\x84\x21\x63\x4c\x1c\xdb\x94\x08\x9d\xef\x2c\x48\x3b\x08\x01\x9d\x29\x5d\x6b\xf7\xc8\xa5\x85\x8e\x6c\x6b\x5f\x94\xf4\x01\xf5\x46\x17\xe4\xa4\x50\x06\x63\xc5\x14\x84\xbc\x4b\x6b\x5b\xe8\xf4\x10\xd3\x43\x2c\x6a\x72\xe3\x8a\x0f\xc8\x90\x76\xfe\x2b\x94\x1a\xf5\x48\x1f\xb8\x68\x3f\xfd\xbf\xa6\xa7\x58\xa2\x03\xf2\x55\x5e\xbc\x40\xf3\x68\x49\x0e\x4f\x55\x8b\x35\x95\x0f\xfd\xbd\x7c\xda\x36\xa8\xb5\x67\x9d\x84\x19\x5a\xa3\x54\xaf\xeb\xd4\x4c\xcc\xd8\xc6\x57\xf9\xe1\x07\x8b\xc2\xe4\x0e\xe9\x9d\xf5\xef\xb8\xae\x31\x09\xb3\x42\xdb\x36\x42\x01\x58\xee\xbd\x43\x59\x4e\xc1\xd3\x2d\x4a\xbf\x7f\xc2\x7e\x2d\x79\x64\xfc\x0c\xe6\x6f\x30\x58\x93\x43\xa3\xf7\xbd\x8e\xe2\x19\x0e\xc8\x8b\x3e\xb9\x9b\xfc\x61\xdb\x0d\xbe\x03\x8b\x97\x27\x82\x5d\xf0\x2c\x7a\xa3\x85\x5b\x54\x6a\x17\xfb\x28\x68\x4b\x8b\x02\x06\x04\xce\xea\x91\x6b\xa8\xf0\xf3\xeb\x62\x88\xe7\x1c\xda\x9e\x32\xb9\x16\xa3\x1e\xa8\x69\x9e\x91\xcc\xc3\x1c\x3d\xbf\x95\x86\xf8\xef\x81\x8e\x4c\xb2\xf2\xc6\x64\xe2\xec\x34\xbf\x03\x00\x00\xff\xff\x41\xde\xf8\x57\x73\x04\x00\x00")

func definitionsInfo_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_storage_metaToml,
		"definitions/info_storage_meta.toml",
	)
}

func definitionsInfo_storage_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xdc, 0x18, 0x27, 0xc0, 0x7d, 0xb9, 0x57, 0x8b, 0xe9, 0x90, 0xfd, 0xf8, 0xb3, 0x2, 0x40, 0x16, 0xce, 0x94, 0xf9, 0x18, 0x51, 0x52, 0x7a, 0xff, 0x6b, 0x10, 0x2d, 0x50, 0x8, 0x2e, 0xb0}}
	return a, nil
}

var _definitionsOperationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x8f\xdc\xb8\x11\xbe\xf7\xaf\x28\xf4\x1e\x0c\x04\x33\x8d\x3d\x07\xd8\x83\x77\xc6\x41\x0c\xf8\xb1\xb0\xd7\xd9\x83\x31\x98\x66\x4b\xa5\x16\x63\x8a\x94\x49\xaa\xc7\x9d\x5f\x1f\x14\x8b\x92\xa8\x57\xb7\x3c\xeb\xe4\x92\x5c\x8c\x1e\x89\xf5\x55\xb1\xf8\xd5\x8b\xf2\x67\x51\xd7\xa8\x73\xb4\x0f\x9b\x1c\x5d\x66\x65\xed\xa5\xd1\xf0\x0b\x6c\xa5\x03\x5f\x22\x48\xed\xd1\x16\x22\x43\x28\x8c\x85\x97\x61\x35\x58\x54\xc2\x63\x0e\xa6\x46\x2b\x48\xc0\xed\xb6\x9b\x4d\x87\xb5\x33\xf5\x2e\xb3\x28\x3c\x3e\xf2\xa3\x87\x4d\x2d\xac\xa8\x1c\xfc\x02\x9f\xb7\xb5\xf0\xe5\xf6\x61\x63\xd1\x35\xca\xf3\x23\xb3\x9d\xa8\xdf\x6e\x37\x4f\x52\x29\x60\x1c\x10\x1a\x18\x0a\xcc\xe1\x9f\x98\xf9\xdd\x66\xf3\xd3\x4f\xf0\x2b\x96\xe2\x24\x8d\xdd\x6c\x6e\xe1\x2e\x2c\x8c\x06\x7e\xfc\xfb\xfb\x4f\x6f\xee\x27\xc2\xe2\xa0\x30\x02\xc0\x93\xf4\x25\xd4\xc6\xc9\xa0\xf1\x67\x10\x3a\x07\x27\xff\x85\xf0\xf3\x6e\x01\xed\xdd\xfb\xdf\xc1\xa2\x6f\xac\x26\x44\xb4\xd6\x58\x10\xec\xa5\x88\x89\xdf\xa4\xf3\xbb\x0d\xc0\x2d\x7c\x44\x7b\x92\x19\x76\x96\x94\x98\x7d\x09\x3a\x72\x54\xe8\x31\x95\x92\x05\x0b\xba\xdd\x86\xb6\x3d\xf4\xe3\x93\x95\x89\x1b\x47\x4e\x0a\x1e\x8a\x7e\xc9\x8c\xf6\xa8\x3d\x78\x33\x75\xd6\x36\xf5\xbf\xd9\xde\xc0\xd6\xd2\x3f\xb4\xdd\xd1\x49\xe8\xed\xc3\x86\x85\x1e\x2b\x93\x23\x29\x61\xa8\xc9\xf9\x9a\xaa\x92\xfe\xa2\x61\xbc\x24\x6c\xba\x90\x5a\xba\x32\x31\xac\xb6\x26\x43\xe7\xc6\x96\x5d\x50\x7e\x50\x26\xfb\xb2\x96\xa7\xbf\xd2\xe2\x25\x9a\x46\xa4\x84\xa5\xe1\xc9\x0f\x20\x29\x68\x7c\x82\x00\x36\x4f\xd3\x96\x57\x6c\xde\x9f\xa1\x95\x2f\x85\x87\x52\x38\xd0\xc2\xcb\x13\x82\x6b\xea\xda\x58\x1f\x36\xbf\x37\x27\xb4\x81\x37\x7b\xc8\x0d\x3a\xfd\xc2\xc3\xbb\x57\xaf\xee\x89\x1a\xcc\xc3\x31\xb6\x03\x63\x41\x9b\x39\x1d\x2d\x40\x29\x4e\x78\x4d\xd9\x73\xb8\x9e\x1c\x06\x53\x3d\x9e\xc5\x1c\xa1\xc2\x82\x01\xd1\xd9\xd9\x17\xf9\x7d\x03\xdb\x83\xcc\xaf\xd3\x3c\x20\x8d\xe9\x61\xaa\x83\xd4\x17\x6d\x8a\x4b\xd8\x10\x47\x34\x0c\xf1\xb7\x18\x78\x07\x99\xbb\x75\xca\x95\x74\xfe\x92\x66\x7a\xdf\xaa\x3d\xa0\x32\xfa\x48\x2e\xf1\xa5\x74\x0b\xda\x87\x2e\x38\xc8\x0b\x66\x64\xa6\x96\x6b\x63\xed\xce\xd4\xe7\x5d\x2f\xc4\x7e\xab\xcf\x83\x70\x72\x36\xa3\xcd\xe7\xce\x5f\x08\x22\x53\x9f\xc9\x75\xef\x99\x29\xc6\x42\xd5\x28\x2f\xeb\x3e\x65\x4b\x1d\xd4\x3b\xe6\xe7\x4c\x09\x20\x04\xa3\xd5\x99\xb1\x8c\xc6\xc0\xc2\xf0\x84\xfe\x68\x63\x32\x25\xf9\xfd\xfb\x77\x2f\x7e\xef\xc2\xa3\x65\x36\xdb\x02\xda\xe8\x5b\xac\x6a\x7f\x86\x5c\x5a\xcc\xbc\xb1\x67\xb2\x2b\xbc\x2d\xa4\x42\x07\x16\xb3\xc6\x3a\x79\x42\x75\x66\xdc\x4f\x0e\x6d\x07\x27\xab\x5a\x61\x45\x64\xbd\x00\x28\x42\xf2\xae\xcf\x29\x16\x1c\xce\xb4\xd5\xca\xa1\x2a\x18\xf7\x8e\x01\x48\x2b\x33\xbf\x07\x88\x61\x17\x73\xc8\xfe\x95\xb5\xec\xc2\xb7\x26\xc7\xd7\xfa\x24\x94\xcc\xf7\xbb\xd6\x3d\x97\x93\x4e\xee\xfc\x30\x31\xfc\xe8\xac\x33\x51\xf0\x9f\xcf\x3c\x89\xca\x24\xfb\xdc\xc2\x4b\x70\x4d\x46\x45\xa8\x68\x22\xf9\x4c\xcd\x65\x02\x5c\x69\x1a\x95\xc3\x81\x92\x0d\x1d\xa1\xc7\x1b\x78\x2a\x65\x56\x42\x85\x42\xbb\x11\xec\x0b\xd7\xe5\x24\x52\x5d\xa1\x17\xb9\xf0\x22\x41\x09\xac\x15\x15\x92\x8b\x9d\xcd\x3a\x22\x72\x0a\xa4\x93\x5c\x19\x6b\xf7\xed\xa1\xef\x3a\xc1\xa4\x8c\xe5\x72\x0a\x33\xad\x4f\xb9\xb4\xb3\x09\x62\xa1\xe4\x6d\x3e\x17\xe8\xb3\x72\xad\x85\x7f\xa3\xc5\xc1\xba\x28\x46\xf6\x85\x9f\xd3\xfa\x7a\x03\xdb\xc6\xaa\xe5\x8c\x10\xc4\xa0\xb0\xa6\x02\x01\x47\x79\x42\x0d\x8d\x55\x44\x28\x12\x9f\xc6\x7f\xd0\xfd\x9d\x65\x75\x4a\x05\xd6\xda\xf5\x0c\xab\xc8\xf0\x1c\x22\x58\xfc\xda\x48\x2b\xf5\x91\x77\x48\xaf\x1a\xab\x5a\x52\x94\xde\xd7\x1f\xe5\x51\xaf\xf5\x3b\xaf\xdd\x0d\x45\xc9\xf7\x5f\x1b\xb4\xe7\x47\x27\x8f\xfa\x91\x5e\xcc\x13\xa4\xcd\x1d\x7f\xa1\x25\xbb\x0f\xf8\xb5\x41\xe7\xf7\xdc\x23\x07\x00\x70\x3e\x98\x1a\x8e\x10\x3d\x5a\xde\xaa\x90\x9a\x9e\x12\xba\xf0\x8d\x25\xa3\x60\xff\xe9\xc3\x9b\x3d\x1d\x92\xc5\xda\xa2\x0b\xa5\xba\x44\xc8\x94\x44\x4d\x2e\xb2\x8c\x3e\xaa\x4e\x35\xb1\xa1\x65\x05\x7e\xab\xa5\x1d\xb7\xa6\x16\xbf\x06\x3a\x56\x14\xf7\xeb\x9c\xf2\xd6\x9c\x30\xb8\x24\xc8\x90\x37\xe8\xc7\x77\x57\x26\x12\xea\x8b\xfa\xd5\x32\x44\x5a\xb9\xe8\x54\xfc\xeb\xd9\x65\x88\x15\xcf\x55\x8d\x8b\xc5\x66\x59\x6c\x5a\x57\xde\xf2\xda\x3f\x53\x57\x02\xc4\xff\xeb\xca\x6c\x32\x61\x06\x74\xb9\x24\xe2\xfd\x97\x0a\x0b\xf7\x4f\xc2\xfa\xd5\xf1\xd2\x0a\x2c\x8d\x4e\x09\x62\x52\x77\xba\xa7\x3f\x6a\x84\xea\x00\x97\xc6\xfc\xde\xd0\xef\xce\xf6\x13\xd7\xf4\xa3\x47\xb2\x8f\x95\xe3\x47\x6f\xe8\x95\x11\x44\xea\x1c\xbf\x4d\x86\x90\x90\xf2\xac\x9f\x36\xe2\xe1\xe9\x8c\xbf\x23\x69\xae\x59\xda\xae\x4b\x2d\x84\xa6\x56\x46\xe4\xb1\xdd\xd4\xce\xdb\x26\xf3\x7d\xbf\x3d\xb3\x01\x92\x9a\x99\x55\x16\x6c\x0b\xe3\xca\x15\xbb\xc2\xc8\x12\x60\xc7\x13\xcb\xa2\x23\x87\x2e\xab\x67\x86\x96\xd6\x9e\x5a\x1c\xd7\xf2\xfc\x37\x71\xc4\x19\x8a\xc7\x50\x6c\x93\x81\x15\x3a\x37\x15\x1f\xfb\xae\xd3\x90\xf0\x9e\xfe\xfe\x51\x94\x27\xac\x2b\x77\x5b\xc1\xea\x67\xf2\xbd\x33\x9d\x99\xce\x96\xaf\x22\xb9\xab\x31\x93\x85\xcc\xc0\x14\x85\xc3\xab\x44\xe7\x55\xd7\xc7\x6d\xb2\x80\x0c\xb3\x28\xd6\x37\x97\x1f\x68\xf1\x2e\x11\xa3\x1d\x85\x9f\xf3\x9b\xa9\xad\x39\xc9\x9c\x5c\xfc\x24\xce\x6d\xa6\xcd\x84\x86\x20\x93\x78\xeb\x6a\x27\xcc\x7d\xea\xe6\x73\x2c\xfa\x53\x7b\x09\xb5\x12\x32\xb4\x44\x49\xd0\x39\x6f\x2c\x1d\x5b\x94\xe3\x2c\xda\x82\xf4\x54\x5a\xd1\xb6\x47\x24\x0b\x52\x3b\x2f\x74\x86\x43\x9b\xb5\xa8\xc6\x0d\x13\x49\xe0\xc0\x6a\x52\xc8\x15\x6c\x5e\x61\xac\x6e\x62\xa5\xb2\x21\xf0\x11\x17\xa2\xfe\x88\x1e\x04\x84\x7e\x61\x0a\x1c\xce\xb5\x6d\xa5\x9e\xb7\x23\xca\x2a\x17\xf2\x8d\x50\x6a\xaa\xd6\x41\xa3\x73\xb4\x9c\x7c\x7a\xf5\x43\x65\x92\x55\x45\xd9\x75\x14\x1d\x1d\x38\x9f\x77\x44\x48\xdd\x3f\xa5\x5b\x2d\xa4\x8d\x51\xd5\x87\xca\x72\xf6\x68\xcf\xaa\x6b\x4b\xc3\x14\xb1\xd8\x94\xde\xf3\xf2\xd0\x84\xe6\xed\xef\x67\x37\xa6\x16\xb9\xc7\x54\xea\x62\x23\xca\xcb\x1e\xe9\x04\x06\x8d\x67\x67\x8e\x74\x20\x73\xac\x6a\x43\xd9\x26\x2a\xee\x9b\xa7\x76\x8b\xea\x49\x9c\x5d\x9b\xee\xb4\x54\x9c\xef\x78\x79\x04\x8a\x69\x51\xe3\x09\x6d\xd7\xb1\x72\x65\x7b\x67\xfc\x2b\xca\x85\xfb\x74\xfd\x70\x5b\xf3\xb7\xa2\x5d\x0b\xc9\x29\x34\x3d\xc5\xb6\x15\xbb\x38\x4d\x65\x8d\xb5\xe4\x85\x8e\x7c\xad\xd4\x88\x68\xf4\x78\xfb\xb0\x51\x26\x13\x0a\x7e\x01\x6f\x1b\x1c\xa9\x63\x86\x5f\xa2\x0c\x57\x5f\x26\xcc\xa0\xfc\xc8\x65\x06\x45\x33\x39\x48\xfa\x3c\x3f\x3f\x5b\x8f\xbe\x67\xb4\x44\xc8\xb1\x10\x8d\xf2\xb0\x7f\x23\x5d\x18\x0c\xc2\x44\x30\x5a\xdc\x13\xa2\x5b\x76\x2f\x2d\x8f\x97\xa6\x89\xe3\x61\x38\x82\xd0\x7f\xff\x43\x5a\xdf\x08\x45\x4b\x52\xb0\xe1\x91\xed\x3f\x7a\x41\x13\x6a\x49\x83\x0b\x4d\x9d\x84\xbc\x9f\x3b\x2b\x8b\x62\xe1\x03\x05\xbd\x09\xca\x69\xfa\x79\xe1\x20\x9e\xcd\xcc\x35\xc5\xd3\xc0\xd9\xa3\x5a\x47\xed\x9d\x79\xcc\x84\x52\x07\x91\x7d\x99\x29\x7d\x43\x7b\xda\x8c\x7f\xbd\x6f\x58\xca\x08\x03\xa6\xac\x69\x2e\x92\x4f\x5e\xe4\x6f\xa1\xcf\x20\x6a\x09\x59\x88\xdf\xf9\x66\x23\x6d\x34\x1c\xea\x3c\x08\xbd\xfc\xed\x75\x14\x1a\x2f\x13\x59\x86\xb5\x87\x7e\x40\x04\x32\x9e\x5a\x92\xa8\x9b\x4c\x9f\x3b\x1d\xe7\xc5\x15\x6a\x0f\xf7\xbe\xb2\xb7\x22\x58\x10\x81\xcb\xc4\x16\x2a\x41\x52\x17\x06\x4c\x91\xdc\xce\x4f\x49\x4e\x52\x57\x77\x54\x4a\x3d\x1e\x60\xef\x82\x48\x98\x28\x73\x59\x14\x18\xe2\xbe\xa3\x7d\xec\x2e\x89\xdc\xfd\xdb\x81\x5f\x16\xbf\x18\xca\x22\x86\xa9\xd4\xc7\xd4\x16\x6a\x99\x85\xcf\xca\x19\x8f\x86\x0e\x6e\xf6\xb2\x2d\xfd\xe8\xd7\xfb\xf7\x32\x77\x17\xfc\xcb\x6d\x62\x98\x46\xf9\x93\x47\x88\xa1\xa9\x47\xff\x08\xeb\xfe\xc7\xbf\x74\x8d\xee\x04\xd8\x77\xdf\x77\x29\xf0\xac\x0b\x01\xce\xe8\x98\x53\x7e\x64\xa5\xed\xdd\x5b\xa4\x8d\x92\x7a\xf5\x27\x55\x5a\xdb\xcb\x24\x53\x10\x3d\x98\xa5\x9b\x17\xf6\x38\x19\x05\xe6\x63\xf6\x8f\x41\xca\x22\xc4\x24\x46\x07\x84\xda\x13\xfa\x3e\x6c\x7f\xcf\x0a\xf6\x31\xfa\x0e\x71\xa4\xa3\x73\x23\x62\x1d\x9c\x51\x8d\xc7\x58\xcf\x6e\xe1\x75\xd1\x4b\x68\xd3\xf2\xe1\x26\x26\xb2\x37\xa4\x33\xa6\x8e\x25\x63\xfa\x9b\x67\x46\x63\x53\x18\xe7\xaf\x81\x50\xfd\x53\xe9\xa8\xa6\x9e\xab\x44\x7c\xaa\x2a\xb6\x51\xe1\xd0\x06\x4b\x79\x4a\x4f\x53\xf8\xac\x19\x13\x95\xb4\xaf\x35\x6a\xdb\x18\x9c\xbb\xd3\x8b\x81\xf9\x54\xe2\xe0\x9e\x33\xc4\x47\x50\xd0\x06\x45\x17\x0f\xcc\xf0\xd4\xc2\xe4\x44\x48\x15\x53\x30\x96\x6c\x0a\xa5\x58\xac\x6f\x53\xd3\xee\x46\xbd\xc2\x89\xdb\x80\xc0\x2f\x28\x90\xef\x97\x83\x55\xad\x45\x6d\x3d\x1b\x06\x6b\xdf\x91\xba\x36\xb4\x50\x87\xff\xf9\x11\x9a\xfd\x16\xa9\x6f\x48\x4f\x18\xc7\xe4\x7f\x07\x00\x00\xff\xff\x40\xa1\x10\x68\x0d\x23\x00\x00")

func definitionsOperationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsToml,
		"definitions/operations.toml",
	)
}

func definitionsOperationsToml() (*asset, error) {
	bytes, err := definitionsOperationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0xc7, 0xf6, 0x34, 0x54, 0x5, 0xe4, 0xbb, 0x40, 0x86, 0xfd, 0xab, 0xe9, 0xbc, 0x21, 0x6, 0x8c, 0x3b, 0x1f, 0x91, 0x4b, 0x62, 0xf3, 0x82, 0xa5, 0xd2, 0x10, 0xb, 0xd4, 0xc7, 0x70, 0xcb}}
	return a, nil
}

var _definitionsPairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x8e\xd3\x40\x0c\xbe\xe7\x29\xac\x9e\x40\x5a\x75\x2f\xc0\x8d\x1b\x42\x42\x62\xc5\x01\x38\xad\x56\xd1\x64\xc6\xb3\x31\x9d\x8c\x83\xc7\x69\x08\x4f\x8f\x66\xd2\x36\x51\xd9\x76\x17\x6e\xd5\xd8\xdf\x9f\xed\xf4\xde\x72\x54\x8c\x5a\x77\xee\xed\x43\xa5\x53\x8f\xf0\x1e\x36\x49\x85\xe2\xe3\xa6\xaa\x4e\xe5\x5c\xb9\x54\xa7\x38\x18\x25\x8e\xb5\xf2\x0e\xe3\xdf\x5d\x0e\x93\x15\xea\x73\x4b\x79\xee\xd1\x92\x9f\x40\x5b\x84\x35\x1c\x0a\x1c\x3c\x0b\x04\x4a\x5a\xd8\x05\x1d\x46\x25\x13\x5e\xcc\xda\xf2\x08\xca\xd0\x0b\xef\xc9\x21\x2c\x0c\x85\x38\xa1\xec\xc9\x22\xe4\x9f\xca\x62\x1e\x31\xcb\x60\x74\x3d\x53\xd4\xff\x15\x39\xe2\xaf\x49\xfc\xea\x49\x56\x13\x54\xea\x70\xfb\x61\x90\x92\xfc\xa2\xce\xd8\x62\x2c\x73\x1a\x24\x80\xa0\x0e\x12\xd1\x41\x33\x81\xa0\xb1\x2d\x8c\x14\x02\xcc\xcc\x59\x83\xa2\xa2\x58\xec\x95\x65\x11\xfa\xb4\x3c\xe6\x9e\x3c\xd9\xba\x63\xb7\xb2\xf2\x99\x92\xde\xb1\x2b\x14\x81\x6d\x71\xf4\x4f\x4b\x3c\x82\xae\xc4\x8f\xa6\x7b\xe2\x7c\xae\x70\x1e\xb0\x90\x81\x99\x80\x9b\x1f\x68\xcf\x9d\x7f\x29\x8f\xb3\xf7\x33\xae\xa5\x04\x2d\xc5\x72\x4c\xec\x7d\xc2\xd5\x8e\x29\xea\xbb\x37\x17\x4d\xcc\xdd\x25\x92\xb6\x94\x40\xf0\xe7\x80\x49\x6f\x4e\xce\xca\xf0\x13\xe2\x2e\x5f\x42\x69\x39\x40\x1a\xf4\x2c\x98\x57\xe4\xb2\x6c\x37\x04\xa5\xde\x88\xd6\xe4\x9e\xfa\x82\x88\x6b\x6b\x42\x68\x8c\xdd\x2d\x65\x3f\x44\xfb\xea\xfe\xa1\x99\x14\x5f\x5f\xb9\x0e\xa3\xa0\xec\x18\x70\x8f\x32\x41\xbe\x29\x18\x67\x65\x70\x46\x0d\x78\xe1\x0e\x12\x0f\x62\xcb\x10\x13\xfd\xc6\x97\xe6\xcf\xbd\xcf\xa5\xe7\x18\xa6\x59\x2d\x50\x47\x8a\x0e\x0e\x7f\x17\x45\x3d\x2b\x8e\x2c\xbb\xda\x91\x3c\xbb\xfb\xcd\xa6\x5a\xaf\x3f\xe3\xc0\x91\x5c\x38\xa9\x9b\x43\x62\xee\x71\xfe\x82\x66\x3f\x4d\xce\x1e\x8c\xd2\x1e\x4f\x4b\x71\x24\xdb\xea\x68\x03\xee\xbe\x7f\xfd\x06\x49\x8d\x28\x8c\xa4\x2d\xdc\x16\x81\x99\xec\x18\xed\x20\x97\x56\xb0\x23\xbb\x43\x6f\x86\x90\x87\x0e\xb7\x40\x1e\x22\x2b\x24\xd4\x6d\xf5\x91\x05\x7c\x3a\xa7\x80\x62\x2c\x3a\x1e\x13\xf4\xc1\xa8\x67\xe9\x6e\x4a\xbe\x06\x5b\xb3\x27\x16\xa0\x04\x43\x74\xe8\x29\xa2\xdb\x56\x79\x0c\x7f\x02\x00\x00\xff\xff\x18\xb1\x37\x3d\x92\x05\x00\x00")

func definitionsPairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsToml,
		"definitions/pairs.toml",
	)
}

func definitionsPairsToml() (*asset, error) {
	bytes, err := definitionsPairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x0, 0x28, 0x68, 0x7d, 0x4b, 0x29, 0xb9, 0x56, 0x9b, 0x8c, 0x71, 0x7a, 0xb4, 0x5c, 0x96, 0x6f, 0x82, 0x16, 0x0, 0xaf, 0x8e, 0xa7, 0x2f, 0x32, 0x36, 0x13, 0x78, 0xa, 0x6e, 0x2f, 0x90}}
	return a, nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4f\x6f\xe3\xb6\x13\x3d\x87\x9f\xe2\xfd\x82\xe0\x57\xbb\xb0\xa5\xdd\xb6\xe8\x21\x5d\x1f\x8a\x75\xda\x06\x68\xe2\x05\x9c\xf6\x1c\x9a\x1a\xd9\x6c\x28\x52\x25\x47\x5e\x7b\x1d\x7d\xf7\x82\x92\x9c\xd8\x89\xbd\xf5\xa2\x68\x4f\xe6\x9f\x99\xc7\x99\x37\x6f\xc6\x4a\x53\xbc\x77\x19\x61\x4e\x96\xbc\x64\xca\x30\x5b\x63\xee\x9e\xf6\x50\x45\x96\x66\x94\x6b\xab\x59\x3b\x1b\x7e\xc0\x78\x82\xdb\xc9\x1d\xae\xc6\xd7\x77\x89\x28\xa5\x7a\x90\x73\x02\xaf\x4b\x0a\x42\xe8\xa2\x74\x9e\xd1\x13\x00\x70\x9e\x17\x7c\xde\xae\x58\x17\xd4\x2d\xc3\xda\xaa\x73\xd1\x17\x22\x4d\xf1\x93\x26\x93\x41\xdb\x8c\x56\xd0\x16\x6e\xf6\x07\x29\xc6\x4c\xb3\x50\xce\x86\x88\xb3\xd9\x0c\xe1\xa5\x9d\x13\x2e\x1e\x06\xb8\x58\xe2\x72\x84\x64\xd2\xd8\xdd\x10\x4b\xd4\x75\x83\xda\x7a\x5e\x47\xa0\xcd\x06\x17\xcb\xe4\x56\x16\x84\x47\xb0\xfb\x20\x83\x92\x06\x75\x8d\x4a\x5b\xfe\xfe\x3b\x8c\xf0\xf6\xdd\xbb\x68\xf4\x10\x9d\x23\x3e\xd9\x2c\x2e\xdb\x90\x5a\x6c\xe8\x00\x5e\x10\x42\x21\x8d\xa1\xc0\xa8\xac\xe6\x18\xe2\xdc\x0d\x03\x3b\x2f\xe7\x94\x88\x34\x8d\x0e\xb7\x93\xbb\xab\xe9\x65\x5c\x01\xc3\xce\xfd\xab\x80\x3c\xa6\x16\x30\xfd\x65\xf2\xdb\xaf\x63\x58\xc7\x98\x11\xd4\x22\xa6\x92\xc1\x55\x1c\x74\x46\x08\xe4\x97\x5a\x51\x48\xf6\xdd\xf1\xfe\xc7\xdb\x48\x71\xf4\x70\xa5\xa6\xec\xc5\xb5\x0e\x50\xce\xaa\xca\x7b\xb2\x8c\x20\x73\x7a\x06\xb0\x66\x8d\xfb\xeb\xf1\xfd\x00\xf7\x1f\x24\x2f\xe2\xef\x8d\xcb\xe8\x1e\xd2\x13\x3c\xfd\x59\x69\x4f\x19\xb2\xca\x6b\x3b\x87\xd1\x81\xe1\xca\x58\xe8\x58\xdb\x01\x1c\x2f\xc8\x77\xb1\xb7\x90\x80\x72\x95\xc9\x62\x2c\x39\xb1\x5a\x50\x86\xa5\x96\x30\xf2\xd3\x1a\x81\x25\xc3\xb8\xb9\x56\x97\x58\x30\x97\xe1\x32\x4d\x67\xb4\x76\x36\xdb\x72\xa4\x5d\x9a\x39\x15\xd2\x67\xda\x52\x6d\x99\xbc\x95\x26\x6d\x6b\x36\x8c\x48\xc3\x88\x24\xa2\x86\xb6\x29\x06\xf6\x95\x62\x6c\x4e\x15\x40\x34\xd3\x79\xac\xfc\x98\x82\xf2\xba\x8c\x09\x3d\x5f\x1e\xbd\x78\xaa\xfe\xb3\xdd\xdd\xba\xa4\x46\x3e\x75\xbd\x73\xf2\x42\x2c\xe2\x2c\x4d\xa1\x8c\x8e\x05\xe8\xb4\xb2\xdd\x59\x7c\x5c\x68\xb5\xd8\x29\x96\x34\x7a\x49\x89\x38\xeb\x2c\xa6\x2d\x13\x5e\x34\x8f\xa6\x69\x14\x3c\xaa\x40\x19\x64\x80\x8c\xbb\x42\x96\xc8\x9d\xdf\x36\xc4\x52\x9a\x8a\x06\x78\x83\x82\xa4\x0d\x8d\x98\x02\xf1\x00\x6f\xbb\x83\x40\xdc\x40\x35\x38\x8d\xca\xc5\x59\xe6\x2c\x35\x9b\x6f\xbf\x11\x67\x45\xbc\x8d\x8d\x97\xdc\x54\x4c\x2b\x51\x0b\x71\x0a\xb1\x9b\x4d\xc7\xe9\xd5\xaa\x69\xeb\xba\x16\x79\x65\x15\x7a\x0e\x5f\xb7\x96\x7d\xfc\x4c\xdc\xd1\xab\x43\x69\xe4\xba\x63\xae\xd7\xdf\xe7\x0e\x9b\x26\x42\x4f\x5c\x79\x0b\x97\xbc\xa2\x3a\xc6\xf4\x0a\x7c\x7a\x04\x7c\xb9\x0f\xde\xdf\x7a\x74\xaf\x1c\x80\xc7\x08\xcb\xbd\x08\x44\x57\x4e\x13\x9a\xd7\xa3\xd8\x8f\xa4\x82\x8f\xda\x18\xcc\x89\x71\xf0\x36\xf7\xae\xe8\x6a\xdd\x8c\x84\x83\x62\xfb\x02\xda\x7a\x7b\xa9\x0d\x30\x73\xce\xf4\x9f\x12\x8b\x8d\xd2\xeb\xb7\xca\xd1\x39\x5c\x12\x6b\xfe\xff\x93\xe6\xdf\xff\x46\x78\xd3\xe1\x7c\xbe\x14\x03\xb0\xaf\xa8\x31\xac\xc5\x2e\x69\x3b\x91\x3d\xe2\x13\x79\xf7\x7b\x14\x66\xe3\x91\x4b\x13\x48\xb4\x3c\xde\x54\x81\xff\x4b\x2e\x3f\xf3\xde\x11\x19\xfe\x23\x1e\x47\xfb\x3c\x96\xd2\x6a\xd5\xcb\x0b\x4e\xa6\xa5\xd7\x96\xf3\xde\x79\xd7\xb6\x3b\x08\x75\x1d\xe7\x40\xd7\xb8\xe7\xfd\x7e\x47\xee\xdf\xb7\x44\x9a\x1e\x6b\x82\x96\xca\x70\x8c\x4a\x6d\xd9\x7d\x39\x95\xff\x42\xc3\xb5\xd4\x3e\x8e\x4e\xe1\xf6\x60\x87\xb6\x03\x77\x77\xf6\xbe\x0a\x5b\x19\x67\xa9\xb7\xda\x39\xd9\x3c\xcd\xf7\x53\xbe\x1e\x0e\x86\xbf\x3a\x54\x92\x17\xff\x1a\x3b\x19\x36\x0e\xf1\xd3\xa5\x16\x7f\x05\x00\x00\xff\xff\xa7\xaa\x95\x75\x54\x09\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x61, 0x7d, 0x5b, 0xc0, 0xc8, 0xe7, 0x81, 0xf1, 0x98, 0xf, 0xb1, 0xee, 0x37, 0x9f, 0xa2, 0xc0, 0x15, 0x45, 0xcd, 0xb, 0x28, 0xe8, 0x1b, 0xcb, 0xb2, 0x9f, 0x24, 0x62, 0x3b, 0xf4, 0x3a}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4f\x8b\xdb\x3e\x10\xbd\xeb\x53\x3c\x4c\x0e\x36\xec\xcf\xb9\xff\x20\xa7\x76\x0b\x0b\x25\x1b\x5a\x4a\x8f\x45\xb1\x27\x89\x68\x2c\xa9\xd2\x64\xff\xe0\xea\xbb\x17\x29\x4a\x36\x0e\xc9\xa6\x69\x4b\xe9\xcd\xa3\xd1\xbc\x79\xf3\xa4\x27\x5b\xd9\x7c\x95\x4b\x02\x3f\x5b\xf2\x42\xa8\xce\x1a\xc7\x28\x05\x00\x14\x8d\xd1\x4c\x4f\x5c\x6c\x23\x65\xf2\x87\x26\x1e\xaf\x98\x6d\x0e\x59\x75\x54\x88\x4a\x88\xbe\xff\x0f\x4e\xea\x25\x61\xf4\xe5\x06\x23\x85\xff\x27\xa8\xef\x34\x93\x5b\xc8\x86\x3c\x42\x10\xe3\x31\xee\x2d\x39\xc9\xca\x68\x68\xd9\x91\x87\xd2\xe8\x7b\x8c\x54\xfd\x56\x79\xbb\x96\xcf\x53\xd9\x11\x42\xa8\x45\x63\xb4\x8f\x54\x8e\x60\x8d\x8d\xb8\x23\x55\xdf\xdb\x04\x19\x39\x8c\xc7\x30\xf6\x14\x4a\x5c\x33\xb6\x4e\xd1\x77\xb0\x99\x49\xdf\xc8\x35\x42\x80\xf2\xe0\x15\xc1\x0c\xd8\x60\x61\x1c\x5e\xa9\x39\x47\x35\x72\xb8\x96\xc0\x04\xc5\xd9\x64\x91\x86\x26\xdd\xc6\x01\x2b\x91\x81\xc9\x37\x4e\xd9\x44\x36\x04\x11\x4f\xec\x24\x1d\xa8\x9d\xe4\xe8\x13\xb3\x88\xa5\x16\x30\x0e\x25\x7d\x8b\xfb\xd3\xc6\xc2\x93\x7b\x50\x0d\xb9\xa2\x3a\x5a\x67\xe3\xe4\x32\xae\x67\x75\x3f\xb2\x53\x7a\x59\x56\xf0\xe9\x63\x8f\x99\xf9\xe5\xf8\x27\xce\xe8\xbc\x18\x39\x73\x34\x62\x06\x3e\x5d\x53\xe6\xcc\x3b\xe3\x3a\xc9\x33\xe9\x64\x17\x7b\x55\x18\x26\x3e\x90\xdf\xac\xd9\x7f\x56\xbc\x9a\x6d\xef\xfa\x60\xca\x22\x96\x1c\xaa\xa4\x0d\xa7\xea\xf7\x66\xdb\xe6\x22\xf7\x88\xfc\x66\x6b\x94\x5f\x19\xe3\xa0\xbc\x6c\xf8\x09\xd9\x73\x75\x5e\xbb\xf9\xe3\x53\xee\x8e\x6d\x18\xa5\xb0\xdb\x78\xbe\xed\xe6\xd4\x7e\xd2\xaa\xb3\x6b\xea\x48\x33\xb5\xa7\xee\x58\x59\x89\x20\xa2\x9b\x2f\xee\x4c\xa0\x98\x13\x28\x02\xb7\xd4\x82\x0d\x56\xf2\x21\x79\xed\x51\xba\x16\x8d\xe9\xac\x64\x35\x5f\x13\xf6\x58\xc9\x92\xbe\xde\x5e\xf2\xcb\x3d\x3c\xbb\x4d\xc3\xe8\x83\x10\x8b\x8d\x6e\x50\xfa\xcb\x45\xd5\x55\xe3\x5e\x8b\x7d\xe4\x99\xec\x44\x47\xbc\x71\x1a\xc5\x45\x80\x22\xca\xfb\xba\xa7\xae\x20\xf3\x57\x4c\x34\x7c\x6c\x4e\xda\x88\x9c\xc3\x04\x53\x7a\xdc\xff\x03\xa6\x86\xef\x5e\xd8\xdf\x3a\x67\x5c\x39\x78\x16\x43\x28\xaa\xe3\x07\xe7\x45\x49\x11\xc4\xb9\x7e\x57\xc8\xf3\x0f\x78\x33\x8b\xf7\x3b\x02\x1d\x28\xb2\x13\xea\xf0\x6b\xaf\xde\x8f\x00\x00\x00\xff\xff\x10\x3f\xbe\x08\xf2\x07\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x7b, 0x5e, 0x6e, 0x66, 0xf7, 0x42, 0x30, 0xe2, 0x0, 0x24, 0x8d, 0xa9, 0xf3, 0x83, 0xfc, 0xea, 0xd3, 0x1, 0x53, 0x8, 0x65, 0xb2, 0xbb, 0xdf, 0x35, 0x89, 0xbd, 0xd0, 0x35, 0x97, 0x38}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\xf3\xe6\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xe6\x8e\x6d\x4d\x99\x98\x6b\x63\xf9\xd2\x9e\x0a\xed\x6b\x79\xa2\xde\xbb\xb2\x61\x1f\x95\x21\x69\xfc\xfa\x5e\x76\xbf\x64\xb8\x1a\x79\x61\x0e\xba\xb2\xe4\x6e\x3e\xc5\x8f\xb7\xb9\x0f\xd4\x64\x42\x2c\x85\x18\x86\x35\xa2\x72\x86\x90\xbf\xae\x90\x77\xd8\xfc\x41\x71\x48\x99\x31\x8e\xd3\x34\x0f\x4e\xd5\x94\x78\xde\x15\xbb\x54\x7e\x80\xfd\x41\x35\x5a\x55\x49\x23\x25\x5e\x2c\x5f\x86\xe1\xae\x1c\x47\xbc\xd9\xaa\x82\x0a\xa1\xea\x91\xf8\x6d\x6f\x1c\xd1\xa9\xaa\x25\xb0\xc7\x3e\x4c\x9f\x56\x08\x29\xc5\x2c\xd9\x52\xa3\xa3\x9d\x70\xb2\x3d\xb7\x4e\x7f\x33\x5e\x74\x37\xbf\x63\x1f\x52\xbf\x44\x8a\x8a\x61\xba\x3f\x12\xb7\xd1\x4d\x64\x06\xe9\x3d\x51\xbf\x41\xf6\x25\x44\xb6\x7a\x4c\x9f\x53\x9c\x0d\xba\x99\x8c\x62\xbe\x98\x5c\x99\x12\x7c\x06\x00\x00\xff\xff\x4a\xa4\x90\x14\x01\x02\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x39, 0x9e, 0xc1, 0x58, 0xb2, 0xe1, 0x28, 0x83, 0x3f, 0x14, 0x45, 0x7, 0x96, 0x7c, 0xf8, 0xb7, 0x32, 0x8d, 0xde, 0xd, 0x5e, 0xeb, 0x65, 0x68, 0x64, 0x58, 0xd9, 0xad, 0x94, 0xe5, 0x38}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xdb\xb8\x15\x7e\xf7\xaf\x38\x2b\x0c\x0a\x3b\x70\xa4\xdd\xa2\x2f\x9d\xc2\x0f\xed\x4c\x9a\x0e\x36\x97\x41\x26\xdb\x7d\xc8\x2e\x06\xb4\x74\x64\xb3\x96\x48\x85\xa4\x3d\x31\x5c\xfd\xf7\x82\x17\x5d\x4d\xc9\x76\xd2\xdd\x60\x81\xcc\x4b\x64\xf2\xf0\xf0\xf0\x5c\x3e\x7e\x24\x13\x45\x70\xc3\x13\x84\x15\x32\x14\x44\x61\x02\xcb\x3d\xac\x78\xfd\x1b\x76\x94\x40\x9c\x27\x51\x82\x29\x65\x54\x51\xce\xe4\xdf\xe0\xf6\x2d\xbc\x79\xfb\x1e\x5e\xdc\xde\xbd\x0f\x27\x05\x89\x37\x64\x85\x70\x38\x40\xf8\x86\xe4\x08\x65\x39\x99\xd0\xbc\xe0\x42\xc1\x74\x02\x00\x10\xc4\x9c\x29\xfc\xa4\x02\xfb\x8b\x72\xf7\xc1\x50\x45\x6b\xa5\x0a\xf7\x53\xd1\x1c\x83\x89\xfd\x5e\x51\xb5\xde\x2e\xc3\x98\xe7\xd1\x12\xf7\x9c\x25\x52\x71\x41\x56\x18\xad\xf8\xf3\xea\x73\xf7\x97\xa8\xd8\xac\x8c\x86\x38\xa3\xc8\x2a\xfd\x67\x8e\x95\x28\x76\x34\x46\x69\x47\x85\x67\x8f\x53\xfb\x42\x0f\x9a\x4d\x26\x3b\x22\xe0\x11\x1e\x6c\x97\x70\x3f\x2b\xb5\xe1\x83\xfd\x78\x21\x04\xaf\xfa\x1a\x53\xc3\xb7\x85\xf1\xa5\xeb\xd0\x4b\x0f\x6f\xb7\x82\xe8\xc6\x96\x70\xf8\x0e\x3f\x6e\x51\xaa\xc9\x24\x8a\xe0\xfd\xbe\x40\xa0\x12\xd4\x1a\x41\x1b\x01\x29\x17\x1d\xaf\xc7\x9c\x49\x65\xc5\x16\x10\xb4\x7a\x02\x33\xfe\xed\xf2\x3f\x18\xab\x87\xbd\x54\x98\xbf\x46\x45\x12\xa2\x08\xe8\x85\xa1\x04\x69\x5a\x21\xaf\x9a\xb5\x6a\x6e\xe4\xc3\x89\x99\x6b\x60\xb0\xd8\xc6\x0a\x0e\x93\xc3\xe1\x39\x08\xc2\x56\x08\x57\x8f\x73\xb8\xda\xc1\xf5\x02\xc2\x3b\x96\x72\xa9\xed\xd2\xfe\xd5\x12\x34\x05\xfc\x08\x57\xbb\xf0\x21\xe6\x05\x42\x60\x27\x08\x7a\x22\x8c\x2b\x2d\xf3\x32\xe3\x4b\x92\xb5\xfb\xae\x0a\xa6\x97\x73\xbd\xd0\xdd\x66\x65\xff\x05\xc5\xef\x89\x8c\xbb\x72\x34\xd5\x02\xb7\x54\x16\x19\xd9\x57\xbe\x01\xf7\xd7\x52\xb4\x18\x10\xd3\x22\xc8\x92\xe6\xa7\x91\x43\x19\x0b\x6a\x82\xd6\xee\xb0\x9a\xca\xd2\x49\x19\xdf\x0f\xa9\xa9\x7f\xb6\x3e\x4b\x13\x99\x97\xa8\xbc\xfe\x7d\xa2\x59\x06\x2b\x54\x7e\xef\xa7\x82\xe7\xae\x27\x9c\x44\x91\x56\xf4\x1c\xde\xaf\xa9\x84\x74\xcb\x62\x63\xa9\x5c\xf3\x6d\x96\x18\x97\x2e\x11\x62\x92\x65\xb6\xc2\x5d\x92\x02\xcd\x8b\x0c\x73\x64\x0a\x45\x58\x8d\x47\x10\xa8\xb6\x82\x51\xb6\xaa\xe6\xb5\xd2\xf5\xc4\x54\x82\x40\x92\x00\x67\xd9\x1e\x08\x4b\x7a\xd3\xe4\x3c\xa1\x29\xc5\x24\x9c\x68\x3b\x86\x16\x37\xe5\xf0\xcc\xb6\xcf\xfc\xcb\x3b\x18\xb7\xc9\x7c\x0e\x7c\xa3\x83\xce\xc3\x97\xd8\xd7\x31\x33\x32\x34\xd5\x22\x87\x3a\xc6\xd6\x7e\x90\x79\x38\xf5\x69\xb6\x83\x6c\x54\x9c\xa8\x4f\xec\x50\x45\x47\x8e\x45\x47\x0e\x45\x87\x32\xc5\xcf\x8b\x8e\x71\x63\x13\x1e\xce\x62\x9c\x43\x91\x21\x91\x08\x39\xd9\x20\xc8\xad\x40\x20\x59\x06\x46\xf1\x9a\x48\x58\x22\x32\x78\x12\x54\x29\x64\xb0\xc4\x94\x0b\xd4\x96\x38\x8f\x0f\x18\xdc\x78\x7c\x0e\x32\xf7\x5a\x3d\x73\x5e\xe4\xe1\xc3\x91\xaf\x65\x3e\x73\x0e\x71\x88\x77\x3e\x92\x38\xf4\x34\x8d\x0e\x4f\x86\x74\x7c\x11\xa0\xb8\x79\x82\x7e\xc1\x0f\xa1\x8a\x07\x14\x46\xd1\xa5\xa7\x73\x18\x65\x2e\x40\x9b\xb6\x68\x0b\x2e\x9a\xe6\x01\xf4\x69\x0b\x8c\xa0\xd0\xe5\x48\xe4\x8f\x4c\x0d\x45\x3e\x10\x72\x43\x5e\x9b\xf0\x36\xb9\xde\x46\x12\xbf\xd6\x8b\x91\xc4\xab\x66\x2a\xe1\x59\xcb\x84\xd9\xc0\x64\x7d\x40\x91\x9f\x03\x28\x5e\xd5\x1e\x44\xf1\xca\xb5\x21\x65\xc4\xcd\xf2\xd8\xcd\x06\x4d\x06\xdc\xfc\x3b\x41\xca\x39\xae\x37\xc0\xe2\x77\x51\xe5\xfe\x61\x64\xf1\xd6\xfc\x3d\xa1\x42\x56\xa9\xea\xab\xe3\x73\x6a\xb7\xa9\xd7\x1b\xce\xd2\x8c\xc6\x4a\xb7\x46\x11\xdc\x62\x21\x30\xd6\xbc\xf7\x1a\x7e\x92\x08\x85\x9e\x2d\xfc\x99\xaa\x75\xa7\xac\x28\x93\x0a\x49\x62\x9c\xde\x2a\x99\x28\x82\x23\x51\x13\x40\x52\x14\xd9\xde\x15\xa3\xab\x75\xd8\x91\x6c\x8b\xa0\xf7\x04\xcb\xfc\x9c\x32\x4f\x75\x1b\x87\xf7\x15\x4f\x77\xdd\xe2\x9e\x81\xf6\xcc\x71\x8e\xea\xd6\xa6\xf1\x47\xdc\x5f\x1b\x26\xd8\x18\x12\xcc\xeb\xde\x7f\x6b\x93\xae\x61\x37\x77\xe9\xdb\xc1\x83\xd6\xa7\x21\xa4\xda\x35\xaf\x49\x01\x0b\xc8\x49\xf1\x41\x2a\x41\xd9\xea\x57\xfb\x8f\xb3\x62\x3c\x7e\x97\xe0\x6c\xcf\xe2\x7a\x09\x6e\xed\x6e\x09\x5d\xf0\xf2\xce\xae\x35\xc8\x82\xc4\xd8\x31\x41\x61\x5e\x64\xfa\x70\x13\x50\xcd\x7c\x52\xdd\x1f\x98\xba\x78\xc8\x34\x2b\xaa\xa6\xbe\xda\x85\x77\xb5\x80\x5f\x41\x8a\x44\x6d\xc5\xe0\xf0\x7f\x6e\x59\x2c\xcd\x87\x93\xf3\x6b\xd1\xbe\x7d\x64\xf8\xd4\xd6\x32\xf5\xf9\x67\x66\x1a\xf1\x69\x58\x4d\xcf\x92\xc6\x08\xbf\xf9\x0e\x37\xc6\xed\xef\x65\x83\xfe\x36\xc7\xc1\x9e\x03\x9b\x62\xd4\xbe\xa7\x2c\xc1\x4f\x10\xc2\xf7\x75\xbb\x91\x95\xed\xbe\x1f\x74\x9f\x4e\xae\xe9\x60\x02\x55\xa3\x9c\xf9\x8f\xed\xaa\xea\x24\x0e\x2c\xe0\x4f\xb6\x60\xba\xed\x87\xa3\x4d\x6f\x36\xb8\x9a\x26\x9a\x43\x6b\x39\xc6\x95\xab\x94\x1d\xaf\xc9\x76\x74\xda\xff\x6c\x66\x33\xdc\xc7\x99\x59\x96\x75\x56\xd4\xbc\x67\xd0\x0d\xa9\x3c\xeb\x3c\xe2\xf5\xcc\x92\xf3\xec\xb8\x62\x86\x9c\xd0\x24\xe3\xa9\x80\xa6\xec\x68\xe1\x55\xc7\xc6\x1a\xcd\x7c\x15\xae\x71\x53\x4f\x52\xbb\x41\x7f\xe8\x21\x1a\x69\xed\xf1\xb6\x20\x42\x62\xe2\xdc\x62\x9d\xd6\x1b\xa1\x07\x94\x65\xd7\x71\x26\xff\xe1\xc3\xaf\x1a\x73\xec\x3d\x42\x14\x81\x3e\x41\x53\x81\x89\xed\xf5\x39\x58\x77\x54\xe6\xd6\xd2\xce\xa7\xff\x22\xd2\x4c\x4a\xa8\xf0\x79\x16\xda\xbe\x1d\x13\x6b\xba\x47\x8e\x88\xfa\x8c\x6e\x22\x4a\xb2\xf3\xac\xad\xa5\xff\xdf\xd6\x9e\xb6\xb7\x0a\xa3\x90\x78\x3f\x10\x4b\xb3\x15\x1a\x09\xbb\x57\x49\x83\x2e\x86\xc9\x3c\x1b\x88\xbf\xdd\xfb\xc6\xb4\x4e\x79\xa1\xaa\x18\xcf\x60\x3a\xa0\x67\x0e\x28\x04\x17\x15\xe9\x10\x28\xb7\x99\xd2\x5e\x1b\x90\x6f\x76\x4c\xe3\xf7\x6b\xd0\xb3\x54\xdb\xa2\xf9\x47\x1f\x63\x1e\xe7\x60\x8a\xd1\x46\xc3\x18\xd2\x0c\x94\x4f\x54\xc5\x6b\xd8\x85\x3f\xe2\xbe\xd5\xec\xcf\xc0\x0b\xb3\x50\xff\xc5\x9a\xbb\x05\xdd\xb8\xe9\xbd\xb1\x73\x18\xa0\xa9\x5b\x6b\x78\x22\x15\x0e\x47\x47\x95\x98\x33\x45\xd9\x16\x3b\x1d\xdd\xa3\xc6\x79\xaa\x17\xa0\x44\x4f\x8d\x1b\x38\x3e\x6a\x17\x1a\x3e\x12\x4e\xfb\xa9\x37\x1b\x3a\xc8\x0c\xd7\xcc\x85\x75\xf3\xcd\xbf\x83\xfe\x2d\xdb\x45\x70\x41\xca\xd2\x14\xbe\xbb\xd4\x55\x8e\xc2\x0e\xd5\x68\x39\x6f\x2e\x57\x75\xf9\x57\x53\x9a\x1b\xd6\x83\xe6\xba\xf2\xfa\x83\xa3\xa4\x07\x4f\x28\xa1\xac\x57\xd3\x5b\x6c\xfb\xe0\x66\x8d\x9e\x03\xa3\xd9\x89\x4d\xf2\x0c\xca\x63\x4e\x57\xfe\x3d\xb2\x70\x7b\x64\x31\xb8\x47\xde\x62\x4a\xb6\x99\xb2\xae\xd0\x1e\xb0\x5c\x9a\x4a\x6d\x85\xee\x71\x1b\x9e\xb9\x61\x29\x30\xa6\x29\x8d\x81\x18\x3e\x67\xb7\xcc\x01\x05\xa3\x97\x2c\xd6\xe4\x53\x8c\xc2\xed\xb1\xdd\xfd\xc0\x93\x21\xc7\x2a\xc1\xcb\x5a\x3b\xf4\xb3\x60\x70\xb5\x1b\xbd\xab\x38\x0a\xc5\x17\x70\x95\xf1\x38\x5c\x4c\x67\x36\x97\xf3\x99\xde\x90\x13\x94\xe6\x6b\x90\x97\xf3\xe8\xcb\x1f\x88\xa8\x6c\x3e\x87\xa9\x6c\x3c\x54\x65\x2a\xe1\x59\xd3\x3b\x1b\x9d\x66\x90\xba\x6c\x2e\xe5\x2e\x9b\xdf\x89\xbc\x7c\xa3\x28\x17\x6f\xa1\x5e\x3b\x3d\xfb\xea\x37\x76\xf2\x9b\xb9\xd6\xed\x8e\xd7\xde\x2b\xfb\x82\xe9\x15\xb8\x83\xf7\x2b\xce\x6d\xb9\xf6\x2f\xd5\xa3\x08\x32\xdd\xf7\x68\xe2\xe2\xae\x05\x34\x20\x08\x9e\x6c\x63\x4c\x80\x32\x78\xf9\x70\xff\xfc\x87\xef\xff\x1a\xf6\x07\xde\xa5\xb0\x95\x28\x00\x19\x59\x66\x08\xca\xdc\xcf\x5a\x0d\x35\x81\xa9\xee\x69\xe9\x8a\x71\x81\xe6\x52\x53\x6e\x0b\xf3\x64\x6e\x66\x34\x08\x10\xf6\x83\x2b\xc3\xea\x82\x22\x6c\x2c\xff\xac\x58\x0e\x3c\x36\x1c\x11\xb0\xcd\x38\x03\xfb\x89\x39\xab\x2b\x12\xa6\x1b\xaf\x77\x03\xec\x31\x8a\xe0\x66\x8d\xf1\x06\x44\xe7\x40\x14\x7e\x15\x6a\x79\x62\x65\x5f\x93\x5b\xb6\x2e\xe5\xba\xf7\xa6\x63\x57\x51\xb5\x98\x9f\x72\x7a\x5c\x3c\xcc\xcd\xec\x55\xf9\x2b\xde\x7b\xf9\xea\xd2\xb6\x4c\x77\x3f\x56\xb6\x0e\x12\xb8\xda\x1b\x99\x3c\x7a\x93\x3a\xbe\x87\x3c\xad\xe6\xd4\x33\x96\xd7\x93\x9f\x4b\x0f\xcf\xa1\x7e\x2d\x1a\x61\x3f\xfb\x57\x73\xf6\xa1\xa6\xfb\x4c\x63\x08\x47\x2c\x50\x2f\x9e\x80\xfb\xef\x31\xb0\xdc\x57\xd8\x15\xb6\xd9\xc5\x55\xc1\xca\x72\xd6\x9a\x68\x6a\xae\xbf\xc2\x7b\x22\x48\x2e\xc3\x07\x93\x94\x5a\xc2\xb5\xbf\x33\x59\xd6\xee\xb0\x75\x10\xab\x4f\x7a\x2d\x6e\xb6\xf0\x1f\x24\xde\xac\x04\xdf\xb2\xc4\xbd\x7a\x55\xaf\x5c\x61\x33\xd3\xcf\x54\xad\x6f\xac\xfc\x34\x56\x9f\xe6\xd0\x99\xf9\x86\x64\x19\x0a\x0d\xd1\x7d\x57\xb4\xc6\x0d\x78\x65\x6c\x7d\xbd\x59\x6b\x8b\x5d\x5b\xcf\x8a\xb3\xd7\x9f\x60\x8a\xc2\xc4\x60\x3a\xeb\x72\x9c\xab\x82\xa8\x75\x15\x67\xa7\xf6\x9e\xa8\xb5\x5d\xa0\xa7\x3c\x08\x4b\x60\x8a\x1f\xdd\xc0\x20\x98\xb9\x5f\x0c\x02\xf7\x9f\x25\x82\x99\xf7\xa1\x56\x8b\x2f\x20\x98\xff\x12\xfc\x12\x1c\x3d\x53\xf7\x10\x19\x85\x80\x85\x06\x7d\x2e\x72\xa2\x0c\x12\x4d\x03\xbb\x44\x9d\x8b\x65\x19\x18\xaa\xd8\x28\x2e\x4b\x70\x2f\x91\xd3\x59\x53\xf2\x34\x05\x86\x96\x58\x98\x17\xff\xd7\x3c\x41\x08\xba\xd8\x92\xeb\xb6\x8a\x7e\x34\x52\xc7\x10\xa3\xb1\x97\x87\xba\x33\xbc\x33\xd0\x6b\x46\x96\xe5\x74\xd6\x02\x5b\x67\x78\x85\xa7\x8d\xc2\x3b\xb6\x23\x19\x75\xa0\xfa\xe2\x53\x81\xb1\x79\x79\xd3\x5d\x2d\x5d\x73\xf8\x7b\xac\xb6\x24\xbb\x06\x3b\x53\xd9\x43\xf1\x11\x9c\xb5\xc7\xa5\x05\x90\xa2\x40\x96\x18\x8a\x2d\xe7\x20\x43\x57\x56\xe6\xfc\xdb\x4a\xef\x30\x0c\xad\xc3\x76\x44\x68\x4a\x3c\x74\xf5\x60\x95\xf3\x42\xcd\xeb\xa0\x8c\xde\x51\x9a\x79\xeb\xa7\x64\x3d\xe4\xbb\x85\x06\xfd\xa3\x0d\xa9\xbd\x3d\xf6\xca\xaf\xc1\x9b\x1b\x92\xa3\x0e\x80\xa7\x02\xdf\x0b\x9a\xbf\x22\x52\xb9\x52\x7c\xc1\x12\xcd\xe4\xd7\x37\x3c\xcf\x49\x59\x6a\x8b\x67\x23\x1b\x4d\x1f\xc2\xc7\x76\x9b\x76\x9f\x0f\x2c\xab\x0c\x3f\x01\x98\x8e\x07\x9c\x04\x4d\x2b\x57\x89\x5f\x0a\x9e\x7a\xd8\x6f\x00\xa0\x5f\x92\x61\x67\x67\x99\x5b\xf2\x9d\x65\x86\x86\x08\xc2\xd3\x9a\x66\x08\x6b\xc2\x92\x8c\xb2\x15\x98\xb8\xe9\x05\xba\x87\xe4\x6a\x98\x49\xd0\xc7\xb3\xd3\xb3\x4f\x8e\x8c\xdd\x03\xa9\x77\x71\xd6\xd9\xc4\x6e\x67\x9e\x09\x08\x65\x54\xd5\x58\x71\xe6\x93\xad\xfe\xab\xc1\xe4\x1d\xae\xa8\x54\x28\x86\xae\xa6\xc4\x54\x9f\x1b\xe6\xf0\x06\x9f\x06\x45\x66\xbe\xdb\x8b\xa3\x19\x1e\xe2\x35\xe6\xc4\xa9\x73\xaf\xdf\xba\x9a\xfe\x17\x00\x00\xff\xff\x01\xad\x90\x1f\x33\x2b\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x4e, 0x1c, 0x1, 0x10, 0x32, 0x84, 0xf6, 0x93, 0xe6, 0x89, 0x16, 0xf3, 0xd2, 0x3a, 0x4, 0xb8, 0xc5, 0x98, 0xf8, 0x98, 0xf8, 0x65, 0x9a, 0x48, 0x3e, 0xcc, 0x9d, 0x69, 0xda, 0x8a, 0x3f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"definitions/features.toml":           definitionsFeaturesToml,
	"definitions/fields.toml":             definitionsFieldsToml,
	"definitions/info_object_meta.toml":   definitionsInfo_object_metaToml,
	"definitions/info_storage_meta.toml":  definitionsInfo_storage_metaToml,
	"definitions/operations.toml":         definitionsOperationsToml,
	"definitions/pairs.toml":              definitionsPairsToml,
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": {nil, map[string]*bintree{
		"features.toml":          {definitionsFeaturesToml, map[string]*bintree{}},
		"fields.toml":            {definitionsFieldsToml, map[string]*bintree{}},
		"info_object_meta.toml":  {definitionsInfo_object_metaToml, map[string]*bintree{}},
		"info_storage_meta.toml": {definitionsInfo_storage_metaToml, map[string]*bintree{}},
		"operations.toml":        {definitionsOperationsToml, map[string]*bintree{}},
		"pairs.toml":             {definitionsPairsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
