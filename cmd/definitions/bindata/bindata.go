// Code generated by go-bindata. DO NOT EDIT.
// sources:
// definitions/features.toml (1.578kB)
// definitions/fields.toml (629B)
// definitions/info_object_meta.toml (932B)
// definitions/info_storage_meta.toml (1.139kB)
// definitions/operations.toml (8.691kB)
// definitions/pairs.toml (1.426kB)
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (2.388kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (513B)
// cmd/definitions/tmpl/service.tmpl (11.025kB)

// +build tools

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _definitionsFeaturesToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8b\x13\x41\x10\x85\xef\xf3\x2b\x1e\x7b\x51\x21\x09\x7a\x11\x15\x3c\x8b\x37\x41\x6f\x8b\x84\xca\x74\xc5\x29\xd3\xd3\x35\x54\xd7\x4c\xd8\x7f\x2f\x3d\x93\xd9\x0d\x21\x13\xc4\xdd\x83\xb7\x24\xdd\xf5\xea\xbd\xf7\x35\xb9\x8f\xaa\x99\xb7\x1d\x89\xfd\xac\x02\xe7\xda\xa4\x73\xd1\x84\xcf\xb8\xbb\xbb\xab\x9e\x4e\xb1\x67\xf2\xde\x18\x92\x11\x38\xcb\xaf\xc4\x01\x7b\x35\xf4\x99\x2d\xe3\xd8\x28\x82\xa6\x57\x8e\x23\x25\x47\x76\x93\xda\x31\x0e\xd6\x0d\xd7\x87\xbc\xa9\xaa\xaf\x7b\x78\x23\xf9\x5c\x89\x13\xed\x22\x87\x15\xbc\x61\x64\xb6\x41\x6a\xc6\x51\x62\x44\x52\x87\xb1\xf7\x96\x40\x09\x6c\xa6\x36\xae\x2b\xbf\xe7\xbe\xeb\xd4\x26\xf9\x22\xfc\xe3\x5c\xf5\x48\x19\x92\xdc\x34\xf4\x35\x07\x48\xc2\x97\xef\xdf\xd6\xef\xde\x7e\xdc\x54\x25\x51\x75\x3f\x88\x79\x4f\x71\x1b\xae\x47\x3e\x3b\x5e\xcc\x4c\x8f\x5e\xbd\x21\x47\x50\xce\x25\x7a\x43\x03\x23\x91\xcb\xc0\x28\xe3\xb3\xcf\x5d\x3f\xd5\x92\xe1\x8a\xce\x74\x90\xc0\xc8\xd2\xf6\x91\x9c\x03\xb4\x63\xa3\xe2\xa0\x64\x59\xe3\x4a\x4d\x41\xf2\xd8\x13\x5e\x97\x9e\x02\xef\xa9\x8f\x8e\x1d\x37\x34\x88\xda\x9b\x2b\xf5\x8d\x67\x8c\x28\x07\x86\x5c\x38\xa4\xf4\x70\x6e\x6f\x73\x7d\xe7\x32\x9a\x39\xd6\x53\x82\xa2\x36\xbb\x29\x8d\xd7\xc6\xe4\x5c\x2a\x5c\x9d\x3e\xaf\x10\x25\xfb\x0a\x81\x23\x97\x6f\x94\x02\xb2\x42\xd3\x3f\xe3\xd3\xdd\x6f\xae\x7d\xdb\xb2\x53\x20\xa7\x5b\x28\x2f\xae\x3e\x07\xeb\x24\x85\x47\xa9\xff\x18\xf1\x82\xd5\x17\xc0\x7d\xa9\x7c\x8e\xbe\x8c\x4f\xa8\xb3\x93\xbf\x04\xe8\x28\xe9\x70\x8b\x6e\x39\x7f\x0e\xd2\x39\x5f\xb9\x5e\xb4\x96\x08\x2d\x37\x64\x7d\x42\xad\x6d\x47\x2e\xbb\xc8\x68\x35\xf0\xa7\xd3\xbb\x1f\x15\x31\x08\xcd\xdb\x5a\xf6\x46\x43\x5e\x8d\x2f\x86\x62\xd4\x23\x8c\x29\x4c\xf7\xf6\xa6\x2d\x34\x86\x75\xf6\x87\x78\x9a\x9d\xca\x5e\xa0\x56\xfe\x0d\x6f\xfb\x92\x34\x6f\xa6\x0c\xf5\x86\x6d\xbe\xf3\x77\x40\x3e\xbc\x3f\xf1\xf8\x13\x00\x00\xff\xff\x02\x8a\xc0\x31\x2a\x06\x00\x00")

func definitionsFeaturesTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFeaturesToml,
		"definitions/features.toml",
	)
}

func definitionsFeaturesToml() (*asset, error) {
	bytes, err := definitionsFeaturesTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/features.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0xde, 0x64, 0x57, 0x6f, 0xe4, 0xa1, 0x28, 0x9a, 0xdf, 0xf5, 0xa, 0x78, 0xe3, 0xe7, 0xe5, 0x4c, 0x35, 0xce, 0xe9, 0xb8, 0x4b, 0x32, 0xb7, 0xb2, 0xdc, 0x74, 0xc5, 0x98, 0xd5, 0x9f, 0x28}}
	return a, nil
}

var _definitionsFieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xbd\x4e\xc3\x40\x10\x84\x7b\x3f\x45\x94\x32\x85\x2b\x44\x47\x43\x47\x81\x88\xa0\xa0\xb0\x52\xac\xed\x8d\x59\x48\xee\xac\xb9\x41\xfc\x3c\x3d\xb2\x93\xe8\xd6\xe4\xda\x6f\xd6\xdf\xee\x8d\xdc\xb4\xb6\xab\xf8\x33\xea\xea\x6e\xb5\xde\xdc\x1f\x62\xf7\xf1\x40\x85\x30\x62\x5d\x55\x4d\x6b\x7d\x8e\x13\x61\x61\x38\xe3\x94\x79\xb3\xcb\x49\x9f\x58\xfa\x40\x81\x8c\x15\x38\xd9\x2d\xf4\xfa\x9d\xb9\x05\x4e\xf4\xa8\x14\x77\xd3\x0b\x23\x64\xd0\x47\xa5\x4c\x69\x58\xcc\xdf\xde\xcc\x4c\x8e\x5a\xda\x1a\x9d\xe6\xa9\x7d\xd7\x6e\xf6\xc7\xfd\x3e\x29\x0b\x9a\x68\x57\xf3\xbe\x8b\x51\x0c\xee\xd5\x75\x5d\x6f\xc5\xce\x09\x9c\x6f\xb3\x15\xf0\x82\x17\x35\xb9\x84\x6f\xa5\x83\x47\xfb\xa7\xf1\xfb\x5d\x83\x16\xeb\x67\x95\x5e\x67\x9e\xec\x57\x0b\xaf\x49\xe8\x4a\x2b\x12\xed\xba\x5c\xf8\x3d\x89\x11\x4e\x78\x19\x99\xa2\x4f\x1c\x4a\xce\xaf\xc5\x65\xaf\x30\x9e\xc6\x29\x18\xb4\xf0\x3f\xfc\x05\x00\x00\xff\xff\x5e\x00\x81\xc5\x75\x02\x00\x00")

func definitionsFieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFieldsToml,
		"definitions/fields.toml",
	)
}

func definitionsFieldsToml() (*asset, error) {
	bytes, err := definitionsFieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xb, 0x49, 0xd5, 0x55, 0xd0, 0x53, 0xe5, 0xf1, 0x7e, 0x39, 0x5e, 0x69, 0x19, 0x7c, 0x8a, 0xfe, 0xc, 0x85, 0x91, 0xea, 0x1c, 0xef, 0xdc, 0x3f, 0x33, 0x62, 0x5b, 0x2c, 0xfe, 0xb1, 0x7}}
	return a, nil
}

var _definitionsInfo_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xb1\x8e\xd4\x40\x0c\xed\xf3\x15\xd6\x36\x57\xe5\x2a\xa0\xbb\x02\xe9\x1a\x24\x56\x87\xc4\x21\x8a\xd5\x15\x73\x3b\x4e\x62\x36\x33\x1e\x6c\x07\x58\x21\xfe\x1d\xcd\xcc\x45\x1b\xb2\x41\xba\x6e\xc6\x7e\x7e\xcf\x7e\xf6\xc1\xa5\x84\xd1\xb7\xdc\x75\x8a\xf6\xd4\xd8\x39\x21\xdc\xc1\x8e\xa2\xbd\x7b\xb3\x6b\x3c\xea\x51\x28\x19\x71\xcc\xd1\xf7\x05\xfc\x50\xb0\x40\x0a\x36\x20\xd4\x4a\xe0\xae\xfc\x2a\x1d\xf0\xf3\x37\x3c\xda\xed\xae\x69\x0e\x47\x8e\x86\xd1\xda\x11\x63\x6f\xc3\x95\xc2\x05\x10\xfc\xdb\x4b\x56\x4d\x28\xf6\xcb\x74\xce\x6c\xe5\xd1\x5c\xbf\x15\x27\x7f\x1d\xc5\x5f\x89\xc5\xe0\x0e\x4c\x26\x5c\x0f\xf7\xe1\x7e\x1e\x69\x8a\xf4\x7d\x42\x38\xe1\x19\x28\x82\x1a\x8b\xeb\xb1\x0c\x33\x3a\xb5\x36\xb0\xa7\x8e\x70\xc1\x6f\x14\xf0\xf6\x91\x02\x16\x0c\xc5\x53\x6b\x4e\xfa\xa5\x9f\x73\x07\x2b\xcd\x8f\x14\x4f\x8f\x05\x3a\x6b\xeb\x39\x64\x02\xa8\x04\xd0\xb1\x40\xf9\x2f\x1c\x0d\xec\x17\x4e\x3c\x94\xc4\x9e\x3d\xae\xe7\x6b\x0e\x61\x1a\x8d\x92\x13\x6b\xb7\xdc\x58\xf5\xb2\x9f\xc1\x17\x23\xf2\x0f\xc8\xe7\xe5\x96\xe7\xa2\x89\xe4\x96\xcb\x7c\x95\xc1\x9f\x9c\x0d\x99\x19\xc9\x06\x94\x7a\x2e\xcf\xca\xe3\x64\x59\xc9\x06\xe0\x1a\x14\x1c\x9d\xd1\x8f\x97\xa0\xf1\x4f\x27\x5e\xe7\x35\xdc\x28\x7c\x65\x39\xdd\x93\x80\xc7\x7c\x6b\x0a\x1c\x61\x52\x94\x1b\x05\x8a\x69\xaa\xed\xe9\x59\x0d\x43\x1b\xd0\x9c\x77\xe6\xfe\x39\x3b\x94\xce\x1d\xf1\xf7\x9f\x2b\x07\x3e\x97\xa2\xfd\x4b\x4d\x51\x44\x85\x4a\x05\x1e\x3b\x8a\xe8\x61\xa6\x2c\x32\x59\x77\x43\x24\xb8\x74\xa8\x96\x3c\xfd\xc7\xec\x2f\x8a\xb2\x16\xca\x64\x5b\x32\x7f\x03\x00\x00\xff\xff\x6b\x55\xfd\x86\xa4\x03\x00\x00")

func definitionsInfo_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_object_metaToml,
		"definitions/info_object_meta.toml",
	)
}

func definitionsInfo_object_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0xc7, 0x12, 0x2e, 0xc1, 0x1f, 0x6, 0x2a, 0xc2, 0xf5, 0x95, 0x4b, 0x90, 0x32, 0x59, 0x47, 0x96, 0xc7, 0x79, 0xa4, 0x2e, 0x79, 0x2f, 0x9b, 0xb9, 0xb8, 0xbf, 0x8, 0xb1, 0xc3, 0x8c, 0x18}}
	return a, nil
}

var _definitionsInfo_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd2\xbd\x72\xab\x30\x10\x05\xe0\x5e\x4f\xa1\xa1\xe7\x56\x77\xd2\xf9\x11\x5c\xa5\xf4\xa4\x58\xa3\xc5\xd9\x09\xfa\x99\xd5\x12\x43\x32\x79\xf7\x8c\x84\x21\x63\x4c\x1c\xdb\x94\x08\x9d\xef\x2c\x48\x3b\x08\x01\x9d\x29\x5d\x6b\xf7\xc8\xa5\x85\x8e\x6c\x6b\x5f\x94\xf4\x01\xf5\x46\x17\xe4\xa4\x50\x06\x63\xc5\x14\x84\xbc\x4b\x6b\x5b\xe8\xf4\x10\xd3\x43\x2c\x6a\x72\xe3\x8a\x0f\xc8\x90\x76\xfe\x2b\x94\x1a\xf5\x48\x1f\xb8\x68\x3f\xfd\xbf\xa6\xa7\x58\xa2\x03\xf2\x55\x5e\xbc\x40\xf3\x68\x49\x0e\x4f\x55\x8b\x35\x95\x0f\xfd\xbd\x7c\xda\x36\xa8\xb5\x67\x9d\x84\x19\x5a\xa3\x54\xaf\xeb\xd4\x4c\xcc\xd8\xc6\x57\xf9\xe1\x07\x8b\xc2\xe4\x0e\xe9\x9d\xf5\xef\xb8\xae\x31\x09\xb3\x42\xdb\x36\x42\x01\x58\xee\xbd\x43\x59\x4e\xc1\xd3\x2d\x4a\xbf\x7f\xc2\x7e\x2d\x79\x64\xfc\x0c\xe6\x6f\x30\x58\x93\x43\xa3\xf7\xbd\x8e\xe2\x19\x0e\xc8\x8b\x3e\xb9\x9b\xfc\x61\xdb\x0d\xbe\x03\x8b\x97\x27\x82\x5d\xf0\x2c\x7a\xa3\x85\x5b\x54\x6a\x17\xfb\x28\x68\x4b\x8b\x02\x06\x04\xce\xea\x91\x6b\xa8\xf0\xf3\xeb\x62\x88\xe7\x1c\xda\x9e\x32\xb9\x16\xa3\x1e\xa8\x69\x9e\x91\xcc\xc3\x1c\x3d\xbf\x95\x86\xf8\xef\x81\x8e\x4c\xb2\xf2\xc6\x64\xe2\xec\x34\xbf\x03\x00\x00\xff\xff\x41\xde\xf8\x57\x73\x04\x00\x00")

func definitionsInfo_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_storage_metaToml,
		"definitions/info_storage_meta.toml",
	)
}

func definitionsInfo_storage_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xdc, 0x18, 0x27, 0xc0, 0x7d, 0xb9, 0x57, 0x8b, 0xe9, 0x90, 0xfd, 0xf8, 0xb3, 0x2, 0x40, 0x16, 0xce, 0x94, 0xf9, 0x18, 0x51, 0x52, 0x7a, 0xff, 0x6b, 0x10, 0x2d, 0x50, 0x8, 0x2e, 0xb0}}
	return a, nil
}

var _definitionsOperationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x93\xdb\xb8\x11\xbe\xeb\x57\x74\x69\x0f\xbe\xcc\xa8\xf6\x9c\x2a\x1f\xbc\x33\x4e\xc5\x55\x7e\x6c\xc5\xbb\xd9\x83\x6b\xca\x82\xc8\xa6\x88\x18\x04\xb8\x00\x28\xad\xf2\xeb\x53\x8d\x06\x49\xf0\x25\xd1\xb3\x93\x5c\x92\x8b\x4b\x43\xa2\x1f\x68\x7c\xfd\xe1\x03\xe8\x2f\xa2\xae\x51\xe7\x68\x9f\x36\x39\xba\xcc\xca\xda\x4b\xa3\xe1\x35\x6c\xa5\x03\x5f\x22\x48\xed\xd1\x16\x22\x43\x28\x8c\x85\x37\x61\x34\x58\x54\xc2\x63\x0e\xa6\x46\x2b\xc8\xc0\xed\xb6\x9b\x4d\xe7\x6b\x67\xea\x5d\x66\x51\x78\xfc\xca\x8f\x9e\x36\xb5\xb0\xa2\x72\xf0\x1a\xbe\x6c\x6b\xe1\xcb\xed\xd3\xc6\xa2\x6b\x94\xe7\x47\x66\x3b\x09\xbf\xdd\x6e\xce\x52\x29\x60\x3f\x20\x34\xb0\x2b\x30\x87\x7f\x62\xe6\x77\x9b\xcd\x0f\x3f\xc0\x4f\x58\x8a\x93\x34\x76\xb3\xb9\x87\x87\x30\x30\x26\xf8\xf9\x6f\x9f\x7e\x7d\xff\x38\x31\x16\x07\x85\xd1\x01\x9c\xa5\x2f\xa1\x36\x4e\x86\x88\x3f\x82\xd0\x39\x38\xf9\x2f\x84\x1f\x77\x0b\xde\x3e\x7e\xfa\x05\x2c\xfa\xc6\x6a\xf2\x88\xd6\x1a\x0b\x82\xab\x14\x7d\xe2\x1f\xd2\xf9\xdd\x06\xe0\x1e\x3e\xa3\x3d\xc9\x0c\xbb\x4c\x4a\xcc\xbe\x85\x18\x39\x2a\xf4\x98\x5a\xc9\x82\x0d\xdd\x6e\x43\xd3\x1e\xd6\xf1\x6c\x65\x52\xc6\x51\x91\x42\x85\x62\x5d\x32\xa3\x3d\x6a\x0f\xde\x4c\x8b\xb5\x4d\xeb\x6f\xb6\x77\xb0\xb5\xf4\x0f\x4d\x77\xb4\x12\x7a\xfb\xb4\x61\xa3\xaf\x95\xc9\x91\x82\xb0\xab\xc9\xfa\x9a\xaa\x92\xfe\x6a\x62\x3c\x24\x4c\xba\x90\x5a\xba\x32\x49\xac\xb6\x26\x43\xe7\xc6\x99\x5d\x09\x7e\x50\x26\xfb\xb6\x16\xa7\x3f\xd1\xe0\x25\x98\x46\x4f\x09\x4a\xc3\x93\x17\x00\x29\x68\x3c\x43\x70\x36\x0f\xd3\x16\x57\x9c\xde\x9f\x81\x95\x2f\x85\x87\x52\x38\xd0\xc2\xcb\x13\x82\x6b\xea\xda\x58\x1f\x26\xbf\x37\x27\xb4\x01\x37\x7b\xc8\x0d\x3a\xfd\xca\xc3\xc7\xb7\x6f\x1f\x09\x1a\x8c\xc3\xb1\x6f\x07\xc6\x82\x36\x73\x31\x5a\x07\xa5\x38\xe1\xad\x60\xcf\xc1\x7a\xb2\x18\x0c\xf5\xb8\x16\x73\x80\x0a\x03\x06\x40\xe7\x62\x5f\xc5\xf7\x1d\x6c\x0f\x32\xbf\x0d\xf3\xe0\x69\x0c\x0f\x53\x1d\xa4\xbe\x9a\x53\x1c\xc2\x89\x38\x82\x61\xe8\xbf\xc5\xc6\x3b\xc8\xdc\xad\x0b\xae\xa4\xf3\xd7\x22\xd3\xfb\x36\xec\x01\x95\xd1\x47\x2a\x89\x2f\xa5\x5b\x88\x3e\x2c\xc1\x41\x5e\x49\x23\x33\xb5\x5c\xdb\x6b\x0f\xa6\xbe\xec\x7a\x23\xae\x5b\x7d\x19\xb4\x93\xb3\x19\x4d\x3e\x77\xfe\x4a\x13\x99\xfa\x42\xa5\xfb\xc4\x48\x31\x16\xaa\x46\x79\x59\xf7\x94\x2d\x75\x08\xef\x18\x9f\x33\x5b\x00\x79\x30\x5a\x5d\xd8\x97\xd1\x18\x50\x18\x9e\xd0\x1f\x6d\x4f\xa6\x20\x7f\xfc\xf4\xf1\xd5\x2f\x5d\x7b\xb4\xc8\xe6\x5c\x40\x1b\x7d\x8f\x55\xed\x2f\x90\x4b\x8b\x99\x37\xf6\x42\x79\x85\xb7\x85\x54\xe8\xc0\x62\xd6\x58\x27\x4f\xa8\x2e\xec\xf7\x57\x87\xb6\x73\x27\xab\x5a\x61\x45\x60\xbd\xe2\x50\x04\xf2\xae\x2f\xa9\x2f\x38\x5c\x68\xaa\x95\x43\x55\xb0\xdf\x07\x76\x40\x51\x19\xf9\xbd\x83\xd8\x76\x91\x43\xf6\x6f\xad\xe5\x12\x7e\x30\x39\xbe\xd3\x27\xa1\x64\xbe\xdf\xb5\xe5\xb9\x4e\x3a\xb9\xf3\x43\x62\x78\x69\xd6\x99\x04\xf8\xcf\x33\x4f\x12\x32\x61\x9f\x7b\x78\x03\xae\xc9\x68\x13\x2a\x9a\x08\x3e\x53\xf3\x36\x01\xae\x34\x8d\xca\xe1\x40\x64\x43\x4b\xe8\xf1\x0e\xce\xa5\xcc\x4a\xa8\x50\x68\x37\x72\xfb\xca\x75\x9c\x44\xa1\x2b\xf4\x22\x17\x5e\x24\x5e\x02\x6a\x45\x85\x54\x62\x67\xb3\x0e\x88\x4c\x81\xb4\x92\x2b\x7b\xed\xb1\x5d\xf4\x5d\x67\x98\x6c\x63\xb9\x9c\xba\x99\xee\x4f\xb9\xb4\xb3\x04\xb1\xb0\xe5\x6d\xbe\x14\xe8\xb3\x72\x6d\x86\x7f\xa5\xc1\x21\xbb\x68\x46\xf9\x85\x9f\xd3\xfd\xf5\x0e\xb6\x8d\x55\xcb\x8c\x10\xcc\xa0\xb0\xa6\x02\x01\x47\x79\x42\x0d\x8d\x55\x04\x28\x32\x9f\xf6\x7f\x88\xfd\x9d\xdb\xea\x14\x0a\x1c\xb5\xd3\x0c\xab\xc0\xf0\x1c\x20\x58\xfc\xbd\x91\x56\xea\x23\xcf\x90\x5e\x35\x56\xb5\xa0\xa8\x08\xdd\xeb\x4a\xfe\xc1\x9c\x70\xd7\xd9\x50\xbd\xe9\xc7\x77\xf3\x2f\x19\xf5\x5b\xd7\x4d\xb2\xa5\xa8\x4c\xad\x15\xff\x7a\x36\xd9\x72\xe0\x39\x6e\xbc\x4a\xa9\xcb\x66\x53\xf6\xfc\xc0\x63\xff\x0c\x7b\x06\x17\xff\x67\xcf\xd9\x96\x61\x04\x74\x1d\x13\xfd\xfd\x97\xe8\x93\x55\x82\xb0\x7e\x75\xbf\xb4\x06\x4b\x07\x84\xc4\x63\xc2\xae\xdd\xd3\x97\x3a\x28\x74\x0e\x97\x0e\xb3\x7d\xa2\xdf\xcd\x69\x93\xd2\xf4\x02\x3b\x99\xc7\x4a\x91\xdd\x27\x7a\x43\x68\x4b\x9d\xe3\x1f\x13\xa9\x7d\x07\x5b\x32\x9e\xca\xcd\xf0\x74\xa6\xde\x11\x34\xb7\x32\x6d\xc7\xa5\x19\x42\x53\x2b\x23\xf2\x28\xaa\xb4\xf3\xb6\xc9\x7c\xaf\x2a\x67\x26\x40\x56\x33\x8a\x7c\x21\xb7\x20\xca\x6f\xe4\x15\x84\x79\x70\x3b\xd6\xe5\x8b\x85\x1c\x96\xac\x9e\x91\xe6\x6d\x3e\xb5\x38\xae\xc5\xf9\xcf\xe2\x88\x33\x10\x8f\xad\xd8\x92\x81\x15\x3a\x37\x15\x2f\xfb\xae\x8b\x90\xe0\x9e\xfe\x7e\x29\xc8\x93\xaf\x1b\x37\x38\x21\xeb\x67\xe2\xbd\x4b\x9d\x91\xce\x99\xaf\x02\xb9\xab\x31\x93\x85\xcc\xc0\x14\x85\xc3\x9b\x40\xe7\x51\xb7\x0f\x95\x94\x01\x25\x66\x51\xac\x97\x50\x7f\xa7\xc1\xbb\xc4\x8c\x66\x14\x7e\xce\x4f\xa6\xb6\xe6\x24\x73\x2a\xf1\x59\x5c\x5a\xa6\xcd\x84\x86\x60\x93\x54\xeb\xa6\xde\x63\x35\xb6\xf9\x12\x37\xfd\x69\xbe\xe4\xb5\x12\x52\x7b\x21\x75\xd2\x74\xce\x1b\x4b\xcb\x16\xed\x98\x45\x5b\x27\x3d\x94\x56\x88\xd3\xe8\xc9\x82\xd4\xce\x0b\x9d\xe1\x30\x67\x2d\xaa\xf1\x8d\x15\x59\xe0\x20\x6b\x0a\xc8\x3b\xd8\x7c\xc0\xb8\xbb\x89\x95\xc1\x86\x8e\x8f\xb8\xd0\xf5\x47\xf4\x20\x20\xe8\x85\xa9\xe3\xb0\xae\xad\x94\x7a\xde\x8c\x88\x55\xae\xf0\x8d\x50\x6a\x1a\xd6\x41\xa3\x73\xb4\x4c\x3e\x7d\xf8\x61\x30\xc9\xa1\xa2\xed\x3a\x88\x8e\x16\x9c\xd7\x3b\x7a\x48\xcb\x3f\x85\x5b\x2d\xa4\x8d\x5d\xd5\xb7\xca\x32\x7b\xb4\x6b\xd5\xc9\xd2\xa0\x95\x17\x45\xe9\x23\x0f\x0f\x22\x34\x6f\x7f\x3f\x5b\x98\x5a\x64\x8d\xa9\xd4\x55\x21\xca\xc3\xbe\xd2\x0a\x0c\x84\x67\x97\x8e\x74\x20\x73\xac\x6a\x43\x6c\x13\x03\xf7\xe2\xa9\x9d\xa2\x3a\x8b\x8b\x6b\xe9\x4e\x4b\xc5\x7c\xc7\xc3\xa3\xa3\x48\x8b\x1a\x4f\x68\x3b\xc5\xca\x3b\xdb\x47\xe3\xdf\x12\x17\xee\xd3\xf1\xc3\x69\xcd\xdf\xfd\x75\x12\x92\x29\x34\x5d\xc5\x56\x8a\xcd\xc3\x2e\xc6\xcf\x1a\x6b\xa9\x0a\x1d\xf8\x5a\xab\x11\xd0\xe8\xf1\xf6\x69\xa3\x4c\x26\x14\xbc\x06\x6f\x1b\x1c\x85\x63\x84\x5f\x83\x0c\xef\xbe\x0c\x98\xc1\xf6\x23\x97\x11\x14\xd3\xe4\x26\xe9\x79\x7e\xfe\x04\x39\xba\xb5\x6f\x81\x90\x63\x21\x1a\xe5\x61\xff\x5e\xba\x70\x30\x08\x27\x82\xd1\xe0\x1e\x10\xdd\xb0\x47\x69\xf7\xe1\x43\x83\x69\x7c\x28\x3c\x2f\x41\xd0\xdf\xff\x90\xd6\x37\x42\xd1\x90\xd4\xd9\x70\xc9\xf6\x9f\xbd\xf0\x7b\xa2\x74\x45\x2d\xc8\x9e\xf7\x73\x6b\x65\x51\x2c\x5c\xc3\xd3\x9b\x10\x9c\x4e\x3f\xaf\x1c\xc4\xb5\x99\x39\x8c\x9f\x07\xc5\x1e\xed\x75\x24\xef\xcc\xd7\x4c\x28\x75\x10\xd9\xb7\x99\xad\x6f\x98\x4f\xcb\xf8\xb7\x75\xc3\x12\x23\x0c\x90\xb2\x46\x5c\x24\x1f\x76\xa8\xde\x42\x5f\x40\xd4\x12\xb2\xd0\xbf\xf3\x62\x23\x15\x1a\x0e\x75\x1e\x8c\xde\xfc\xfc\x2e\x1a\x8d\x87\x89\x2c\xc3\xda\x43\x7f\x40\x04\x4a\x9e\x24\x49\x8c\x4d\xa9\xcf\xad\x8e\xf3\xe2\x06\xb4\x87\x73\x5f\xa9\xad\xc8\x2d\x88\x80\x65\x42\x0b\x6d\x41\x52\x17\x06\x4c\x91\xdc\x41\x4f\x41\x4e\x56\x37\x67\x54\x4a\x3d\x3e\xc0\x3e\x04\x93\x70\xa2\xcc\x65\x51\x60\xe8\xfb\x0e\xf6\x51\x5d\x12\xb8\xfb\xb7\x83\xba\x2c\x7e\x17\x93\x45\x6c\x53\xa9\x8f\x69\x2e\x24\x99\x85\xcf\xca\x99\x8a\x06\x05\x37\x7b\xa5\x94\x7e\xda\xea\xeb\x7b\x1d\xbb\x0b\xf5\x65\x99\x18\x4e\xa3\x7c\xb1\x1f\x7a\x68\x5a\xd1\xdf\xc2\xb8\xff\xf1\xef\x39\xa3\x3b\x01\xae\xdd\xf7\x5d\x0a\x3c\xeb\x42\x80\x19\x1d\x73\xe2\x47\x0e\x6a\xf1\xf7\x06\x5d\xb7\xa5\x29\xa9\x57\x7f\x38\xa4\xb1\xbd\x4d\x72\x0a\xa2\x07\xb3\x70\xf3\xc2\x1e\x27\x47\x81\xf9\x9e\xfd\x6d\x40\x59\xe4\x31\xe9\xd1\x01\xa0\xf6\xe4\x7d\x1f\xa6\xbf\xe7\x00\xfb\xd8\x7d\x87\x78\xa4\xa3\x75\x23\x60\x1d\x9c\x51\x8d\xc7\xb8\x9f\xdd\xc3\xbb\xa2\xb7\xd0\xa6\xc5\xc3\x5d\x24\xb2\xf7\x14\x33\x52\xc7\x52\x32\xfd\xfd\x2a\x7b\xe3\x54\xd8\xcf\x5f\x02\xa0\xfa\xa7\xd2\xd1\x9e\x7a\xa9\x12\xf3\x69\xa8\x28\xa3\xc2\xa2\x0d\x86\xf2\x29\x3d\xa5\xf0\xd9\x34\x26\x21\x69\x5e\x6b\xc2\xb6\x3d\x38\x77\xa7\x17\x1b\xf3\x5c\xe2\xe0\x9e\x33\xf4\x47\x08\xd0\x36\x45\xd7\x0f\x8c\xf0\x34\xc3\x64\x45\x28\x14\x43\x30\x6e\xd9\xd4\x4a\x71\xb3\xbe\x4f\x53\x7b\x18\x69\x85\x13\xcb\x80\x80\x2f\x28\x50\xf8\xc6\x22\x67\xd5\x66\xd4\xee\x67\xc3\x66\xed\x15\xa9\x6b\x5b\x0b\x75\xf8\xff\x0d\x41\xec\xb7\x9e\x7a\x41\x7a\xc2\x78\x4c\xfe\x77\x00\x00\x00\xff\xff\x8c\x1b\x8e\x75\xf3\x21\x00\x00")

func definitionsOperationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsToml,
		"definitions/operations.toml",
	)
}

func definitionsOperationsToml() (*asset, error) {
	bytes, err := definitionsOperationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x5b, 0xf1, 0xae, 0x49, 0x31, 0x10, 0x0, 0x5c, 0x86, 0xdc, 0x65, 0x3, 0x58, 0x5f, 0x56, 0xc9, 0xf4, 0xfe, 0xb2, 0xc0, 0x7, 0x71, 0x68, 0xde, 0x32, 0xa5, 0xe9, 0x2e, 0xea, 0x3, 0x33}}
	return a, nil
}

var _definitionsPairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x8e\xd3\x40\x0c\xbe\xe7\x29\xac\x9e\x40\x5a\x75\x2f\xc0\x8d\x1b\x42\x42\x62\xc5\x01\x38\xad\x56\xd1\x64\xc6\xb3\x31\x9d\x8c\x83\xc7\x69\x08\x4f\x8f\x66\xd2\x36\x51\xd9\x76\x17\x6e\xd5\xd8\xdf\x9f\xed\xf4\xde\x72\x54\x8c\x5a\x77\xee\xed\x43\xa5\x53\x8f\xf0\x1e\x36\x49\x85\xe2\xe3\xa6\xaa\x4e\xe5\x5c\xb9\x54\xa7\x38\x18\x25\x8e\xb5\xf2\x0e\xe3\xdf\x5d\x0e\x93\x15\xea\x73\x4b\x79\xee\xd1\x92\x9f\x40\x5b\x84\x35\x1c\x0a\x1c\x3c\x0b\x04\x4a\x5a\xd8\x05\x1d\x46\x25\x13\x5e\xcc\xda\xf2\x08\xca\xd0\x0b\xef\xc9\x21\x2c\x0c\x85\x38\xa1\xec\xc9\x22\xe4\x9f\xca\x62\x1e\x31\xcb\x60\x74\x3d\x53\xd4\xff\x15\x39\xe2\xaf\x49\xfc\xea\x49\x56\x13\x54\xea\x70\xfb\x61\x90\x92\xfc\xa2\xce\xd8\x62\x2c\x73\x1a\x24\x80\xa0\x0e\x12\xd1\x41\x33\x81\xa0\xb1\x2d\x8c\x14\x02\xcc\xcc\x59\x83\xa2\xa2\x58\xec\x95\x65\x11\xfa\xb4\x3c\xe6\x9e\x3c\xd9\xba\x63\xb7\xb2\xf2\x99\x92\xde\xb1\x2b\x14\x81\x6d\x71\xf4\x4f\x4b\x3c\x82\xae\xc4\x8f\xa6\x7b\xe2\x7c\xae\x70\x1e\xb0\x90\x81\x99\x80\x9b\x1f\x68\xcf\x9d\x7f\x29\x8f\xb3\xf7\x33\xae\xa5\x04\x2d\xc5\x72\x4c\xec\x7d\xc2\xd5\x8e\x29\xea\xbb\x37\x17\x4d\xcc\xdd\x25\x92\xb6\x94\x40\xf0\xe7\x80\x49\x6f\x4e\xce\xca\xf0\x13\xe2\x2e\x5f\x42\x69\x39\x40\x1a\xf4\x2c\x98\x57\xe4\xb2\x6c\x37\x04\xa5\xde\x88\xd6\xe4\x9e\xfa\x82\x88\x6b\x6b\x42\x68\x8c\xdd\x2d\x65\x3f\x44\xfb\xea\xfe\xa1\x99\x14\x5f\x5f\xb9\x0e\xa3\xa0\xec\x18\x70\x8f\x32\x41\xbe\x29\x18\x67\x65\x70\x46\x0d\x78\xe1\x0e\x12\x0f\x62\xcb\x10\x13\xfd\xc6\x97\xe6\xcf\xbd\xcf\xa5\xe7\x18\xa6\x59\x2d\x50\x47\x8a\x0e\x0e\x7f\x17\x45\x3d\x2b\x8e\x2c\xbb\xda\x91\x3c\xbb\xfb\xcd\xa6\x5a\xaf\x3f\xe3\xc0\x91\x5c\x38\xa9\x9b\x43\x62\xee\x71\xfe\x82\x66\x3f\x4d\xce\x1e\x8c\xd2\x1e\x4f\x4b\x71\x24\xdb\xea\x68\x03\xee\xbe\x7f\xfd\x06\x49\x8d\x28\x8c\xa4\x2d\xdc\x16\x81\x99\xec\x18\xed\x20\x97\x56\xb0\x23\xbb\x43\x6f\x86\x90\x87\x0e\xb7\x40\x1e\x22\x2b\x24\xd4\x6d\xf5\x91\x05\x7c\x3a\xa7\x80\x62\x2c\x3a\x1e\x13\xf4\xc1\xa8\x67\xe9\x6e\x4a\xbe\x06\x5b\xb3\x27\x16\xa0\x04\x43\x74\xe8\x29\xa2\xdb\x56\x79\x0c\x7f\x02\x00\x00\xff\xff\x18\xb1\x37\x3d\x92\x05\x00\x00")

func definitionsPairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsToml,
		"definitions/pairs.toml",
	)
}

func definitionsPairsToml() (*asset, error) {
	bytes, err := definitionsPairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x0, 0x28, 0x68, 0x7d, 0x4b, 0x29, 0xb9, 0x56, 0x9b, 0x8c, 0x71, 0x7a, 0xb4, 0x5c, 0x96, 0x6f, 0x82, 0x16, 0x0, 0xaf, 0x8e, 0xa7, 0x2f, 0x32, 0x36, 0x13, 0x78, 0xa, 0x6e, 0x2f, 0x90}}
	return a, nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4f\x6f\xe3\xb6\x13\x3d\x87\x9f\xe2\xfd\x82\xe0\x57\xbb\xb0\xa5\xdd\xb6\xe8\x21\x5d\x1f\x8a\x75\xda\x06\x68\xe2\x05\x9c\xf6\x1c\x9a\x1a\xd9\x6c\x28\x52\x25\x47\x5e\x7b\x1d\x7d\xf7\x82\x92\x9c\xd8\x89\xbd\xf5\xa2\x68\x4f\xe6\x9f\x99\xc7\x99\x37\x6f\xc6\x4a\x53\xbc\x77\x19\x61\x4e\x96\xbc\x64\xca\x30\x5b\x63\xee\x9e\xf6\x50\x45\x96\x66\x94\x6b\xab\x59\x3b\x1b\x7e\xc0\x78\x82\xdb\xc9\x1d\xae\xc6\xd7\x77\x89\x28\xa5\x7a\x90\x73\x02\xaf\x4b\x0a\x42\xe8\xa2\x74\x9e\xd1\x13\x00\x70\x9e\x17\x7c\xde\xae\x58\x17\xd4\x2d\xc3\xda\xaa\x73\xd1\x17\x22\x4d\xf1\x93\x26\x93\x41\xdb\x8c\x56\xd0\x16\x6e\xf6\x07\x29\xc6\x4c\xb3\x50\xce\x86\x88\xb3\xd9\x0c\xe1\xa5\x9d\x13\x2e\x1e\x06\xb8\x58\xe2\x72\x84\x64\xd2\xd8\xdd\x10\x4b\xd4\x75\x83\xda\x7a\x5e\x47\xa0\xcd\x06\x17\xcb\xe4\x56\x16\x84\x47\xb0\xfb\x20\x83\x92\x06\x75\x8d\x4a\x5b\xfe\xfe\x3b\x8c\xf0\xf6\xdd\xbb\x68\xf4\x10\x9d\x23\x3e\xd9\x2c\x2e\xdb\x90\x5a\x6c\xe8\x00\x5e\x10\x42\x21\x8d\xa1\xc0\xa8\xac\xe6\x18\xe2\xdc\x0d\x03\x3b\x2f\xe7\x94\x88\x34\x8d\x0e\xb7\x93\xbb\xab\xe9\x65\x5c\x01\xc3\xce\xfd\xab\x80\x3c\xa6\x16\x30\xfd\x65\xf2\xdb\xaf\x63\x58\xc7\x98\x11\xd4\x22\xa6\x92\xc1\x55\x1c\x74\x46\x08\xe4\x97\x5a\x51\x48\xf6\xdd\xf1\xfe\xc7\xdb\x48\x71\xf4\x70\xa5\xa6\xec\xc5\xb5\x0e\x50\xce\xaa\xca\x7b\xb2\x8c\x20\x73\x7a\x06\xb0\x66\x8d\xfb\xeb\xf1\xfd\x00\xf7\x1f\x24\x2f\xe2\xef\x8d\xcb\xe8\x1e\xd2\x13\x3c\xfd\x59\x69\x4f\x19\xb2\xca\x6b\x3b\x87\xd1\x81\xe1\xca\x58\xe8\x58\xdb\x01\x1c\x2f\xc8\x77\xb1\xb7\x90\x80\x72\x95\xc9\x62\x2c\x39\xb1\x5a\x50\x86\xa5\x96\x30\xf2\xd3\x1a\x81\x25\xc3\xb8\xb9\x56\x97\x58\x30\x97\xe1\x32\x4d\x67\xb4\x76\x36\xdb\x72\xa4\x5d\x9a\x39\x15\xd2\x67\xda\x52\x6d\x99\xbc\x95\x26\x6d\x6b\x36\x8c\x48\xc3\x88\x24\xa2\x86\xb6\x29\x06\xf6\x95\x62\x6c\x4e\x15\x40\x34\xd3\x79\xac\xfc\x98\x82\xf2\xba\x8c\x09\x3d\x5f\x1e\xbd\x78\xaa\xfe\xb3\xdd\xdd\xba\xa4\x46\x3e\x75\xbd\x73\xf2\x42\x2c\xe2\x2c\x4d\xa1\x8c\x8e\x05\xe8\xb4\xb2\xdd\x59\x7c\x5c\x68\xb5\xd8\x29\x96\x34\x7a\x49\x89\x38\xeb\x2c\xa6\x2d\x13\x5e\x34\x8f\xa6\x69\x14\x3c\xaa\x40\x19\x64\x80\x8c\xbb\x42\x96\xc8\x9d\xdf\x36\xc4\x52\x9a\x8a\x06\x78\x83\x82\xa4\x0d\x8d\x98\x02\xf1\x00\x6f\xbb\x83\x40\xdc\x40\x35\x38\x8d\xca\xc5\x59\xe6\x2c\x35\x9b\x6f\xbf\x11\x67\x45\xbc\x8d\x8d\x97\xdc\x54\x4c\x2b\x51\x0b\x71\x0a\xb1\x9b\x4d\xc7\xe9\xd5\xaa\x69\xeb\xba\x16\x79\x65\x15\x7a\x0e\x5f\xb7\x96\x7d\xfc\x4c\xdc\xd1\xab\x43\x69\xe4\xba\x63\xae\xd7\xdf\xe7\x0e\x9b\x26\x42\x4f\x5c\x79\x0b\x97\xbc\xa2\x3a\xc6\xf4\x0a\x7c\x7a\x04\x7c\xb9\x0f\xde\xdf\x7a\x74\xaf\x1c\x80\xc7\x08\xcb\xbd\x08\x44\x57\x4e\x13\x9a\xd7\xa3\xd8\x8f\xa4\x82\x8f\xda\x18\xcc\x89\x71\xf0\x36\xf7\xae\xe8\x6a\xdd\x8c\x84\x83\x62\xfb\x02\xda\x7a\x7b\xa9\x0d\x30\x73\xce\xf4\x9f\x12\x8b\x8d\xd2\xeb\xb7\xca\xd1\x39\x5c\x12\x6b\xfe\xff\x93\xe6\xdf\xff\x46\x78\xd3\xe1\x7c\xbe\x14\x03\xb0\xaf\xa8\x31\xac\xc5\x2e\x69\x3b\x91\x3d\xe2\x13\x79\xf7\x7b\x14\x66\xe3\x91\x4b\x13\x48\xb4\x3c\xde\x54\x81\xff\x4b\x2e\x3f\xf3\xde\x11\x19\xfe\x23\x1e\x47\xfb\x3c\x96\xd2\x6a\xd5\xcb\x0b\x4e\xa6\xa5\xd7\x96\xf3\xde\x79\xd7\xb6\x3b\x08\x75\x1d\xe7\x40\xd7\xb8\xe7\xfd\x7e\x47\xee\xdf\xb7\x44\x9a\x1e\x6b\x82\x96\xca\x70\x8c\x4a\x6d\xd9\x7d\x39\x95\xff\x42\xc3\xb5\xd4\x3e\x8e\x4e\xe1\xf6\x60\x87\xb6\x03\x77\x77\xf6\xbe\x0a\x5b\x19\x67\xa9\xb7\xda\x39\xd9\x3c\xcd\xf7\x53\xbe\x1e\x0e\x86\xbf\x3a\x54\x92\x17\xff\x1a\x3b\x19\x36\x0e\xf1\xd3\xa5\x16\x7f\x05\x00\x00\xff\xff\xa7\xaa\x95\x75\x54\x09\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x61, 0x7d, 0x5b, 0xc0, 0xc8, 0xe7, 0x81, 0xf1, 0x98, 0xf, 0xb1, 0xee, 0x37, 0x9f, 0xa2, 0xc0, 0x15, 0x45, 0xcd, 0xb, 0x28, 0xe8, 0x1b, 0xcb, 0xb2, 0x9f, 0x24, 0x62, 0x3b, 0xf4, 0x3a}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\xf3\xe6\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xe6\x8e\x6d\x4d\x99\x98\x6b\x63\xf9\xd2\x9e\x0a\xed\x6b\x79\xa2\xde\xbb\xb2\x61\x1f\x95\x21\x69\xfc\xfa\x5e\x76\xbf\x64\xb8\x1a\x79\x61\x0e\xba\xb2\xe4\x6e\x3e\xc5\x8f\xb7\xb9\x0f\xd4\x64\x42\x2c\x85\x18\x86\x35\xa2\x72\x86\x90\xbf\xae\x90\x77\xd8\xfc\x41\x71\x48\x99\x31\x8e\xd3\x34\x0f\x4e\xd5\x94\x78\xde\x15\xbb\x54\x7e\x80\xfd\x41\x35\x5a\x55\x49\x23\x25\x5e\x2c\x5f\x86\xe1\xae\x1c\x47\xbc\xd9\xaa\x82\x0a\xa1\xea\x91\xf8\x6d\x6f\x1c\xd1\xa9\xaa\x25\xb0\xc7\x3e\x4c\x9f\x56\x08\x29\xc5\x2c\xd9\x52\xa3\xa3\x9d\x70\xb2\x3d\xb7\x4e\x7f\x33\x5e\x74\x37\xbf\x63\x1f\x52\xbf\x44\x8a\x8a\x61\xba\x3f\x12\xb7\xd1\x4d\x64\x06\xe9\x3d\x51\xbf\x41\xf6\x25\x44\xb6\x7a\x4c\x9f\x53\x9c\x0d\xba\x99\x8c\x62\xbe\x98\x5c\x99\x12\x7c\x06\x00\x00\xff\xff\x4a\xa4\x90\x14\x01\x02\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x39, 0x9e, 0xc1, 0x58, 0xb2, 0xe1, 0x28, 0x83, 0x3f, 0x14, 0x45, 0x7, 0x96, 0x7c, 0xf8, 0xb7, 0x32, 0x8d, 0xde, 0xd, 0x5e, 0xeb, 0x65, 0x68, 0x64, 0x58, 0xd9, 0xad, 0x94, 0xe5, 0x38}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xdb\xb8\x15\x7e\xf7\xaf\x38\x2b\x0c\x0a\x3b\x70\xa4\xdd\xa2\x2f\x9d\xc2\x0f\xed\x4c\x9a\x0e\x36\x97\x41\x26\xdb\x7d\xc8\x2e\x06\xb4\x74\x64\xb3\x96\x48\x85\xa4\x3d\x31\x5c\xfd\xf7\x82\x17\x5d\x4d\xc9\x76\xd2\xdd\x60\x81\xcc\x4b\x64\xf2\xf0\xf0\xf0\x5c\x3e\x7e\x24\x13\x45\x70\xc3\x13\x84\x15\x32\x14\x44\x61\x02\xcb\x3d\xac\x78\xfd\x1b\x76\x94\x40\x9c\x27\x51\x82\x29\x65\x54\x51\xce\xe4\xdf\xe0\xf6\x2d\xbc\x79\xfb\x1e\x5e\xdc\xde\xbd\x0f\x27\x05\x89\x37\x64\x85\x70\x38\x40\xf8\x86\xe4\x08\x65\x39\x99\xd0\xbc\xe0\x42\xc1\x74\x02\x00\x10\xc4\x9c\x29\xfc\xa4\x02\xfb\x8b\x72\xf7\xa1\x68\x8e\xc1\xc4\x7e\xaf\xa8\x5a\x6f\x97\x61\xcc\xf3\x68\x89\x7b\xce\x12\xa9\xb8\x20\x2b\x8c\x56\xfc\x79\xf5\xb9\xfb\x4b\x54\x6c\x56\xd1\x5a\xa9\x22\xce\x28\xb2\x4a\xe1\x99\x63\x25\x8a\x1d\x8d\x51\xda\x51\xe1\xd9\xe3\xd4\xbe\xd0\x83\x66\x93\xc9\x8e\x08\x78\x84\x07\xdb\x25\xdc\xcf\x4a\x6d\xf8\x60\x3f\x5e\x08\xc1\xab\xbe\xc6\xd4\xf0\x6d\x61\x9c\xe7\x3a\xf4\xd2\xc3\xdb\xad\x20\xba\x71\x32\x89\x22\x78\xbf\x2f\x10\xa8\x04\xb5\x46\xd0\x33\x42\xca\x45\xc7\xa7\x31\x67\x52\x59\xb1\x05\x04\xad\x9e\xc0\x8c\x7f\xbb\xfc\x0f\xc6\xea\x61\x2f\x15\xe6\xaf\x51\x91\x84\x28\x02\x7a\x15\x28\x41\x9a\x56\xc8\xab\x66\xad\x9a\x1b\xf9\x70\x62\xe6\x1a\x18\x2c\xb6\xb1\x82\xc3\xe4\x70\x78\x0e\x82\xb0\x15\xc2\xd5\xe3\x1c\xae\x76\x70\xbd\x80\xf0\x8e\xa5\x5c\x6a\xbb\xb4\x33\xb5\x04\x4d\x01\x3f\xc2\xd5\x2e\x7c\x88\x79\x81\x10\xd8\x09\x82\x9e\x08\xe3\x4a\xcb\xbc\xcc\xf8\x92\x64\xed\xbe\xab\x82\xe9\xe5\x5c\x2f\x74\xb7\x59\xd9\x7f\x41\xf1\x7b\x22\xe3\xae\x1c\x4d\xb5\xc0\x2d\x95\x45\x46\xf6\x95\x6f\xc0\xfd\xb5\x14\x2d\x06\xc4\xb4\x08\xb2\xa4\xf9\x69\xe4\x50\xc6\x82\x9a\x08\xb5\x3b\xac\xa6\xb2\x74\x52\xc6\xf7\x43\x6a\xea\x9f\xad\xcf\xd2\x44\xe6\x25\x2a\xaf\x7f\x9f\x68\x96\xc1\x0a\x95\xdf\xfb\xa9\xe0\xb9\xeb\x09\x27\x51\xa4\x15\x3d\x87\xf7\x6b\x2a\x21\xdd\xb2\xd8\x58\x2a\xd7\x7c\x9b\x25\xc6\xa5\x4b\x84\x98\x64\x99\xad\x5f\x97\x91\x40\xf3\x22\xc3\x1c\x99\x42\x11\x56\xe3\x11\x04\xaa\xad\x60\x94\xad\xaa\x79\xad\x74\x3d\x31\x95\x20\x90\x24\xc0\x59\xb6\x07\xc2\x92\xde\x34\x39\x4f\x68\x4a\x31\x09\x27\xda\x8e\xa1\xc5\x4d\x39\x3c\xb3\xed\x33\xff\xf2\x0e\xc6\x6d\x32\x9f\x03\xdf\xe8\xa0\xf3\xf0\x25\xf6\x75\xcc\x8c\x0c\x4d\xb5\xc8\xa1\x8e\xb1\xb5\x1f\x64\x1e\x4e\x7d\x9a\xed\x20\x1b\x15\x27\xea\x13\x3b\x54\xd1\x91\x63\xd1\x91\x43\xd1\xa1\x4c\xf1\xf3\xa2\x63\xdc\xd8\x84\x87\xb3\x18\xe7\x50\x64\x48\x24\x42\x4e\x36\x08\x72\x2b\x10\x48\x96\x81\x51\xbc\x26\x12\x96\x88\x0c\x9e\x04\x55\x0a\x19\x2c\x31\xe5\x02\xb5\x25\xce\xe3\x03\x06\x37\x1e\x9f\x83\xcc\xbd\x56\xcf\x9c\x17\x79\xf8\x70\xe4\x6b\x99\xcf\x9c\x43\x1c\xbc\x9d\x8f\x24\x0e\x2a\x4d\xa3\xc3\x93\x21\x1d\x5f\x04\x28\x6e\x9e\xa0\x5f\xf0\x43\xa8\xe2\x01\x85\x51\x74\xe9\xe9\x1c\x46\x99\x0b\xd0\xa6\x2d\xda\x82\x8b\xa6\x79\x00\x7d\xda\x02\x23\x28\x74\x39\x12\xf9\x23\x53\x43\x91\x0f\x84\xdc\x90\xd7\x26\xbc\x4d\xae\xb7\x91\xc4\xaf\xf5\x62\x24\xf1\xaa\x99\x4a\x78\xd6\x32\x61\x36\x30\x59\x1f\x50\xe4\xe7\x00\x8a\x57\xb5\x07\x51\xbc\x72\x6d\x48\x19\x71\xb3\x3c\x76\xb3\x41\x93\x01\x37\xff\x4e\x90\x72\x8e\xeb\x0d\xb0\xf8\x5d\x54\xb9\x7f\x18\x59\xbc\x35\x7f\x4f\xa8\x90\x55\xaa\xfa\xea\xf8\x9c\xda\x6d\xea\xf5\x86\xb3\x34\xa3\xb1\xd2\xad\x51\x04\xb7\x58\x08\x8c\x35\xab\xbd\x86\x9f\x24\x42\xa1\x67\x0b\x7f\xa6\x6a\xdd\x29\x2b\xca\xa4\x42\x92\x18\xa7\xb7\x4a\x26\x8a\xe0\x48\xd4\x04\x90\x14\x45\xb6\x77\xc5\xe8\x6a\x1d\x76\x24\xdb\x22\xe8\x3d\xc1\xd2\x3c\xa7\xcc\x53\xdd\xc6\xe1\x7d\xc5\xd3\x5d\xb7\xb8\x67\xa0\x3d\x73\x9c\xa3\xba\xb5\x69\xfc\x11\xf7\xd7\x86\x09\x36\x86\x04\xf3\xba\xf7\xdf\xda\xa4\x6b\xd8\xcd\x5d\xfa\x76\xf0\xa0\xf5\x69\x18\xa9\x76\xcd\x6b\x52\xc0\x02\x72\x52\x7c\x90\x4a\x50\xb6\xfa\xd5\xfe\xe3\xac\x18\x8f\xdf\x25\x38\xdb\xb3\xb8\x5e\x82\x5b\xbb\x5b\x42\x17\xbc\xbc\xb3\x6b\x0d\xb2\x20\x31\x76\x4c\x50\x98\x17\x99\x3e\xba\x04\x54\x33\x9f\x54\xf7\x07\xa6\x2e\x1e\x32\xcd\x8a\xaa\xa9\xaf\x76\xe1\x5d\x2d\xe0\x57\x90\x22\x51\x5b\x31\x38\xfc\x9f\x5b\x16\x4b\xf3\xe1\xe4\xfc\x5a\xb4\x6f\x1f\x19\x3e\xb5\xb5\x4c\x7d\xfe\x99\x99\x46\x7c\x1a\x56\xd3\xb3\xa4\x31\xc2\x6f\xbe\xc3\x8d\x71\xfb\x7b\xd9\xa0\xbf\xcd\x61\xaf\xe7\xc0\xa6\x18\xb5\xef\x29\x4b\xf0\x13\x84\xf0\x7d\xdd\x6e\x64\x65\xbb\xef\x07\xdd\xa7\x93\x6b\x3a\x98\x40\xd5\x28\x67\xfe\x63\xbb\xaa\x3a\x89\x03\x0b\xf8\x93\x2d\x98\x6e\xfb\xe1\x68\xd3\x9b\x0d\xae\xa6\x89\xe6\xd0\x5a\x8e\x71\xe5\x2a\x65\xc7\x6b\xb2\x1d\x9d\xf6\x3f\x9b\xd9\x0c\xf7\x71\x66\x96\x65\x9d\x15\x35\xef\x19\x74\x43\x2a\xcf\x3a\x8f\x78\x3d\xb3\xe4\x3c\x3b\xae\x98\x21\x27\x34\xc9\x78\x2a\xa0\x29\x3b\x5a\x78\xd5\xb1\xb1\x46\x33\x5f\x85\x6b\xdc\xd4\x93\xd4\x6e\xd0\x1f\x7a\x88\x46\x5a\x7b\xbc\x2d\x88\x90\x98\x38\xb7\x58\xa7\xf5\x46\xe8\x01\x65\xd9\x75\x9c\xc9\x7f\xf8\xf0\xab\xc6\x1c\x7b\x69\x10\x45\xf0\x0e\x3f\x6e\xa9\xc0\xc4\xf6\xfa\x1c\xac\x3b\x2a\x73\x6b\x69\xe7\xd3\x7f\x11\x69\x26\x25\x54\xf8\x3c\x0b\x6d\xdf\x8e\x89\x35\xdd\x23\x47\x44\x7d\x46\x37\x11\x25\xd9\x79\xd6\xd6\xd2\xff\x6f\x6b\x4f\xdb\x5b\x85\x51\x48\xbc\x1f\x88\xa5\xd9\x0a\x8d\x84\xdd\xab\xa4\x41\x17\xc3\x64\x9e\x0d\xc4\xdf\xee\x7d\x63\x5a\xa7\xbc\x50\x55\x8c\x67\x30\x1d\xd0\x33\x07\x14\x82\x8b\x8a\x74\x08\x94\xdb\x4c\x69\xaf\x0d\xc8\x37\x3b\xa6\xf1\xfb\x35\xe8\x59\xaa\x6d\xd1\xfc\xa3\x8f\x31\x8f\x73\x30\xc5\x68\xa3\x61\x0c\x69\x06\xca\x27\xaa\xe2\x35\xec\xc2\x1f\x71\xdf\x6a\xf6\x67\xe0\x85\x59\xa8\xff\x62\xcd\xdd\x82\x6e\xdc\xf4\xde\xd8\x39\x0c\xd0\xd4\xad\x35\x3c\x91\x0a\x87\xa3\xa3\x4a\xcc\x99\xa2\x6c\x8b\x9d\x8e\xee\x51\xe3\x3c\xd5\x0b\x50\xa2\xa7\xc6\x0d\x1c\x1f\xb5\x0b\x0d\x1f\x09\xa7\xfd\xd4\x9b\x0d\x1d\x64\x86\x6b\xe6\xc2\xba\xf9\xe6\xdf\x41\xff\x96\xed\x22\xb8\x20\x65\x69\x0a\xdf\x5d\xea\x2a\x47\x61\x87\x6a\xb4\x9c\x37\x37\xa9\xba\xfc\xab\x29\xcd\x75\xea\x41\x73\x5d\x79\xfd\xc1\x51\xd2\x83\x27\x94\x50\xd6\xab\xe9\x2d\xb6\x7d\x70\xb3\x46\xcf\x81\xd1\xec\xc4\x26\x79\x06\xe5\x31\xa7\x2b\xff\x1e\x59\xb8\x3d\xb2\x18\xdc\x23\x6f\x31\x25\xdb\x4c\x59\x57\x68\x0f\x58\x2e\x4d\xa5\xb6\x42\xf7\xb8\x0d\xcf\xdc\xb0\x14\x18\xd3\x94\xc6\x40\x0c\x9f\xb3\x5b\xe6\x80\x82\xd1\x4b\x16\x6b\xf2\x29\x46\xe1\xf6\xd8\xee\x7e\xe0\xc9\x90\x63\x95\xe0\x65\xad\x1d\xfa\x59\x30\xb8\xda\x8d\xde\x55\x1c\x85\xe2\x0b\xb8\xca\x78\x1c\x2e\xa6\x33\x9b\xcb\xf9\x4c\x6f\xc8\x09\x4a\xf3\x35\xc8\xcb\x79\xf4\xe5\x0f\x44\x54\x36\x9f\xc3\x54\x36\x1e\xaa\x32\x95\xf0\xac\xe9\x9d\x8d\x4e\x33\x48\x5d\x36\x97\x72\x97\xcd\xef\x44\x5e\xbe\x51\x94\x8b\xb7\x50\xaf\x9d\x9e\x7d\xf5\x1b\x3b\xf9\xcd\x5c\xeb\x76\xc7\x6b\xef\x95\x7d\xc1\xf4\x0a\xdc\xc1\xfb\x15\xe7\xb6\x5c\xfb\x97\xea\x51\x04\x99\xee\x7b\x34\x71\x71\xd7\x02\x1a\x10\x04\x4f\xb6\x31\x26\x40\x19\xbc\x7c\xb8\x7f\xfe\xc3\xf7\x7f\x0d\xfb\x03\xef\x52\xd8\x4a\x14\x80\x8c\x2c\x33\x04\x65\xee\x67\xad\x86\x9a\xc0\x54\xf7\xb4\x74\xc5\xb8\x40\x73\xa9\x29\xb7\x85\x79\x10\x37\x33\x1a\x04\x08\xfb\xc1\x95\x61\x75\x41\x11\x36\x96\x7f\x56\x2c\x07\x1e\x1b\x8e\x08\xd8\x66\x9c\x81\xfd\xc4\x9c\xd5\x15\x09\xd3\x8d\xd7\xbb\x01\xf6\x18\x45\x70\xb3\xc6\x78\x03\xa2\x73\x20\x0a\xbf\x0a\xb5\x3c\xb1\xb2\xaf\xc9\x2d\x5b\x97\x72\xdd\x7b\xd3\xb1\xab\xa8\x5a\xcc\x4f\x39\x3d\x2e\x1e\xe6\x66\xf6\xaa\xfc\x15\xef\xbd\x7c\x75\x69\x5b\xa6\xbb\x1f\x2b\x5b\x07\x09\x5c\xed\x8d\x4c\x1e\xbd\x49\x1d\xdf\x43\x9e\x56\x73\xea\x19\xcb\xeb\xc9\xcf\xa5\x87\xe7\x50\xbf\x16\x8d\xb0\x9f\xfd\xab\x39\xfb\x50\xd3\x7d\xa6\x31\x84\x23\x16\xa8\x17\x4f\xc0\xfd\xe7\x17\x58\xee\x2b\xec\x0a\xdb\xec\xe2\xaa\x60\x65\x39\x6b\x4d\x34\x35\xd7\x5f\xe1\x3d\x11\x24\x97\xe1\x83\x49\x4a\x2d\xe1\xda\xdf\x99\x2c\x6b\x77\xd8\x3a\x88\xd5\x27\xbd\x16\x37\x5b\xf8\x0f\x12\x6f\x56\x82\x6f\x59\xe2\x5e\xbd\xaa\x57\xae\xb0\x99\xe9\x67\xaa\xd6\x37\x56\x7e\x1a\xab\x4f\x73\xe8\xcc\x7c\x43\xb2\x0c\x85\x86\xe8\xbe\x2b\x5a\xe3\x06\xbc\x32\xb6\xbe\xde\xac\xb5\xc5\xae\xad\x67\xc5\xd9\xeb\x4f\x30\x45\x61\x62\x30\x9d\x75\x39\xce\x55\x41\xd4\xba\x8a\xb3\x53\x7b\x4f\xd4\xda\x2e\xd0\x53\x1e\x84\x25\x30\xc5\x8f\x6e\x60\x10\xcc\xdc\x2f\x06\x81\xfb\xcf\x12\xc1\xcc\xfb\x50\xab\xc5\x17\x10\xcc\x7f\x09\x7e\x09\x8e\x9e\xa9\x7b\x88\x8c\x42\xc0\x42\x83\x3e\x17\x39\x51\x06\x89\xa6\x81\x5d\xa2\xce\xc5\xb2\x0c\x0c\x55\x6c\x14\x97\x25\xb8\x97\xc8\xe9\xac\x29\x79\x9a\x02\x43\x4b\x2c\xcc\x8b\xff\x6b\x9e\x20\x04\x5d\x6c\xc9\x75\x5b\x45\x3f\x1a\xa9\x63\x88\xd1\xd8\xcb\x43\xdd\x19\xde\x19\xe8\x35\x23\xcb\x72\x3a\x6b\x81\xad\x33\xbc\xc2\xd3\x46\xe1\x1d\xdb\x91\x8c\x3a\x50\x7d\xf1\xa9\xc0\xd8\xbc\xbc\xe9\xae\x96\xae\x39\xfc\x3d\x56\x5b\x92\x5d\x83\x9d\xa9\xec\xa1\xf8\x08\xce\xda\xe3\xd2\x02\x48\x51\x20\x4b\x0c\xc5\x96\x73\x90\xa1\x2b\x2b\x73\xfe\x6d\xa5\x77\x18\x86\xd6\x61\x3b\x22\x34\x25\x1e\xba\x7a\xb0\xca\x79\xa1\xe6\x75\x50\x46\xef\x28\xcd\xbc\xf5\x53\xb2\x1e\xf2\xdd\x42\x83\xfe\xd1\x86\xd4\xde\x1e\x7b\xe5\xd7\xe0\xcd\x0d\xc9\x51\x07\xc0\x53\x81\xef\x05\xcd\x5f\x11\xa9\x5c\x29\xbe\x60\x89\x66\xf2\xeb\x1b\x9e\xe7\xa4\x2c\xb5\xc5\xb3\x91\x8d\xa6\x0f\xe1\x63\xbb\x4d\xbb\xcf\x07\x96\x55\x86\x9f\x00\x4c\xc7\x03\x4e\x82\xa6\x95\xab\xc4\x2f\x05\x4f\x3d\xec\x37\x00\xd0\x2f\xc9\xb0\xb3\xb3\xcc\x2d\xf9\xce\x32\x43\x43\x04\xe1\x69\x4d\x33\x84\x35\x61\x49\x46\xd9\x0a\x4c\xdc\xf4\x02\xdd\x43\x72\x35\xcc\x24\xe8\xe3\xd9\xe9\xd9\x27\x47\xc6\xee\x81\xd4\xbb\x38\xeb\x6c\x62\xb7\x33\xcf\x04\x84\x32\xaa\x6a\xac\x38\xf3\xc9\x56\xff\xd5\x60\xf2\x0e\x57\x54\x2a\x14\x43\x57\x53\x62\xaa\xcf\x0d\x73\x78\x83\x4f\x83\x22\x33\xdf\xed\xc5\xd1\x0c\x0f\xf1\x1a\x73\xe2\xd4\xb9\xd7\x6f\x5d\x4d\xff\x0b\x00\x00\xff\xff\xa4\x01\x31\xa6\x11\x2b\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7f, 0x36, 0x30, 0xd8, 0xf7, 0x8e, 0x6f, 0xeb, 0x5f, 0x7e, 0x7b, 0x1, 0x64, 0x5, 0x51, 0x17, 0x9a, 0x74, 0x2f, 0xe5, 0x9c, 0x69, 0x30, 0x72, 0xc3, 0x1, 0x41, 0x62, 0x19, 0x54, 0x60, 0xb0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"definitions/features.toml":           definitionsFeaturesToml,
	"definitions/fields.toml":             definitionsFieldsToml,
	"definitions/info_object_meta.toml":   definitionsInfo_object_metaToml,
	"definitions/info_storage_meta.toml":  definitionsInfo_storage_metaToml,
	"definitions/operations.toml":         definitionsOperationsToml,
	"definitions/pairs.toml":              definitionsPairsToml,
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": {nil, map[string]*bintree{
		"features.toml":          {definitionsFeaturesToml, map[string]*bintree{}},
		"fields.toml":            {definitionsFieldsToml, map[string]*bintree{}},
		"info_object_meta.toml":  {definitionsInfo_object_metaToml, map[string]*bintree{}},
		"info_storage_meta.toml": {definitionsInfo_storage_metaToml, map[string]*bintree{}},
		"operations.toml":        {definitionsOperationsToml, map[string]*bintree{}},
		"pairs.toml":             {definitionsPairsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
