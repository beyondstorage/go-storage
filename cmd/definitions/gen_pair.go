//go:build tools
// +build tools

package main

import (
	"sort"

	"github.com/Xuanwo/gg"
	"github.com/Xuanwo/templateutils"
	log "github.com/sirupsen/logrus"
)

func generatePair(data *Data, path string) {
	f := gg.Group()
	f.LineComment("Code generated by go generate cmd/definitions; DO NOT EDIT.")
	f.Package("pairs")
	f.Imports().
		Path("context").
		Path("time").
		Line().
		Path("github.com/beyondstorage/go-storage/v4/pkg/httpclient").
		Dot("github.com/beyondstorage/go-storage/v4/types")

	ps := make([]*Pair, 0, len(data.Pairs))
	for _, v := range data.Pairs {
		v := v
		ps = append(ps, v)
	}
	sort.SliceStable(ps, func(i, j int) bool {
		return ps[i].Name < ps[j].Name
	})

	for _, v := range ps {
		pname := templateutils.ToPascal(v.Name)

		xfn := f.Function("With" + pname)

		xfn.NamedLineComment(`will apply %s value to Options.

%s %s`, v.Name, pname, v.originalDescription)
		xfn.Parameter("v", v.Type())
		xfn.Result("p", "Pair")
		xfn.Body(
			gg.Embed(func() gg.Node {
				r := gg.Return()
				r.Value("Pair").
					Field("Key", gg.Lit(v.Name).String()).
					Field("Value", "v")
				return r
			}),
		)
		if v.Defaultable {
			name := "default_" + v.Name
			pname := templateutils.ToPascal(name)

			xfn := f.Function("With" + pname)

			xfn.NamedLineComment(`will apply %s value to Options.

%s %s`, name, pname, v.originalDescription)
			xfn.Parameter("v", v.Type())
			xfn.Result("p", "Pair")
			xfn.Body(
				gg.Embed(func() gg.Node {
					r := gg.Return()
					r.Value("Pair").
						Field("Key", gg.Lit(name).String()).
						Field("Value", "v")
					return r
				}),
			)
		}
	}

	err := f.WriteFile(path)
	if err != nil {
		log.Fatalf("generate to %s: %v", path, err)
	}
}
