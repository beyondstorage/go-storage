//go:build tools
// +build tools

package main

import (
	"github.com/Xuanwo/gg"
	"github.com/Xuanwo/templateutils"
	log "github.com/sirupsen/logrus"

	def "go.beyondstorage.io/v5/definitions"
)

func generateFeatures(data *Data, path string) {
	f := gg.NewGroup()
	f.AddLineComment("Code generated by go generate cmd/definitions; DO NOT EDIT.")
	f.AddPackage("types")

	// Generate service features.
	serviceFeatureName := "ServiceFeatures"
	f.AddLineComment("%s indicates features supported by servicer.", serviceFeatureName)
	sf := f.NewStruct(serviceFeatureName)
	sf.AddLine()
	sf.AddLineComment("operation features")
	for _, op := range def.SortOperations(def.OperationsService) {
		sf.AddField(templateutils.ToPascal(op.Name), "bool")
	}
	sf.AddLineComment("operation-related features")
	for _, fe := range def.SortFeatures(def.FeaturesArray) {
		if fe.HasNamespace(def.NamespaceService) {
			sf.AddField(templateutils.ToPascal(fe.Name), "bool")
		}
	}

	// Generate storage features.
	storageFeatureName := "StorageFeatures"
	f.AddLineComment("%s indicates features supported by servicer.", storageFeatureName)
	sf = f.NewStruct(storageFeatureName)
	sf.AddLine()
	sf.AddLineComment("operation features")
	for _, op := range def.SortOperations(def.OperationsStorage) {
		sf.AddField(templateutils.ToPascal(op.Name), "bool")
	}
	sf.AddLineComment("operation-related features")
	for _, fe := range def.SortFeatures(def.FeaturesArray) {
		if fe.HasNamespace(def.NamespaceStorage) {
			sf.AddField(templateutils.ToPascal(fe.Name), "bool")
		}
	}

	err := f.WriteFile(path)
	if err != nil {
		log.Fatalf("generate to %s: %v", path, err)
	}
}
