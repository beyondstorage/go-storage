//go:build tools
// +build tools

package main

import (
	"github.com/Xuanwo/gg"
	"github.com/Xuanwo/templateutils"
	log "github.com/sirupsen/logrus"
)

func generateFeatures(data *Data, path string) {
	f := gg.NewGroup()
	f.AddLineComment("Code generated by go generate cmd/definitions; DO NOT EDIT.")
	f.AddPackage("types")

	for _, in := range data.Interfaces() {
		featureName := ""
		if in.Name == "servicer" {
			featureName = "ServiceFeatures"
		} else if in.Name == "storager" {
			featureName = "StorageFeatures"
		} else {
			continue
		}

		f.AddLineComment("%s indicates features supported by %s.", featureName, in.Name)
		features := f.NewStruct(featureName)
		features.AddLineComment("").AddLineComment("operation features")
		for _, op := range in.SortedOps() {
			if op.Name == "features" {
				continue
			}
			features.AddField(templateutils.ToPascal(op.Name), "bool")

			//f.AddLineComment("%s returns whether this %s support %s or not.", templateutils.ToPascal(op.Name), in.Name, op.Name)
			//xfn := f.NewFunction(templateutils.ToPascal(op.Name)).
			//	WithReceiver("f", featureName).
			//	AddResult("", "bool")
			//xfn.AddBody(gg.S("return f.%s", templateutils.ToCamel(op.Name)))
		}
		features.AddLineComment("operation-related features and virtual features")
		for _, feat := range data.Features() {
			features.AddField(templateutils.ToPascal(feat.Name), "bool")

			//f.AddLineComment("%s returns whether this %s support %s or not.", templateutils.ToPascal(feat.Name), in.Name, feat.Name)
			//xfn := f.NewFunction(templateutils.ToPascal(feat.Name)).
			//	WithReceiver("f", featureName).
			//	AddResult("", "bool")
			//xfn.AddBody(gg.S("return f.%s", templateutils.ToCamel(feat.Name)))
		}
	}

	err := f.WriteFile(path)
	if err != nil {
		log.Fatalf("generate to %s: %v", path, err)
	}
}
