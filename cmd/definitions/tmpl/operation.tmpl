package types

import (
    "context"
    "io"
    "net/http"
    "time"
)

{{- range $_, $i := .Interfaces }}
{{ $i.Description }}
type {{ $i.DisplayName }} interface {
    {{- if or (eq $i.Name "servicer") (eq $i.Name "storager")}}
    String() string
    {{- end }}

    {{ range $_, $op := $i.Ops }}
    // {{ $op.Name | toPascal }} {{ $op.Description }}
    {{ $op.Name | toPascal }}({{ $op.FormatParams }}) ({{ $op.FormatResultsWithPackageName "storage" }})
    {{- if not $op.Local }}
    // {{ $op.Name | toPascal }}WithContext {{ $op.Description }}
    {{ $op.Name | toPascal }}WithContext(ctx context.Context,{{ $op.FormatParams }}) ({{ $op.FormatResultsWithPackageName "storage" }})
    {{ end }}
    {{ end }}

    mustEmbedUnimplemented{{ $i.DisplayName }}()
}

// Unimplemented{{ $i.DisplayName }} must be embedded to have forward compatible implementations.
type Unimplemented{{ $i.DisplayName }} struct {}

func (s Unimplemented{{ $i.DisplayName }}) mustEmbedUnimplemented{{ $i.DisplayName }}() {}

func (s Unimplemented{{ $i.DisplayName }}) String() string {
    return "Unimplemented{{ $i.DisplayName }}"
}

{{ range $_, $op := $i.Ops }}
func (s Unimplemented{{ $i.DisplayName }})  {{ $op.Name | toPascal }}({{ $op.FormatParams }}) ({{ $op.FormatResultsWithPackageName "storage" }}) {
    {{- if not $op.Local }}
    err = NewOperationNotImplementedError("{{ $op.Name }}")
    {{- end }}
    return
}
{{- if not $op.Local }}
func (s Unimplemented{{ $i.DisplayName }}) {{ $op.Name | toPascal }}WithContext(ctx context.Context,{{ $op.FormatParams }}) ({{ $op.FormatResultsWithPackageName "storage" }}) {
    err = NewOperationNotImplementedError("{{ $op.Name }}")
    return
}
{{ end }}
{{ end }}
{{- end }}
