// Code generated by go generate cmd/definitions; DO NOT EDIT.
package definitions

import (
	"fmt"

	"go.beyondstorage.io/v5/types"
)

type Service struct {
	Features types.ServiceFeatures

	Create []Pair
	Delete []Pair
	Get    []Pair
	List   []Pair
}

func (s Service) ListPairs(name string) []Pair {
	switch name {
	case "create":
		return s.Create
	case "delete":
		return s.Delete
	case "get":
		return s.Get
	case "list":
		return s.List
	default:
		panic(fmt.Errorf("invalid op: %s", name))
	}
}

type Storage struct {
	Features types.StorageFeatures

	CombineBlock                   []Pair
	CommitAppend                   []Pair
	CompleteMultipart              []Pair
	Copy                           []Pair
	Create                         []Pair
	CreateAppend                   []Pair
	CreateBlock                    []Pair
	CreateDir                      []Pair
	CreateLink                     []Pair
	CreateMultipart                []Pair
	CreatePage                     []Pair
	Delete                         []Pair
	Fetch                          []Pair
	List                           []Pair
	ListBlock                      []Pair
	ListMultipart                  []Pair
	Metadata                       []Pair
	Move                           []Pair
	QuerySignHTTPCompleteMultipart []Pair
	QuerySignHTTPCreateMultipart   []Pair
	QuerySignHTTPDelete            []Pair
	QuerySignHTTPListMultipart     []Pair
	QuerySignHTTPRead              []Pair
	QuerySignHTTPWrite             []Pair
	QuerySignHTTPWriteMultipart    []Pair
	Read                           []Pair
	Stat                           []Pair
	Write                          []Pair
	WriteAppend                    []Pair
	WriteBlock                     []Pair
	WriteMultipart                 []Pair
	WritePage                      []Pair
}

func (s Storage) ListPairs(name string) []Pair {
	switch name {
	case "combine_block":
		return s.CombineBlock
	case "commit_append":
		return s.CommitAppend
	case "complete_multipart":
		return s.CompleteMultipart
	case "copy":
		return s.Copy
	case "create":
		return s.Create
	case "create_append":
		return s.CreateAppend
	case "create_block":
		return s.CreateBlock
	case "create_dir":
		return s.CreateDir
	case "create_link":
		return s.CreateLink
	case "create_multipart":
		return s.CreateMultipart
	case "create_page":
		return s.CreatePage
	case "delete":
		return s.Delete
	case "fetch":
		return s.Fetch
	case "list":
		return s.List
	case "list_block":
		return s.ListBlock
	case "list_multipart":
		return s.ListMultipart
	case "metadata":
		return s.Metadata
	case "move":
		return s.Move
	case "query_sign_http_complete_multipart":
		return s.QuerySignHTTPCompleteMultipart
	case "query_sign_http_create_multipart":
		return s.QuerySignHTTPCreateMultipart
	case "query_sign_http_delete":
		return s.QuerySignHTTPDelete
	case "query_sign_http_list_multipart":
		return s.QuerySignHTTPListMultipart
	case "query_sign_http_read":
		return s.QuerySignHTTPRead
	case "query_sign_http_write":
		return s.QuerySignHTTPWrite
	case "query_sign_http_write_multipart":
		return s.QuerySignHTTPWriteMultipart
	case "read":
		return s.Read
	case "stat":
		return s.Stat
	case "write":
		return s.Write
	case "write_append":
		return s.WriteAppend
	case "write_block":
		return s.WriteBlock
	case "write_multipart":
		return s.WriteMultipart
	case "write_page":
		return s.WritePage
	default:
		panic(fmt.Errorf("invalid op: %s", name))
	}
}
