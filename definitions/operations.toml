[appender]
description = "is the interface for Append related operations."

[appender.op.create_append]
params = ["path"]
results = ["o"]
description = """
will create an append object.

## Behavior

- CreateAppend SHOULD create an appendable object with position 0 and size 0.
- CreateAppend SHOULD NOT return an error as the object exist.
  - Service SHOULD check and delete the object if exists.
"""

[appender.op.write_append]
description = "will append content to an append object."
params = ["o", "r", "size"]
results = ["n"]
object_mode = "append"

[appender.op.commit_append]
description = "will commit and finish an append process."
params = ["o"]
object_mode = "append"

[blocker]
description = "is the interface for Block related operations."

[blocker.op.create_block]
params = ["path"]
results = ["o"]
description = """
will create a new block object.

## Behavior
- CreateBlock SHOULD NOT return an error as the object exist.
  - Service that has native support for `overwrite` doesn't NEED to check the object exists or not.
  - Service that doesn't have native support for `overwrite` SHOULD check and delete the object if exists.
"""

[blocker.op.write_block]
description = "will write content to a block."
params = ["o", "r", "size", "bid"]
results = ["n"]
object_mode = "block"

[blocker.op.combine_block]
description = "will combine blocks into an object."
params = ["o", "bids"]
object_mode = "block"

[blocker.op.list_block]
description = "will list blocks belong to this object."
params = ["o"]
results = ["bi"]
object_mode = "block"

[copier]
description = "is the interface for Copy."

[copier.op.copy]
params = ["src", "dst"]
description = """
will copy an Object or multiple object in the service.

## Behavior

- Copy only copy one and only one object.
  - Service DON'T NEED to support copy a non-empty directory or copy files recursively.
  - User NEED to implement copy a non-empty directory and copy recursively by themself.
  - Copy a file to a directory SHOULD return `ErrObjectModeInvalid`.
- Copy SHOULD NOT return an error as dst object exists.
  - Service that has native support for `overwrite` doesn't NEED to check the dst object exists or not.
  - Service that doesn't have native support for `overwrite` SHOULD check and delete the dst object if exists.
- A successful copy opration should be complete, which means the dst object's content and metadata should be the same as src object.
"""

[direr]
description = "is the interface for Directory."

[direr.op.create_dir]
description = "will create a new dir object."
params = ["path"]
results = ["o"]

[fetcher]
description = "is the interface for Fetch."

[fetcher.op.fetch]
params = ["path", "url"]
description = """
will fetch from a given url to path.

## Behavior

- Fetch SHOULD NOT return an error as the object exists.
- A successful fetch operation should be complete, which means the object's content and metadata should be the same as requiring from the url.
"""

[httpSigner]
description = "is the interface for Signer."

[httpSigner.op.query_sign_http]
description = "will return `*http.Request` with query string parameters containing signature in `URL` to represent the client's request."
params = ["op", "path", "expire"]
results = ["req"]

[mover]
description = "is the interface for Move."

[mover.op.move]
params = ["src", "dst"]
description = """
will move an object in the service.

## Behavior

- Move only move one and only one object.
  - Service DON'T NEED to support move a non-empty directory.
  - User NEED to implement move a non-empty directory by themself.
  - Move a file to a directory SHOULD return `ErrObjectModeInvalid`.
- Move SHOULD NOT return an error as dst object exists.
  - Service that has native support for `overwrite` doesn't NEED to check the dst object exists or not.
  - Service that doesn't have native support for `overwrite` SHOULD check and delete the dst object if exists.
- A successful move operation SHOULD be complete, which means the dst object's content and metadata should be the same as src object.
"""

[multiparter]
description = "is the interface for Multipart related operations."

[multiparter.op.create_multipart]
params = ["path"]
results = ["o"]
description = """
will create a new multipart.

## Behavior

- CreateMultipart SHOULD NOT return an error as the object exists.
"""

[multiparter.op.write_multipart]
description = "will write content to a multipart."
params = ["o", "r", "size", "index"]
results = ["n", "part"]
object_mode = "part"

[multiparter.op.complete_multipart]
description = "will complete a multipart upload and construct an Object."
params = ["o", "parts"]
object_mode = "part"

[multiparter.op.list_multipart]
description = "will list parts belong to this multipart."
params = ["o"]
results = ["pi"]
object_mode = "part"

[pager]
description = "is the interface for Page related operations which support random write."

[pager.op.create_page]
params = ["path"]
results = ["o"]
description = """
will create a new page object.

## Behavior

- CreatePage SHOULD NOT return an error as the object exists.
"""

[pager.op.write_page]
description = "will write content to specific offset."
params = ["o", "r", "size", "offset"]
results = ["n"]
object_mode = "page"

[reacher]
description = "is the interface for Reach."

[reacher.op.reach]
description = "will provide a way, which can reach the object."
params = ["path"]
results = ["url"]

[servicer]
description = "can maintain multipart storage services."

[servicer.op.create]
description = "will create a new storager instance."
params = ["name"]
results = ["store"]

[servicer.op.delete]
description = "will delete a storager instance."
params = ["name"]

[servicer.op.get]
description = "will get a valid storager instance for service."
params = ["name"]
results = ["store"]

[servicer.op.list]
description = "will list all storager instances under this service."
results = ["sti"]

[storager]
description = "is the interface for storage service."

[storager.op.delete]
params = ["path"]
pairs = ["object_mode"]
description = """
will delete an object from service.

## Behavior

- Delete only delete one and only one object.
  - Service DON'T NEED to support remove all.
  - User NEED to implement remove_all by themself.
- Delete is idempotent.
  - Successful delete always return nil error.
  - Delete SHOULD never return `ObjectNotExist`
  - Delete DON'T NEED to check the object exist or not.
"""

[storager.op.metadata]
description = "will return current storager metadata."
results = ["meta"]
local = true

[storager.op.list]
params = ["path"]
pairs = ["list_mode"]
results = ["oi"]
description = """
will return list a specific path.

## Behavior

- Service SHOULD support default `ListMode`.
- Service SHOULD implement `ListModeDir` without the check for `VirtualDir`.
- Service DON'T NEED to `Stat` while in `List`.
"""

[storager.op.read]
description = "will read the file's data."
params = ["path", "w"]
pairs = ["size", "offset", "io_callback"]
results = ["n"]

[storager.op.create]
params = ["path"]
results = ["o"]
pairs = ["object_mode"]
local = true
description = """
will create a new object without any api call.

## Behavior

- Create SHOULD NOT send any API call.
- Create SHOULD accept ObjectMode pair as object mode.
"""

[storager.op.stat]
params = ["path"]
pairs = ["object_mode"]
results = ["o"]
description = """
will stat a path to get info of an object.

## Behavior

- Stat SHOULD accept ObjectMode pair as hints.
  - Service COULD have different implementations for different object mode.
  - Service SHOULD check if returning ObjectMode is match
"""

[storager.op.write]
params = ["path", "r", "size"]
pairs = ["io_callback"]
results = ["n"]
description = """
will write data into a file.

## Behavior

- Write SHOULD NOT return an error as the object exist.
  - Service that has native support for `overwrite` doesn't NEED to check the object exists or not.
  - Service that doesn't have native support for `overwrite` SHOULD check and delete the object if exists.
- A successful write operation SHOULD be complete, which means the object's content and metadata should be the same as specified in write request.
"""

[linker]
description = "is the interface for link"

[linker.op.create_link]
params = ["path", "target"]
results = ["o"]
description = """
Will create a link object.

# Behavior

- `path` and `target` COULD be relative or absolute path.
- If `target` not exists, CreateLink will still create a link object to path.
- If `path` exists:
  - If `path` is a symlink object, CreateLink will remove the symlink object and create a new link object to path.
  - If `path` is not a symlink object, CreateLink will return an ErrObjectModeInvalid error when the service does not support overwrite.
- A link object COULD be returned in `Stat` or `List`.
- CreateLink COULD implement virtual_link feature when service without native support.
  - Users SHOULD enable this feature by themselves.
"""
